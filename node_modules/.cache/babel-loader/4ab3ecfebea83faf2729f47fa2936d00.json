{"ast":null,"code":"import { getApp, _getProvider, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, isNodeSdk, base64, stringToByteArray, Sha1, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\nconst name = \"@firebase/database\";\nconst version = \"0.13.6\";\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\n\nlet SDK_VERSION = '';\n/**\n * SDK_VERSION should be set before any database instance is created\n * @internal\n */\n\nfunction setSDKVersion(version) {\n  SDK_VERSION = version;\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\n\n\nclass DOMStorageWrapper {\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(domStorage_) {\n    this.domStorage_ = domStorage_; // Use a prefix to avoid collisions with other stuff saved by the app.\n\n    this.prefix_ = 'firebase:';\n  }\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n\n\n  set(key, value) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n\n\n  get(key) {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  prefixedName_(name) {\n    return this.prefix_ + name;\n  }\n\n  toString() {\n    return this.domStorage_.toString();\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\n\n\nclass MemoryStorage {\n  constructor() {\n    this.cache_ = {};\n    this.isInMemoryStorage = true;\n  }\n\n  set(key, value) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key) {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n\n    return null;\n  }\n\n  remove(key) {\n    delete this.cache_[key];\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\n\n\nconst createStoragefor = function (domStorageName) {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (typeof window !== 'undefined' && typeof window[domStorageName] !== 'undefined') {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {} // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n\n\n  return new MemoryStorage();\n};\n/** A storage object that lasts across sessions */\n\n\nconst PersistentStorage = createStoragefor('localStorage');\n/** A storage object that only lasts one session */\n\nconst SessionStorage = createStoragefor('sessionStorage');\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst logClient = new Logger('@firebase/database');\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\n\nconst LUIDGenerator = function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n}();\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\n\n\nconst sha1 = function (str) {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs) {\n  let message = '';\n\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n\n    if (Array.isArray(arg) || arg && typeof arg === 'object' && // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof arg.length === 'number') {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n\n    message += ' ';\n  }\n\n  return message;\n};\n/**\n * Use this for all debug messages in Firebase.\n */\n\n\nlet logger = null;\n/**\n * Flag to check for log availability on first log message\n */\n\nlet firstLog_ = true;\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\n\nconst enableLogging$1 = function (logger_, persistent) {\n  assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\n\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nconst log = function (...varArgs) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging$1(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nconst logWrapper = function (prefix) {\n  return function (...varArgs) {\n    log(prefix, ...varArgs);\n  };\n};\n\nconst error = function (...varArgs) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nconst fatal = function (...varArgs) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nconst warn = function (...varArgs) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\n\n\nconst warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (typeof window !== 'undefined' && window.location && window.location.protocol && window.location.protocol.indexOf('https:') !== -1) {\n    warn('Insecure Firebase access from a secure page. ' + 'Please use https in calls to new Firebase().');\n  }\n};\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\n\n\nconst isInvalidJSONNumber = function (data) {\n  return typeof data === 'number' && (data !== data || // NaN\n  data === Number.POSITIVE_INFINITY || data === Number.NEGATIVE_INFINITY);\n};\n\nconst executeWhenDOMReady = function (fn) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n    let called = false;\n\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false); // fallback to onload.\n\n      window.addEventListener('load', wrappedFn, false); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (document.attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      document.attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      }); // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      window.attachEvent('onload', wrappedFn); // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\n\n\nconst MIN_NAME = '[MIN_NAME]';\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\n\nconst MAX_NAME = '[MAX_NAME]';\n/**\n * Compares valid Firebase key names, plus min and max name\n */\n\nconst nameCompare = function (a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n          bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n/**\n * @returns {!number} comparison result.\n */\n\n\nconst stringCompare = function (a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nconst requireKey = function (key, obj) {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\n  }\n};\n\nconst ObjectToUniqueKey = function (obj) {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = []; // eslint-disable-next-line guard-for-in\n\n  for (const k in obj) {\n    keys.push(k);\n  } // Export as json, but with the keys sorted.\n\n\n  keys.sort();\n  let key = '{';\n\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\n\n\nconst splitStringBySize = function (str, segsize) {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n\n  return dataSegs;\n};\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\n\n\nfunction each(obj, fn) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\n\n\nconst doubleToIEEE754String = function (v) {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n        fbits = 52;\n  const bias = (1 << ebits - 1) - 1;\n  let s, e, f, ln, i; // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  } // Pack sign, exponent, fraction\n\n\n  const bits = [];\n\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join(''); // Return the data as a hex string. --MJL\n\n  let hexByteString = '';\n\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n\n    hexByteString = hexByteString + hexByte;\n  }\n\n  return hexByteString.toLowerCase();\n};\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\n\n\nconst isChromeExtensionContentScript = function () {\n  return !!(typeof window === 'object' && window['chrome'] && window['chrome']['extension'] && !/^chrome/.test(window.location.href));\n};\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\n\n\nconst isWindowsStoreApp = function () {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n/**\n * Converts a server error code to a Javascript Error\n */\n\n\nfunction errorForServerCode(code, query) {\n  let reason = 'Unknown Error';\n\n  if (code === 'too_big') {\n    reason = 'The data requested exceeds the maximum size ' + 'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  error.code = code.toUpperCase();\n  return error;\n}\n/**\n * Used to test for integer-looking strings\n */\n\n\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\n\nconst INTEGER_32_MIN = -2147483648;\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\n\nconst INTEGER_32_MAX = 2147483647;\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\n\nconst tryParseInt = function (str) {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n\n  return null;\n};\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\n\n\nconst exceptionGuard = function (fn) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\n\n\nconst beingCrawled = function () {\n  const userAgent = typeof window === 'object' && window['navigator'] && window['navigator']['userAgent'] || ''; // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n\n  return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0;\n};\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\n\n\nconst setTimeoutNonBlocking = function (fn, time) {\n  const timeout = setTimeout(fn, time); // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n\n  if (typeof timeout === 'number' && // @ts-ignore Is only defined in Deno environments.\n  typeof Deno !== 'undefined' && // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n  Deno['unrefTimer']) {\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno.unrefTimer(timeout); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } else if (typeof timeout === 'object' && timeout['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    timeout['unref']();\n  }\n\n  return timeout;\n};\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\n\n\nclass AppCheckTokenProvider {\n  constructor(appName_, appCheckProvider) {\n    this.appName_ = appName_;\n    this.appCheckProvider = appCheckProvider;\n    this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({\n      optional: true\n    });\n\n    if (!this.appCheck) {\n      appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => this.appCheck = appCheck);\n    }\n  }\n\n  getToken(forceRefresh) {\n    if (!this.appCheck) {\n      return new Promise((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener) {\n    var _a;\n\n    (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken() {\n    warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` + 'are invalid. This usually indicates your app was not initialized correctly.');\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\n\n\nclass FirebaseAuthTokenProvider {\n  constructor(appName_, firebaseOptions_, authProvider_) {\n    this.appName_ = appName_;\n    this.firebaseOptions_ = firebaseOptions_;\n    this.authProvider_ = authProvider_;\n    this.auth_ = null;\n    this.auth_ = authProvider_.getImmediate({\n      optional: true\n    });\n\n    if (!this.auth_) {\n      authProvider_.onInit(auth => this.auth_ = auth);\n    }\n  }\n\n  getToken(forceRefresh) {\n    if (!this.auth_) {\n      return new Promise((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener) {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_.get().then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener) {\n    this.authProvider_.get().then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken() {\n    let errorMessage = 'Provided authentication credentials for the app named \"' + this.appName_ + '\" are invalid. This usually indicates your app was not ' + 'initialized correctly. ';\n\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage += 'Make sure the \"credential\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage += 'Make sure the \"serviceAccount\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else {\n      errorMessage += 'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' + 'initializeApp() match the values provided for your app at ' + 'https://console.firebase.google.com/.';\n    }\n\n    warn(errorMessage);\n  }\n\n}\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\n\n\nclass EmulatorTokenProvider {\n  constructor(accessToken) {\n    this.accessToken = accessToken;\n  }\n\n  getToken(forceRefresh) {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener) {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener) {}\n\n  notifyForInvalidToken() {}\n\n}\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n\n\nEmulatorTokenProvider.OWNER = 'owner';\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst PROTOCOL_VERSION = '5';\nconst VERSION_PARAM = 'v';\nconst TRANSPORT_SESSION_PARAM = 's';\nconst REFERER_PARAM = 'r';\nconst FORGE_REF = 'f'; // Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\n\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\nconst LAST_SESSION_PARAM = 'ls';\nconst APPLICATION_ID_PARAM = 'p';\nconst APP_CHECK_TOKEN_PARAM = 'ac';\nconst WEBSOCKET = 'websocket';\nconst LONG_POLLING = 'long_polling';\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A class that holds metadata about a Repo object\n */\n\nclass RepoInfo {\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false) {\n    this.secure = secure;\n    this.namespace = namespace;\n    this.webSocketOnly = webSocketOnly;\n    this.nodeAdmin = nodeAdmin;\n    this.persistenceKey = persistenceKey;\n    this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost = PersistentStorage.get('host:' + host) || this._host;\n  }\n\n  isCacheableHost() {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return this._domain !== 'firebaseio.com' && this._domain !== 'firebaseio-demo.com';\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString() {\n    let str = this.toURLString();\n\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n\n    return str;\n  }\n\n  toURLString() {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams ? `?ns=${this.namespace}` : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo) {\n  return repoInfo.host !== repoInfo.internalHost || repoInfo.isCustomHost() || repoInfo.includeNamespaceInQueryParams;\n}\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\n\n\nfunction repoInfoConnectionURL(repoInfo, type, params) {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n  let connURL;\n\n  if (type === WEBSOCKET) {\n    connURL = (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL = (repoInfo.secure ? 'https://' : 'http://') + repoInfo.internalHost + '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs = [];\n  each(params, (key, value) => {\n    pairs.push(key + '=' + value);\n  });\n  return connURL + pairs.join('&');\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Tracks a collection of stats.\n */\n\n\nclass StatsCollection {\n  constructor() {\n    this.counters_ = {};\n  }\n\n  incrementCounter(name, amount = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst collections = {};\nconst reporters = {};\n\nfunction statsManagerGetCollection(repoInfo) {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString];\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\n\n\nclass PacketReceiver {\n  /**\n   * @param onMessage_\n   */\n  constructor(onMessage_) {\n    this.onMessage_ = onMessage_;\n    this.pendingResponses = [];\n    this.currentResponseNum = 0;\n    this.closeAfterResponse = -1;\n    this.onClose = null;\n  }\n\n  closeAfter(responseNum, callback) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n\n\n  handleResponse(requestNum, data) {\n    this.pendingResponses[requestNum] = data;\n\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[this.currentResponseNum];\n      delete this.pendingResponses[this.currentResponseNum];\n\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n\n        break;\n      }\n\n      this.currentResponseNum++;\n    }\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// URL query parameters associated with longpolling\n\n\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe'; //Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\n\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\n\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\n\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\n\nconst LP_CONNECT_TIMEOUT = 30000;\n/**\n * This class manages a single long-polling connection.\n */\n\nclass BrowserPollConnection {\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.repoInfo = repoInfo;\n    this.applicationId = applicationId;\n    this.appCheckToken = appCheckToken;\n    this.authToken = authToken;\n    this.transportSessionId = transportSessionId;\n    this.lastSessionId = lastSessionId;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.everConnected_ = false;\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n\n    this.urlFn = params => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n\n\n  open(onMessage, onDisconnect) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.'); // Make sure we clear the host cache\n\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)); // Ensure we delay the creation of the iframe until the DOM is loaded.\n\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      } //Set up a callback that gets triggered once a connection is set up.\n\n\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\n        const [command, arg1, arg2, arg3, arg4] = args;\n        this.incrementIncomingBytes_(args);\n\n        if (!this.scriptTagHolder) {\n          return; // we closed the connection.\n        }\n\n        if (this.connectTimeoutTimer_) {\n          clearTimeout(this.connectTimeoutTimer_);\n          this.connectTimeoutTimer_ = null;\n        }\n\n        this.everConnected_ = true;\n\n        if (command === FIREBASE_LONGPOLL_START_PARAM) {\n          this.id = arg1;\n          this.password = arg2;\n        } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n          // Don't clear the host cache. We got a response from the server, so we know it's reachable\n          if (arg1) {\n            // We aren't expecting any more data (other than what the server's already in the process of sending us\n            // through our already open polls), so don't send any more.\n            this.scriptTagHolder.sendNewPolls = false; // arg1 in this case is the last response number sent by the server. We should try to receive\n            // all of the responses up to this one before closing\n\n            this.myPacketOrderer.closeAfter(arg1, () => {\n              this.onClosed_();\n            });\n          } else {\n            this.onClosed_();\n          }\n        } else {\n          throw new Error('Unrecognized command received: ' + command);\n        }\n      }, (...args) => {\n        const [pN, data] = args;\n        this.incrementIncomingBytes_(args);\n        this.myPacketOrderer.handleResponse(pN, data);\n      }, () => {\n        this.onClosed_();\n      }, this.urlFn); //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n\n      const urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\n\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n\n      if (typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n\n\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n\n\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n\n\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  } // Static method, use string literal so it can be accessed in a generic way\n\n\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return !BrowserPollConnection.forceDisallow_ && typeof document !== 'undefined' && document.createElement != null && !isChromeExtensionContentScript() && !isWindowsStoreApp();\n    }\n  }\n  /**\n   * No-op for polling\n   */\n\n\n  markConnectionHealthy() {}\n  /**\n   * Stops polling and cleans up the iframe\n   */\n\n\n  shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    } //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n\n\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n  /**\n   * Triggered when this transport is closed\n   */\n\n\n  onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n\n\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n\n\n  send(data) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length); //first, lets get the base64-encoded data\n\n    const base64data = base64Encode(dataStr); //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE); //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\n      this.curSegmentNum++;\n    }\n  }\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n\n\n  addDisconnectPingFrame(id, pw) {\n    if (isNodeSdk()) {\n      return;\n    }\n\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n    document.body.appendChild(this.myDisconnFrame);\n  }\n  /**\n   * Used to track the bytes received by this client\n   */\n\n\n  incrementIncomingBytes_(args) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n\n}\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\n\n\nclass FirebaseIFrameScriptHolder {\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\n    this.onDisconnect = onDisconnect;\n    this.urlFn = urlFn; //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n    //problems in some browsers.\n\n    this.outstandingRequests = new Set(); //A queue of the pending segments waiting for transmission to the server.\n\n    this.pendingSegs = []; //A serial number. We use this for two things:\n    // 1) A way to ensure the browser doesn't cache responses to polls\n    // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n    //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n    //    JSONP code in the order it was added to the iframe.\n\n    this.currentSerial = Math.floor(Math.random() * 100000000); // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n    // incoming data from the server that we're waiting for).\n\n    this.sendNewPolls = true;\n\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB; //Create an iframe for us to add script tags to.\n\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_(); // Set the iframe's contents.\n\n      let script = ''; // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n\n      if (this.myIFrame.src && this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n\n      const iframeContents = '<html><body>' + script + '</body></html>';\n\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n\n        if (e.stack) {\n          log(e.stack);\n        }\n\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n\n\n  static createIFrame_() {\n    const iframe = document.createElement('iframe');\n    iframe.style.display = 'none'; // This is necessary in order to initialize the document inside the iframe\n\n    if (document.body) {\n      document.body.appendChild(iframe);\n\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src = \"javascript:void((function(){document.open();document.domain='\" + domain + \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    } // Get the document of the iframe in a browser-specific way.\n\n\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (iframe.document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = iframe.document; //others?\n    }\n\n    return iframe;\n  }\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n\n\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    } // Protect from being called recursively.\n\n\n    const onDisconnect = this.onDisconnect;\n\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n\n\n  startLongPoll(id, pw) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true; //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n\n    while (this.newRequest_()) {}\n  }\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n\n\n  newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (this.alive && this.sendNewPolls && this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams); //Now add as much data as we can.\n\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n\n        if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <= MAX_URL_DATA_SIZE) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString = curDataString + '&' + FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM + i + '=' + theSeg.seg + '&' + FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET + i + '=' + theSeg.ts + '&' + FIREBASE_LONGPOLL_DATA_PARAM + i + '=' + theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n\n\n  enqueueSegment(segnum, totalsegs, data) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({\n      seg: segnum,\n      ts: totalsegs,\n      d: data\n    }); //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n\n\n  addLongPollTag_(url, serial) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    }; // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n\n\n    const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout); // Trigger a new request so we can continue receiving data.\n\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n\n\n  addTag(url, loadCB) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n          newScript.onload = newScript.onreadystatechange = function () {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const rstate = newScript.readyState;\n\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              newScript.onload = newScript.onreadystatechange = null;\n\n              if (newScript.parentNode) {\n                newScript.parentNode.removeChild(newScript);\n              }\n\n              loadCB();\n            }\n          };\n\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {// TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\nlet WebSocketImpl = null;\n\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n/**\n * Create a new websocket connection with the given callbacks.\n */\n\n\nclass WebSocketConnection {\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.applicationId = applicationId;\n    this.appCheckToken = appCheckToken;\n    this.authToken = authToken;\n    this.keepaliveTimer = null;\n    this.frames = null;\n    this.totalFrames = 0;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n\n\n  static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {\n    const urlParams = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (!isNodeSdk() && typeof location !== 'undefined' && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n\n    if (applicationId) {\n      urlParams[APPLICATION_ID_PARAM] = applicationId;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n\n\n  open(onMessage, onDisconnect) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n    this.log_('Websocket connecting to ' + this.connURL);\n    this.everConnected_ = false; // Assume failure until proven otherwise.\n\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      let options;\n\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node'; // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n\n        options = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        }; // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        } // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n\n\n        const env = process['env'];\n        const proxy = this.connURL.indexOf('wss://') === 0 ? env['HTTPS_PROXY'] || env['https_proxy'] : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = {\n            origin: proxy\n          };\n        }\n      }\n\n      this.mySock = new WebSocketImpl(this.connURL, [], options);\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n\n      if (error) {\n        this.log_(error);\n      }\n\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m);\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.'); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      const error = e.message || e.data;\n\n      if (error) {\n        this.log_(error);\n      }\n\n      this.onClosed_();\n    };\n  }\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n\n\n  start() {}\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable() {\n    let isOldAndroid = false;\n\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return !isOldAndroid && WebSocketImpl !== null && !WebSocketConnection.forceDisallow_;\n  }\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n\n\n  static previouslyFailed() {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return PersistentStorage.isInMemoryStorage || PersistentStorage.get('previous_websocket_failure') === true;\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  appendFrame_(data) {\n    this.frames.push(data);\n\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess); //handle the message\n\n      this.onMessage(jsonMess);\n    }\n  }\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n\n\n  handleNewFrameCount_(frameCount) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n\n\n  extractFrameCount_(data) {\n    assert(this.frames === null, 'We already have a frame buffer'); // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n\n\n  handleIncomingFrame(mess) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n\n    const data = mess['data'];\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n\n\n  send(data) {\n    this.resetKeepAlive();\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length); //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE); //Send the length header\n\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    } //Send the actual data in segments.\n\n\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_(); // since this is an internal close, trigger the close listener\n\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n\n\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n\n\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n\n      this.resetKeepAlive(); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\n  }\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n\n\n  sendString_(str) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n\n}\n/**\n * Number of response before we consider the connection \"healthy.\"\n */\n\n\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\n/**\n * Time to wait for the connection te become healthy before giving up.\n */\n\nWebSocketConnection.healthyTimeout = 30000;\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\n\nclass TransportManager {\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n  /**\n   * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\n   * TransportManager has already set up transports_\n   */\n\n\n  static get IS_TRANSPORT_INITIALIZED() {\n    return this.globalTransportInitialized_;\n  }\n\n  initTransports_(repoInfo) {\n    const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = this.transports_ = [];\n\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n\n      TransportManager.globalTransportInitialized_ = true;\n    }\n  }\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n\n\n  initialTransport() {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n\n\n  upgradeTransport() {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n\n} // Keeps track of whether the TransportManager has already chosen a transport to use\n\n\nTransportManager.globalTransportInitialized_ = false;\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Abort upgrade attempt if it takes longer than 60s.\n\nconst UPGRADE_TIMEOUT = 60000; // For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\n\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000; // If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\n\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\nconst SERVER_HELLO = 'h';\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\n\nclass Connection {\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\n    this.id = id;\n    this.repoInfo_ = repoInfo_;\n    this.applicationId_ = applicationId_;\n    this.appCheckToken_ = appCheckToken_;\n    this.authToken_ = authToken_;\n    this.onMessage_ = onMessage_;\n    this.onReady_ = onReady_;\n    this.onDisconnect_ = onDisconnect_;\n    this.onKill_ = onKill_;\n    this.lastSessionId = lastSessionId;\n    this.connectionCount = 0;\n    this.pendingDataMessages = [];\n    this.state_ = 0\n    /* CONNECTING */\n    ;\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n  /**\n   * Starts a connection attempt\n   */\n\n\n  start_() {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId); // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n\n        if (!this.isHealthy_) {\n          if (this.conn_ && this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\n            this.log_('Connection exceeded healthy timeout but has received ' + this.conn_.bytesReceived + ' bytes.  Marking connection healthy.');\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (this.conn_ && this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\n            this.log_('Connection exceeded healthy timeout but has sent ' + this.conn_.bytesSent + ' bytes.  Leaving connection alive.'); // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      }, Math.floor(healthyTimeoutMS));\n    }\n  }\n\n  nextTransportId_() {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  connReceiver_(conn) {\n    return message => {\n      if (this.state_ !== 2\n      /* DISCONNECTED */\n      ) {\n          if (conn === this.rx_) {\n            this.onPrimaryMessageReceived_(message);\n          } else if (conn === this.secondaryConn_) {\n            this.onSecondaryMessageReceived_(message);\n          } else {\n            this.log_('message on old connection');\n          }\n        }\n    };\n  }\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n\n\n  sendRequest(dataMsg) {\n    // wrap in a data message envelope and send it on\n    const msg = {\n      t: 'd',\n      d: dataMsg\n    };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null; // the server will shutdown the old connection\n    }\n  }\n\n  onSecondaryControl_(controlData) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE];\n\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close(); // If we were already using this connection for something, than we need to fully close\n\n        if (this.tx_ === this.secondaryConn_ || this.rx_ === this.secondaryConn_) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  onSecondaryMessageReceived_(parsedData) {\n    const layer = requireKey('t', parsedData);\n    const data = requireKey('d', parsedData);\n\n    if (layer === 'c') {\n      this.onSecondaryControl_(data);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  }\n\n  proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start(); // send ack\n\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({\n      t: 'c',\n      d: {\n        t: SWITCH_ACK,\n        d: {}\n      }\n    }); // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n\n    this.log_('Ending transmission on primary');\n    this.conn_.send({\n      t: 'c',\n      d: {\n        t: END_TRANSMISSION,\n        d: {}\n      }\n    });\n    this.tx_ = this.secondaryConn_;\n    this.tryCleanupConnection();\n  }\n\n  onPrimaryMessageReceived_(parsedData) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer = requireKey('t', parsedData);\n    const data = requireKey('d', parsedData);\n\n    if (layer === 'c') {\n      this.onControl_(data);\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  onDataMessage_(message) {\n    this.onPrimaryResponse_(); // We don't do anything with data messages, just kick them up a level\n\n    this.onMessage_(message);\n  }\n\n  onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  onControl_(controlData) {\n    const cmd = requireKey(MESSAGE_TYPE, controlData);\n\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(payload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n\n\n  onHandshake_(handshake) {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host; // if we've already closed the connection, then don't bother trying to progress further\n\n    if (this.state_ === 0\n    /* CONNECTING */\n    ) {\n        this.conn_.start();\n        this.onConnectionEstablished_(this.conn_, timestamp);\n\n        if (PROTOCOL_VERSION !== version) {\n          warn('Protocol version mismatch detected');\n        } // TODO: do we want to upgrade? when? maybe a delay?\n\n\n        this.tryStartUpgrade_();\n      }\n  }\n\n  tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  startUpgrade_(conn) {\n    this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId); // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n\n    this.secondaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect); // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  onReset_(host) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host; // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n\n    if (this.state_ === 1\n    /* CONNECTED */\n    ) {\n        this.close();\n      } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  onConnectionEstablished_(conn, timestamp) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = 1\n    /* CONNECTED */\n    ;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    } // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n\n\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === 1\n    /* CONNECTED */\n    ) {\n        this.log_('sending ping on primary.');\n        this.sendData_({\n          t: 'c',\n          d: {\n            t: PING,\n            d: {}\n          }\n        });\n      }\n  }\n\n  onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n\n\n  onConnectionLost_(everConnected) {\n    this.conn_ = null; // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n\n    if (!everConnected && this.state_ === 0\n    /* CONNECTING */\n    ) {\n        this.log_('Realtime connection failed.'); // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n\n        if (this.repoInfo_.isCacheableHost()) {\n          PersistentStorage.remove('host:' + this.repoInfo_.host); // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n\n          this.repoInfo_.internalHost = this.repoInfo_.host;\n        }\n      } else if (this.state_ === 1\n    /* CONNECTED */\n    ) {\n        this.log_('Realtime connection lost.');\n      }\n\n    this.close();\n  }\n\n  onConnectionShutdown_(reason) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    } // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n\n\n    this.onDisconnect_ = null;\n    this.close();\n  }\n\n  sendData_(data) {\n    if (this.state_ !== 1\n    /* CONNECTED */\n    ) {\n        throw 'Connection is not connected';\n      } else {\n      this.tx_.send(data);\n    }\n  }\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n\n\n  close() {\n    if (this.state_ !== 2\n    /* DISCONNECTED */\n    ) {\n        this.log_('Closing realtime connection.');\n        this.state_ = 2\n        /* DISCONNECTED */\n        ;\n        this.closeConnections_();\n\n        if (this.onDisconnect_) {\n          this.onDisconnect_();\n          this.onDisconnect_ = null;\n        }\n      }\n  }\n\n  closeConnections_() {\n    this.log_('Shutting down all connections');\n\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\n\n\nclass ServerActions {\n  put(pathString, data, onComplete, hash) {}\n\n  merge(pathString, data, onComplete, hash) {}\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n\n\n  refreshAuthToken(token) {}\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n\n\n  refreshAppCheckToken(token) {}\n\n  onDisconnectPut(pathString, data, onComplete) {}\n\n  onDisconnectMerge(pathString, data, onComplete) {}\n\n  onDisconnectCancel(pathString, onComplete) {}\n\n  reportStats(stats) {}\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\n\n\nclass EventEmitter {\n  constructor(allowedEvents_) {\n    this.allowedEvents_ = allowedEvents_;\n    this.listeners_ = {};\n    assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\n  }\n  /**\n   * To be called by derived classes to trigger events.\n   */\n\n\n  trigger(eventType, ...varArgs) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType, callback, context) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({\n      callback,\n      context\n    });\n    const eventData = this.getInitialEvent(eventType);\n\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType, callback, context) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n\n    for (let i = 0; i < listeners.length; i++) {\n      if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  validateEventType_(eventType) {\n    assert(this.allowedEvents_.find(et => {\n      return et === eventType;\n    }), 'Unknown event: ' + eventType);\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\n\n\nclass OnlineMonitor extends EventEmitter {\n  constructor() {\n    super(['online']);\n    this.online_ = true; // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n\n    if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined' && !isMobileCordova()) {\n      window.addEventListener('online', () => {\n        if (!this.online_) {\n          this.online_ = true;\n          this.trigger('online', true);\n        }\n      }, false);\n      window.addEventListener('offline', () => {\n        if (this.online_) {\n          this.online_ = false;\n          this.trigger('online', false);\n        }\n      }, false);\n    }\n  }\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  getInitialEvent(eventType) {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline() {\n    return this.online_;\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Maximum key depth. */\n\n\nconst MAX_PATH_DEPTH = 32;\n/** Maximum number of (UTF8) bytes in a Firebase path. */\n\nconst MAX_PATH_LENGTH_BYTES = 768;\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nclass Path {\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString, pieceNum) {\n    if (pieceNum === void 0) {\n      this.pieces_ = pathOrString.split('/'); // Remove empty pieces.\n\n      let copyTo = 0;\n\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n\n      this.pieces_.length = copyTo;\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString;\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString() {\n    let pathString = '';\n\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n\n}\n\nfunction newEmptyPath() {\n  return new Path('');\n}\n\nfunction pathGetFront(path) {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n/**\n * @returns The number of segments in this path\n */\n\n\nfunction pathGetLength(path) {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nfunction pathPopFront(path) {\n  let pieceNum = path.pieceNum_;\n\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n\n  return new Path(path.pieces_, pieceNum);\n}\n\nfunction pathGetBack(path) {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nfunction pathToUrlEncodedString(path) {\n  let pathString = '';\n\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n/**\n * Shallow copy of the parts of the path.\n *\n */\n\n\nfunction pathSlice(path, begin = 0) {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nfunction pathParent(path) {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nfunction pathChild(path, childPathObj) {\n  const pieces = [];\n\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n/**\n * @returns True if there are no segments in this path\n */\n\n\nfunction pathIsEmpty(path) {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n/**\n * @returns The path from outerPath to innerPath\n */\n\n\nfunction newRelativePath(outerPath, innerPath) {\n  const outer = pathGetFront(outerPath),\n        inner = pathGetFront(innerPath);\n\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error('INTERNAL ERROR: innerPath (' + innerPath + ') is not within ' + 'outerPath (' + outerPath + ')');\n  }\n}\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\n\n\nfunction pathCompare(left, right) {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n/**\n * @returns true if paths are the same.\n */\n\n\nfunction pathEquals(path, other) {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * @returns True if this path is a parent of (or the same as) other\n */\n\n\nfunction pathContains(path, other) {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n\n    ++i;\n    ++j;\n  }\n\n  return true;\n}\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\n\n\nclass ValidationPath {\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path, errorPrefix_) {\n    this.errorPrefix_ = errorPrefix_;\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n\n    validationPathCheckValid(this);\n  }\n\n}\n\nfunction validationPathPush(validationPath, child) {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nfunction validationPathPop(validationPath) {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last); // Un-count the previous '/'\n\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath) {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(validationPath.errorPrefix_ + 'has a key path longer than ' + MAX_PATH_LENGTH_BYTES + ' bytes (' + validationPath.byteLength_ + ').');\n  }\n\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(validationPath.errorPrefix_ + 'path specified exceeds the maximum depth that can be written (' + MAX_PATH_DEPTH + ') or object contains a cycle ' + validationPathToErrorString(validationPath));\n  }\n}\n/**\n * String for use in error messages - uses '.' notation for path.\n */\n\n\nfunction validationPathToErrorString(validationPath) {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nclass VisibilityMonitor extends EventEmitter {\n  constructor() {\n    super(['visible']);\n    let hidden;\n    let visibilityChange;\n\n    if (typeof document !== 'undefined' && typeof document.addEventListener !== 'undefined') {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    } // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n\n\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(visibilityChange, () => {\n        const visible = !document[hidden];\n\n        if (visible !== this.visible_) {\n          this.visible_ = visible;\n          this.trigger('visible', visible);\n        }\n      }, false);\n    }\n  }\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  getInitialEvent(eventType) {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\n\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\n\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\n\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill'; // If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\n\nconst INVALID_TOKEN_THRESHOLD = 3;\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\n\nclass PersistentConnection extends ServerActions {\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\n    super();\n    this.repoInfo_ = repoInfo_;\n    this.applicationId_ = applicationId_;\n    this.onDataUpdate_ = onDataUpdate_;\n    this.onConnectStatus_ = onConnectStatus_;\n    this.onServerInfoUpdate_ = onServerInfoUpdate_;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.appCheckTokenProvider_ = appCheckTokenProvider_;\n    this.authOverride_ = authOverride_; // Used for diagnostic logging.\n\n    this.id = PersistentConnection.nextPersistentConnectionId_++;\n    this.log_ = logWrapper('p:' + this.id + ':');\n    this.interruptReasons_ = {};\n    this.listens = new Map();\n    this.outstandingPuts_ = [];\n    this.outstandingGets_ = [];\n    this.outstandingPutCount_ = 0;\n    this.outstandingGetCount_ = 0;\n    this.onDisconnectRequestQueue_ = [];\n    this.connected_ = false;\n    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n    this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n    this.securityDebugCallback_ = null;\n    this.lastSessionId = null;\n    this.establishConnectionTimer_ = null;\n    this.visible_ = false; // Before we get connected, we keep a queue of pending messages to send.\n\n    this.requestCBHash_ = {};\n    this.requestNumber_ = 0;\n    this.realtime_ = null;\n    this.authToken_ = null;\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = false;\n    this.invalidAuthTokenCount_ = 0;\n    this.invalidAppCheckTokenCount_ = 0;\n    this.firstConnection_ = true;\n    this.lastConnectionAttemptTime_ = null;\n    this.lastConnectionEstablishedTime_ = null;\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  sendRequest(action, body, onResponse) {\n    const curReqNum = ++this.requestNumber_;\n    const msg = {\n      r: curReqNum,\n      a: action,\n      b: body\n    };\n    this.log_(stringify(msg));\n    assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\n    this.realtime_.sendRequest(msg);\n\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query) {\n    this.initConnection_();\n    const deferred = new Deferred();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: message => {\n        const payload = message['d'];\n\n        if (message['s'] === 'ok') {\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(query, currentHashFn, tag, onComplete) {\n    this.initConnection_();\n    const queryId = query._queryIdentifier;\n\n    const pathString = query._path.toString();\n\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n\n    assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\n    assert(!this.listens.get(pathString).has(queryId), `listen() called twice for same path/queryId.`);\n    const listenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString).set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  sendGet_(index) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, message => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  sendListen_(listenSpec) {\n    const query = listenSpec.query;\n\n    const pathString = query._path.toString();\n\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req = {\n      /*path*/\n      p: pathString\n    };\n    const action = 'q'; // Only bother to send query if it's non-default.\n\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[\n    /*hash*/\n    'h'] = listenSpec.hashFn();\n    this.sendRequest(action, req, message => {\n      const payload = message[\n      /*data*/\n      'd'];\n      const status = message[\n      /*status*/\n      's']; // print warnings in any case...\n\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n      const currentListenSpec = this.listens.get(pathString) && this.listens.get(pathString).get(queryId); // only trigger actions if the listen hasn't been removed and readded\n\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  static warnOnListenWarnings_(payload, query) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload, 'w');\n\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n\n        const indexPath = query._path.toString();\n\n        warn(`Using an unspecified index. Your data will be downloaded and ` + `filtered on the client. Consider adding ${indexSpec} at ` + `${indexPath} to your security rules for better performance.`);\n      }\n    }\n  }\n\n  refreshAuthToken(token) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  reduceReconnectDelayIfAdminCredential_(credential) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_('Admin auth credential detected.  Reducing max reconnect time.');\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n\n\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData = {\n        cred: token\n      };\n\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n\n      this.sendRequest(authMethod, requestData, res => {\n        const status = res[\n        /*status*/\n        's'];\n        const data = res[\n        /*data*/\n        'd'] || 'error';\n\n        if (this.authToken_ === token) {\n          if (status === 'ok') {\n            this.invalidAuthTokenCount_ = 0;\n          } else {\n            // Triggers reconnect and force refresh for auth token\n            this.onAuthRevoked_(status, data);\n          }\n        }\n      });\n    }\n  }\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n\n\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest('appcheck', {\n        'token': this.appCheckToken_\n      }, res => {\n        const status = res[\n        /*status*/\n        's'];\n        const data = res[\n        /*data*/\n        'd'] || 'error';\n\n        if (status === 'ok') {\n          this.invalidAppCheckTokenCount_ = 0;\n        } else {\n          this.onAppCheckRevoked_(status, data);\n        }\n      });\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  unlisten(query, tag) {\n    const pathString = query._path.toString();\n\n    const queryId = query._queryIdentifier;\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n    assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\n    const listen = this.removeListen_(pathString, queryId);\n\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  sendUnlisten_(pathString, queryId, queryObj, tag) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n    const req = {\n      /*path*/\n      p: pathString\n    };\n    const action = 'n'; // Only bother sending queryId if it's non-default.\n\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(pathString, data, onComplete) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(pathString, data, onComplete) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(pathString, onComplete) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  sendOnDisconnect_(action, pathString, data, onComplete) {\n    const request = {\n      /*path*/\n      p: pathString,\n\n      /*data*/\n      d: data\n    };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, response => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(response[\n          /*status*/\n          's'], response[\n          /* data */\n          'd']);\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(pathString, data, onComplete, hash) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(pathString, data, onComplete, hash) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(action, pathString, data, onComplete, hash) {\n    this.initConnection_();\n    const request = {\n      /*path*/\n      p: pathString,\n\n      /*data*/\n      d: data\n    };\n\n    if (hash !== undefined) {\n      request[\n      /*hash*/\n      'h'] = hash;\n    } // TODO: Only keep track of the most recent put for a given path?\n\n\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  sendPut_(index) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n    this.sendRequest(action, request, message => {\n      this.log_(action + ' response', message);\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--; // Clean up array occasionally.\n\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(message[\n        /*status*/\n        's'], message[\n        /* data */\n        'd']);\n      }\n    });\n  }\n\n  reportStats(stats) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = {\n        /*counters*/\n        c: stats\n      };\n      this.log_('reportStats', request);\n      this.sendRequest(\n      /*stats*/\n      's', request, result => {\n        const status = result[\n        /*status*/\n        's'];\n\n        if (status !== 'ok') {\n          const errorReason = result[\n          /* data */\n          'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  onDataMessage_(message) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'];\n      const onResponse = this.requestCBHash_[reqNum];\n\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[\n        /*body*/\n        'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'], message['b']);\n    }\n  }\n\n  onDataPush_(action, body) {\n    this.log_('handleServerMessage', action, body);\n\n    if (action === 'd') {\n      this.onDataUpdate_(body[\n      /*path*/\n      'p'], body[\n      /*data*/\n      'd'],\n      /*isMerge*/\n      false, body['t']);\n    } else if (action === 'm') {\n      this.onDataUpdate_(body[\n      /*path*/\n      'p'], body[\n      /*data*/\n      'd'],\n      /*isMerge=*/\n      true, body['t']);\n    } else if (action === 'c') {\n      this.onListenRevoked_(body[\n      /*path*/\n      'p'], body[\n      /*query*/\n      'q']);\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(body[\n      /*status code*/\n      's'], body[\n      /* explanation */\n      'd']);\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(body[\n      /*status code*/\n      's'], body[\n      /* explanation */\n      'd']);\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error('Unrecognized action received from server: ' + stringify(action) + '\\nAre you using the latest client?');\n    }\n  }\n\n  onReady_(timestamp, sessionId) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  scheduleConnect_(timeout) {\n    assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    } // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_(); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout));\n  }\n\n  initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  onVisible_(visible) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (visible && !this.visible_ && this.reconnectDelay_ === this.maxReconnectDelay_) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n\n    this.visible_ = visible;\n  }\n\n  onOnline_(online) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null; // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n\n    this.cancelSentTransactions_(); // Clear out the pending requests.\n\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\n\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\n      reconnectDelay = Math.random() * reconnectDelay;\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay); // Adjust reconnect delay for next time.\n\n      this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\n    }\n\n    this.onConnectStatus_(false);\n  }\n\n  async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection = null;\n\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n\n      const sendRequestFn = function (msg) {\n        assert(connection, \"sendRequest call when we're not connected not allowed.\");\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([this.authTokenProvider_.getToken(forceRefresh), this.appCheckTokenProvider_.getToken(forceRefresh)]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect,\n          /* onKill= */\n          reason => {\n            warn(reason + ' (' + this.repoInfo_.toString() + ')');\n            this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n          }, lastSessionId);\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  handleTimestamp_(timestamp) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({\n      serverTimeOffset: delta\n    });\n  }\n\n  cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n\n      if (put &&\n      /*hash*/\n      'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    } // Clean up array occasionally.\n\n\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  onListenRevoked_(pathString, query) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n\n    const listen = this.removeListen_(pathString, queryId);\n\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  removeListen_(pathString, queryId) {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n\n    let listen;\n\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString);\n      listen = map.get(queryId);\n      map.delete(queryId);\n\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n\n    return listen;\n  }\n\n  onAuthRevoked_(statusCode, explanation) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS; // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  onAppCheckRevoked_(statusCode, explanation) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true; // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  onSecurityDebugPacket_(body) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\n      }\n    }\n  }\n\n  restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck(); // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n  /**\n   * Sends client stats for first connection\n   */\n\n\n  sendConnectStats_() {\n    const stats = {};\n    let clientName = 'js';\n\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n\n    this.reportStats(stats);\n  }\n\n  shouldReconnect_() {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n\n}\n\nPersistentConnection.nextPersistentConnectionId_ = 0;\n/**\n * Counter for number of connections created. Mainly used for tagging in the logs\n */\n\nPersistentConnection.nextConnectionId_ = 0;\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass NamedNode {\n  constructor(name, node) {\n    this.name = name;\n    this.node = node;\n  }\n\n  static Wrap(name, node) {\n    return new NamedNode(name, node);\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nclass Index {\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare() {\n    return this.compare.bind(this);\n  }\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n\n\n  indexedValueChanged(oldNode, newNode) {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n\n\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nlet __EMPTY_NODE;\n\nclass KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n\n  compare(a, b) {\n    return nameCompare(a.name, b.name);\n  }\n\n  isDefinedOn(node) {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n\n  indexedValueChanged(oldNode, newNode) {\n    return false; // The key for a node never changes.\n  }\n\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n\n  maxPost() {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue, name) {\n    assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.'); // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n\n\n  toString() {\n    return '.key';\n  }\n\n}\n\nconst KEY_INDEX = new KeyIndex();\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An iterator over an LLRBNode.\n */\n\nclass SortedMapIterator {\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\n    this.isReverse_ = isReverse_;\n    this.resultGenerator_ = resultGenerator_;\n    this.nodeStack_ = [];\n    let cmp = 1;\n\n    while (!node.isEmpty()) {\n      node = node;\n      cmp = startKey ? comparator(node.key, startKey) : 1; // flip the comparison if we're going in reverse\n\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext() {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result;\n\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = {\n        key: node.key,\n        value: node.value\n      };\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext() {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek() {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return {\n        key: node.key,\n        value: node.value\n      };\n    }\n  }\n\n}\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\n\n\nclass LLRBNode {\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(key, value, color, left, right) {\n    this.key = key;\n    this.value = value;\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left = left != null ? left : SortedMap.EMPTY_NODE;\n    this.right = right != null ? right : SortedMap.EMPTY_NODE;\n  }\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n\n\n  copy(key, value, color, left, right) {\n    return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n  }\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n\n\n  count() {\n    return this.left.count() + 1 + this.right.count();\n  }\n  /**\n   * @returns True if the tree is empty.\n   */\n\n\n  isEmpty() {\n    return false;\n  }\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n\n\n  inorderTraversal(action) {\n    return this.left.inorderTraversal(action) || !!action(this.key, this.value) || this.right.inorderTraversal(action);\n  }\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n\n\n  reverseTraversal(action) {\n    return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);\n  }\n  /**\n   * @returns The minimum node in the tree.\n   */\n\n\n  min_() {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return this.left.min_();\n    }\n  }\n  /**\n   * @returns The maximum key in the tree.\n   */\n\n\n  minKey() {\n    return this.min_().key;\n  }\n  /**\n   * @returns The maximum key in the tree.\n   */\n\n\n  maxKey() {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n\n\n  insert(key, value, comparator) {\n    let n = this;\n    const cmp = comparator(key, n.key);\n\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n    }\n\n    return n.fixUp_();\n  }\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n\n\n  removeMin_() {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE;\n    }\n\n    let n = this;\n\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n\n    n = n.copy(null, null, null, n.left.removeMin_(), null);\n    return n.fixUp_();\n  }\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n\n\n  remove(key, comparator) {\n    let n, smallest;\n    n = this;\n\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE;\n        } else {\n          smallest = n.right.min_();\n          n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\n        }\n      }\n\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n\n    return n.fixUp_();\n  }\n  /**\n   * @returns Whether this is a RED node.\n   */\n\n\n  isRed_() {\n    return this.color;\n  }\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n\n\n  fixUp_() {\n    let n = this;\n\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n\n    return n;\n  }\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n\n\n  moveRedLeft_() {\n    let n = this.colorFlip_();\n\n    if (n.right.left.isRed_()) {\n      n = n.copy(null, null, null, null, n.right.rotateRight_());\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n\n    return n;\n  }\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n\n\n  moveRedRight_() {\n    let n = this.colorFlip_();\n\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n\n    return n;\n  }\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n\n\n  rotateLeft_() {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null);\n  }\n  /**\n   * @returns New tree, after rotateRight.\n   */\n\n\n  rotateRight_() {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr);\n  }\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n\n\n  colorFlip_() {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n\n\n  checkMaxDepth_() {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_() {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\n    }\n\n    if (this.right.isRed_()) {\n      throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\n    }\n\n    const blackDepth = this.left.check_();\n\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n\n}\n\nLLRBNode.RED = true;\nLLRBNode.BLACK = false;\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\n\nclass LLRBEmptyNode {\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(key, value, color, left, right) {\n    return this;\n  }\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n\n\n  insert(key, value, comparator) {\n    return new LLRBNode(key, value, null);\n  }\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n\n\n  remove(key, comparator) {\n    return this;\n  }\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n\n\n  count() {\n    return 0;\n  }\n  /**\n   * @returns True if the tree is empty.\n   */\n\n\n  isEmpty() {\n    return true;\n  }\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n\n\n  inorderTraversal(action) {\n    return false;\n  }\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n\n\n  reverseTraversal(action) {\n    return false;\n  }\n\n  minKey() {\n    return null;\n  }\n\n  maxKey() {\n    return null;\n  }\n\n  check_() {\n    return 0;\n  }\n  /**\n   * @returns Whether this node is red.\n   */\n\n\n  isRed_() {\n    return false;\n  }\n\n}\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\n\n\nclass SortedMap {\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\n    this.comparator_ = comparator_;\n    this.root_ = root_;\n  }\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n\n\n  insert(key, value) {\n    return new SortedMap(this.comparator_, this.root_.insert(key, value, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  }\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n\n\n  remove(key) {\n    return new SortedMap(this.comparator_, this.root_.remove(key, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  }\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n\n\n  get(key) {\n    let cmp;\n    let node = this.root_;\n\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n\n\n  getPredecessorKey(key) {\n    let cmp,\n        node = this.root_,\n        rightParent = null;\n\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\n  }\n  /**\n   * @returns True if the map is empty.\n   */\n\n\n  isEmpty() {\n    return this.root_.isEmpty();\n  }\n  /**\n   * @returns The total number of nodes in the map.\n   */\n\n\n  count() {\n    return this.root_.count();\n  }\n  /**\n   * @returns The minimum key in the map.\n   */\n\n\n  minKey() {\n    return this.root_.minKey();\n  }\n  /**\n   * @returns The maximum key in the map.\n   */\n\n\n  maxKey() {\n    return this.root_.maxKey();\n  }\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n\n\n  inorderTraversal(action) {\n    return this.root_.inorderTraversal(action);\n  }\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n\n\n  reverseTraversal(action) {\n    return this.root_.reverseTraversal(action);\n  }\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n\n\n  getIterator(resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\n  }\n\n  getIteratorFrom(key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\n  }\n\n  getReverseIteratorFrom(key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\n  }\n\n  getReverseIterator(resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\n  }\n\n}\n/**\n * Always use the same empty node, to reduce memory.\n */\n\n\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction NAME_ONLY_COMPARATOR(left, right) {\n  return nameCompare(left.name, right.name);\n}\n\nfunction NAME_COMPARATOR(left, right) {\n  return nameCompare(left, right);\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nlet MAX_NODE$2;\n\nfunction setMaxNode$1(val) {\n  MAX_NODE$2 = val;\n}\n\nconst priorityHashText = function (priority) {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n/**\n * Validates that a priority snapshot Node is valid.\n */\n\n\nconst validatePriorityNode = function (priorityNode) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(typeof val === 'string' || typeof val === 'number' || typeof val === 'object' && contains(val, '.sv'), 'Priority must be a string or number.');\n  } else {\n    assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\n  } // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n\n\n  assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\n};\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nlet __childrenNodeConstructor;\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\n\n\nclass LeafNode {\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n    this.value_ = value_;\n    this.priorityNode_ = priorityNode_;\n    this.lazyHash_ = null;\n    assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  static set __childrenNodeConstructor(val) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n  /** @inheritDoc */\n\n\n  isLeafNode() {\n    return true;\n  }\n  /** @inheritDoc */\n\n\n  getPriority() {\n    return this.priorityNode_;\n  }\n  /** @inheritDoc */\n\n\n  updatePriority(newPriorityNode) {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n  /** @inheritDoc */\n\n\n  getImmediateChild(childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  /** @inheritDoc */\n\n\n  getChild(path) {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  hasChild() {\n    return false;\n  }\n  /** @inheritDoc */\n\n\n  getPredecessorChildName(childName, childNode) {\n    return null;\n  }\n  /** @inheritDoc */\n\n\n  updateImmediateChild(childName, newChildNode) {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\n    }\n  }\n  /** @inheritDoc */\n\n\n  updateChild(path, newChildNode) {\n    const front = pathGetFront(path);\n\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n      return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\n    }\n  }\n  /** @inheritDoc */\n\n\n  isEmpty() {\n    return false;\n  }\n  /** @inheritDoc */\n\n\n  numChildren() {\n    return 0;\n  }\n  /** @inheritDoc */\n\n\n  forEachChild(index, action) {\n    return false;\n  }\n\n  val(exportFormat) {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n  /** @inheritDoc */\n\n\n  hash() {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n\n      if (!this.priorityNode_.isEmpty()) {\n        toHash += 'priority:' + priorityHashText(this.priorityNode_.val()) + ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_);\n      } else {\n        toHash += this.value_;\n      }\n\n      this.lazyHash_ = sha1(toHash);\n    }\n\n    return this.lazyHash_;\n  }\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n\n\n  getValue() {\n    return this.value_;\n  }\n\n  compareTo(other) {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other);\n    }\n  }\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n\n\n  compareToLeafNode_(otherLeaf) {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n\n  withIndex() {\n    return this;\n  }\n\n  isIndexed() {\n    return true;\n  }\n\n  equals(other) {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other;\n      return this.value_ === otherLeaf.value_ && this.priorityNode_.equals(otherLeaf.priorityNode_);\n    } else {\n      return false;\n    }\n  }\n\n}\n/**\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n * the same type, the comparison falls back to their value\n */\n\n\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nlet nodeFromJSON$1;\nlet MAX_NODE$1;\n\nfunction setNodeFromJSON(val) {\n  nodeFromJSON$1 = val;\n}\n\nfunction setMaxNode(val) {\n  MAX_NODE$1 = val;\n}\n\nclass PriorityIndex extends Index {\n  compare(a, b) {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  isDefinedOn(node) {\n    return !node.getPriority().isEmpty();\n  }\n\n  indexedValueChanged(oldNode, newNode) {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n\n  maxPost() {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\n  }\n\n  makePost(indexValue, name) {\n    const priorityNode = nodeFromJSON$1(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n\n\n  toString() {\n    return '.priority';\n  }\n\n}\n\nconst PRIORITY_INDEX = new PriorityIndex();\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  constructor(length) {\n    const logBase2 = num => // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parseInt(Math.log(num) / LOG_2, 10);\n\n    const bitMask = bits => parseInt(Array(bits + 1).join('1'), 2);\n\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = length + 1 & mask;\n  }\n\n  nextBitIsOne() {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & 0x1 << this.current_);\n    this.current_--;\n    return result;\n  }\n\n}\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\n\n\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (low, high) {\n    const length = high - low;\n    let namedNode;\n    let key;\n\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt(length / 2, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\n    }\n  };\n\n  const buildFrom12Array = function (base12) {\n    let node = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize, color) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key = keyFn ? keyFn(namedNode) : namedNode;\n      attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\n    };\n\n    const attachPennant = function (pennant) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne(); // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  return new SortedMap(mapSortFn || cmp, root);\n};\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nlet _defaultIndexMap;\n\nconst fallbackObject = {};\n\nclass IndexMap {\n  constructor(indexes_, indexSet_) {\n    this.indexes_ = indexes_;\n    this.indexSet_ = indexSet_;\n  }\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n\n\n  static get Default() {\n    assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\n    _defaultIndexMap = _defaultIndexMap || new IndexMap({\n      '.priority': fallbackObject\n    }, {\n      '.priority': PRIORITY_INDEX\n    });\n    return _defaultIndexMap;\n  }\n\n  get(indexKey) {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition) {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(indexDefinition, existingChildren) {\n    assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n\n    while (next) {\n      sawIndexedValue = sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n\n    let newIndex;\n\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n\n    const indexName = indexDefinition.toString();\n    const newIndexSet = Object.assign({}, this.indexSet_);\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = Object.assign({}, this.indexes_);\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n\n\n  addToIndexes(namedNode, existingChildren) {\n    const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\n      const index = safeGet(this.indexSet_, indexName);\n      assert(index, 'Missing index implementation for ' + indexName);\n\n      if (indexedChildren === fallbackObject) {\n        // Check to see if we need to index everything\n        if (index.isDefinedOn(namedNode.node)) {\n          // We need to build this index\n          const childList = [];\n          const iter = existingChildren.getIterator(NamedNode.Wrap);\n          let next = iter.getNext();\n\n          while (next) {\n            if (next.name !== namedNode.name) {\n              childList.push(next);\n            }\n\n            next = iter.getNext();\n          }\n\n          childList.push(namedNode);\n          return buildChildSet(childList, index.getCompare());\n        } else {\n          // No change, this remains a fallback\n          return fallbackObject;\n        }\n      } else {\n        const existingSnap = existingChildren.get(namedNode.name);\n        let newChildren = indexedChildren;\n\n        if (existingSnap) {\n          newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        }\n\n        return newChildren.insert(namedNode, namedNode.node);\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n\n\n  removeFromIndexes(namedNode, existingChildren) {\n    const newIndexes = map(this.indexes_, indexedChildren => {\n      if (indexedChildren === fallbackObject) {\n        // This is the fallback. Just return it, nothing to do in this case\n        return indexedChildren;\n      } else {\n        const existingSnap = existingChildren.get(namedNode.name);\n\n        if (existingSnap) {\n          return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        } else {\n          // No record of this child\n          return indexedChildren;\n        }\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\n\nlet EMPTY_NODE;\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\n\nclass ChildrenNode {\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(children_, priorityNode_, indexMap_) {\n    this.children_ = children_;\n    this.priorityNode_ = priorityNode_;\n    this.indexMap_ = indexMap_;\n    this.lazyHash_ = null;\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\n    }\n  }\n\n  static get EMPTY_NODE() {\n    return EMPTY_NODE || (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default));\n  }\n  /** @inheritDoc */\n\n\n  isLeafNode() {\n    return false;\n  }\n  /** @inheritDoc */\n\n\n  getPriority() {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n  /** @inheritDoc */\n\n\n  updatePriority(newPriorityNode) {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n  /** @inheritDoc */\n\n\n  getImmediateChild(childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n  /** @inheritDoc */\n\n\n  getChild(path) {\n    const front = pathGetFront(path);\n\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n  /** @inheritDoc */\n\n\n  hasChild(childName) {\n    return this.children_.get(childName) !== null;\n  }\n  /** @inheritDoc */\n\n\n  updateImmediateChild(childName, newChildNode) {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n  /** @inheritDoc */\n\n\n  updateChild(path, newChildNode) {\n    const front = pathGetFront(path);\n\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n      const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n  /** @inheritDoc */\n\n\n  isEmpty() {\n    return this.children_.isEmpty();\n  }\n  /** @inheritDoc */\n\n\n  numChildren() {\n    return this.children_.count();\n  }\n  /** @inheritDoc */\n\n\n  val(exportFormat) {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj = {};\n    let numKeys = 0,\n        maxKey = 0,\n        allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      obj[key] = childNode.val(exportFormat);\n      numKeys++;\n\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array = []; // eslint-disable-next-line guard-for-in\n\n      for (const key in obj) {\n        array[key] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n\n      return obj;\n    }\n  }\n  /** @inheritDoc */\n\n\n  hash() {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n\n      if (!this.getPriority().isEmpty()) {\n        toHash += 'priority:' + priorityHashText(this.getPriority().val()) + ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n\n    return this.lazyHash_;\n  }\n  /** @inheritDoc */\n\n\n  getPredecessorChildName(childName, childNode, index) {\n    const idx = this.resolveIndex_(index);\n\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition) {\n    const minKey = this.getFirstChildName(indexDefinition);\n\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n\n\n  getLastChildName(indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition) {\n    const maxKey = this.getLastChildName(indexDefinition);\n\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n\n  forEachChild(index, action) {\n    const idx = this.resolveIndex_(index);\n\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(indexDefinition) {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(startPost, indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\n      let next = iterator.peek();\n\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n\n      return iterator;\n    }\n  }\n\n  getReverseIterator(indexDefinition) {\n    return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\n  }\n\n  getReverseIteratorFrom(endPost, indexDefinition) {\n    const idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\n      let next = iterator.peek();\n\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n\n      return iterator;\n    }\n  }\n\n  compareTo(other) {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n\n  withIndex(indexDefinition) {\n    if (indexDefinition === KEY_INDEX || this.indexMap_.hasIndex(indexDefinition)) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n\n  isIndexed(index) {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n\n  equals(other) {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other;\n\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (this.children_.count() === otherChildrenNode.children_.count()) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n\n        while (thisCurrent && otherCurrent) {\n          if (thisCurrent.name !== otherCurrent.name || !thisCurrent.node.equals(otherCurrent.node)) {\n            return false;\n          }\n\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n\n\n  resolveIndex_(indexDefinition) {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n\n}\n\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\nclass MaxNode extends ChildrenNode {\n  constructor() {\n    super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\n  }\n\n  compareTo(other) {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other) {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority() {\n    return this;\n  }\n\n  getImmediateChild(childName) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty() {\n    return false;\n  }\n\n}\n/**\n * Marker that will sort higher than any other snapshot.\n */\n\n\nconst MAX_NODE = new MaxNode();\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n/**\n * Reference Extensions\n */\n\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode$1(MAX_NODE);\nsetMaxNode(MAX_NODE);\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst USE_HINZE = true;\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\n\nfunction nodeFromJSON(json, priority = null) {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(priority === null || typeof priority === 'string' || typeof priority === 'number' || typeof priority === 'object' && '.sv' in priority, 'Invalid priority type found: ' + typeof priority);\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  } // Valid leaf nodes include non-objects or server-value wrapper objects\n\n\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n\n        if (!childNode.isEmpty()) {\n          childrenHavePriority = childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\n\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\n      return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({\n        '.priority': sortedChildSet\n      }, {\n        '.priority': PRIORITY_INDEX\n      }));\n    } else {\n      return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\n    }\n  } else {\n    let node = ChildrenNode.EMPTY_NODE;\n    each(json, (key, childData) => {\n      if (contains(json, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass PathIndex extends Index {\n  constructor(indexPath_) {\n    super();\n    this.indexPath_ = indexPath_;\n    assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\n  }\n\n  extractChild(snap) {\n    return snap.getChild(this.indexPath_);\n  }\n\n  isDefinedOn(node) {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n\n  compare(a, b) {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  makePost(indexValue, name) {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\n    return new NamedNode(name, node);\n  }\n\n  maxPost() {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n\n  toString() {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nclass ValueIndex extends Index {\n  compare(a, b) {\n    const indexCmp = a.node.compareTo(b.node);\n\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  isDefinedOn(node) {\n    return true;\n  }\n\n  indexedValueChanged(oldNode, newNode) {\n    return !oldNode.equals(newNode);\n  }\n\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  }\n\n  maxPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MAX;\n  }\n\n  makePost(indexValue, name) {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n\n\n  toString() {\n    return '.value';\n  }\n\n}\n\nconst VALUE_INDEX = new ValueIndex();\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Modeled after base64 web-safe chars, but ordered by ASCII.\n\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\nconst MIN_PUSH_CHAR = '-';\nconst MAX_PUSH_CHAR = 'z';\nconst MAX_KEY_LEN = 786;\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\n\nconst nextPushId = function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0; // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n\n  const lastRandChars = [];\n  return function (now) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n    let i;\n    const timeStampChars = new Array(8);\n\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64); // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n\n      now = Math.floor(now / 64);\n    }\n\n    assert(now === 0, 'Cannot push at time == 0');\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n\n      lastRandChars[i]++;\n    }\n\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n    return id;\n  };\n}();\n\nconst successor = function (key) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n\n  const keyAsInt = tryParseInt(key);\n\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  } // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n\n\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n  return next.slice(0, i + 1).join('');\n}; // `key` is assumed to be non-empty.\n\n\nconst predecessor = function (key) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n\n  const keyAsInt = tryParseInt(key);\n\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  } // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n\n\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n\n    delete next[next.length - 1];\n    return next.join('');\n  } // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n\n\n  next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nfunction changeValue(snapshotNode) {\n  return {\n    type: \"value\"\n    /* VALUE */\n    ,\n    snapshotNode\n  };\n}\n\nfunction changeChildAdded(childName, snapshotNode) {\n  return {\n    type: \"child_added\"\n    /* CHILD_ADDED */\n    ,\n    snapshotNode,\n    childName\n  };\n}\n\nfunction changeChildRemoved(childName, snapshotNode) {\n  return {\n    type: \"child_removed\"\n    /* CHILD_REMOVED */\n    ,\n    snapshotNode,\n    childName\n  };\n}\n\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\n  return {\n    type: \"child_changed\"\n    /* CHILD_CHANGED */\n    ,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nfunction changeChildMoved(childName, snapshotNode) {\n  return {\n    type: \"child_moved\"\n    /* CHILD_MOVED */\n    ,\n    snapshotNode,\n    childName\n  };\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\n\n\nclass IndexedFilter {\n  constructor(index_) {\n    this.index_ = index_;\n  }\n\n  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\n    const oldChild = snap.getImmediateChild(key); // Check if anything actually changed.\n\n    if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\n        } else {\n          assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\n      }\n    }\n\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n\n  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\n          }\n        });\n      }\n\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\n          }\n        });\n      }\n    }\n\n    return newSnap.withIndex(this.index_);\n  }\n\n  updatePriority(oldSnap, newPriority) {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n\n  filtersNodes() {\n    return false;\n  }\n\n  getIndexedFilter() {\n    return this;\n  }\n\n  getIndex() {\n    return this.index_;\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\n\n\nclass RangedFilter {\n  constructor(params) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  getStartPost() {\n    return this.startPost_;\n  }\n\n  getEndPost() {\n    return this.endPost_;\n  }\n\n  matches(node) {\n    return this.index_.compare(this.getStartPost(), node) <= 0 && this.index_.compare(node, this.getEndPost()) <= 0;\n  }\n\n  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n\n    return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n  }\n\n  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n\n    let filtered = newSnap.withIndex(this.index_); // Don't support priorities on queries\n\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n\n  updatePriority(oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  filtersNodes() {\n    return true;\n  }\n\n  getIndexedFilter() {\n    return this.indexedFilter_;\n  }\n\n  getIndex() {\n    return this.index_;\n  }\n\n  static getStartPost_(params) {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  static getEndPost_(params) {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\n\n\nclass LimitedFilter {\n  constructor(params) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n\n  updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_.getIndexedFilter().updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n    } else {\n      return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\n    }\n  }\n\n  updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n    let filtered;\n\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (this.limit_ * 2 < newSnap.numChildren() && newSnap.isIndexed(this.index_)) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_); // anchor to the startPost, endPost, or last element as appropriate\n\n        let iterator;\n\n        if (this.reverse_) {\n          iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\n        } else {\n          iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\n        }\n\n        let count = 0;\n\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n\n          if (this.reverse_) {\n            inRange = this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange = this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_); // Don't support priorities on queries\n\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n\n          cmp = (a, b) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n\n          const inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\n          }\n        }\n      }\n    }\n\n    return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n\n  updatePriority(oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  filtersNodes() {\n    return true;\n  }\n\n  getIndexedFilter() {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n\n  getIndex() {\n    return this.index_;\n  }\n\n  fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n\n      cmp = (a, b) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n\n    const oldEventCache = snap;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_ ? oldEventCache.getFirstChild(this.index_) : oldEventCache.getLastChild(this.index_);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\n\n      while (nextChild != null && (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\n      }\n\n      const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\n\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\n        }\n\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\n        }\n\n        const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\n        const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\n\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\n          }\n\n          return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\n          changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\n        }\n\n        return oldEventCache.updateImmediateChild(childKey, childSnap).updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\n\n\nclass QueryParams {\n  constructor() {\n    this.limitSet_ = false;\n    this.startSet_ = false;\n    this.startNameSet_ = false;\n    this.startAfterSet_ = false;\n    this.endSet_ = false;\n    this.endNameSet_ = false;\n    this.endBeforeSet_ = false;\n    this.limit_ = 0;\n    this.viewFrom_ = '';\n    this.indexStartValue_ = null;\n    this.indexStartName_ = '';\n    this.indexEndValue_ = null;\n    this.indexEndName_ = '';\n    this.index_ = PRIORITY_INDEX;\n  }\n\n  hasStart() {\n    return this.startSet_;\n  }\n\n  hasStartAfter() {\n    return this.startAfterSet_;\n  }\n\n  hasEndBefore() {\n    return this.endBeforeSet_;\n  }\n  /**\n   * @returns True if it would return from left.\n   */\n\n\n  isViewFromLeft() {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === \"l\"\n      /* VIEW_FROM_LEFT */\n      ;\n    }\n  }\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n\n\n  getIndexStartValue() {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n\n\n  getIndexStartName() {\n    assert(this.startSet_, 'Only valid if start has been set');\n\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd() {\n    return this.endSet_;\n  }\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n\n\n  getIndexEndValue() {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n\n\n  getIndexEndName() {\n    assert(this.endSet_, 'Only valid if end has been set');\n\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit() {\n    return this.limitSet_;\n  }\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n\n\n  hasAnchoredLimit() {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n\n\n  getLimit() {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex() {\n    return this.index_;\n  }\n\n  loadsAllData() {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault() {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy() {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n\n}\n\nfunction queryParamsGetNodeFilter(queryParams) {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = \"l\"\n  /* VIEW_FROM_LEFT */\n  ;\n  return newParams;\n}\n\nfunction queryParamsLimitToLast(queryParams, newLimit) {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = \"r\"\n  /* VIEW_FROM_RIGHT */\n  ;\n  return newParams;\n}\n\nfunction queryParamsStartAt(queryParams, indexValue, key) {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n\n  newParams.indexStartValue_ = indexValue;\n\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n\n  return newParams;\n}\n\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\n  let params;\n\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = successor(indexValue);\n    }\n\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    let childKey;\n\n    if (key == null) {\n      childKey = MAX_NAME;\n    } else {\n      childKey = successor(key);\n    }\n\n    params = queryParamsStartAt(queryParams, indexValue, childKey);\n  }\n\n  params.startAfterSet_ = true;\n  return params;\n}\n\nfunction queryParamsEndAt(queryParams, indexValue, key) {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n\n  newParams.indexEndValue_ = indexValue;\n\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n\n  return newParams;\n}\n\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\n  let childKey;\n  let params;\n\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = predecessor(indexValue);\n    }\n\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    if (key == null) {\n      childKey = MIN_NAME;\n    } else {\n      childKey = predecessor(key);\n    }\n\n    params = queryParamsEndAt(queryParams, indexValue, childKey);\n  }\n\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nfunction queryParamsOrderBy(queryParams, index) {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\n\n\nfunction queryParamsToRestQueryStringParameters(queryParams) {\n  const qs = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = \"$priority\"\n    /* PRIORITY_INDEX */\n    ;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = \"$value\"\n    /* VALUE_INDEX */\n    ;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = \"$key\"\n    /* KEY_INDEX */\n    ;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n\n  qs[\"orderBy\"\n  /* ORDER_BY */\n  ] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    qs[\"startAt\"\n    /* START_AT */\n    ] = stringify(queryParams.indexStartValue_);\n\n    if (queryParams.startNameSet_) {\n      qs[\"startAt\"\n      /* START_AT */\n      ] += ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    qs[\"endAt\"\n    /* END_AT */\n    ] = stringify(queryParams.indexEndValue_);\n\n    if (queryParams.endNameSet_) {\n      qs[\"endAt\"\n      /* END_AT */\n      ] += ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[\"limitToFirst\"\n      /* LIMIT_TO_FIRST */\n      ] = queryParams.limit_;\n    } else {\n      qs[\"limitToLast\"\n      /* LIMIT_TO_LAST */\n      ] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nfunction queryParamsGetQueryObject(queryParams) {\n  const obj = {};\n\n  if (queryParams.startSet_) {\n    obj[\"sp\"\n    /* INDEX_START_VALUE */\n    ] = queryParams.indexStartValue_;\n\n    if (queryParams.startNameSet_) {\n      obj[\"sn\"\n      /* INDEX_START_NAME */\n      ] = queryParams.indexStartName_;\n    }\n  }\n\n  if (queryParams.endSet_) {\n    obj[\"ep\"\n    /* INDEX_END_VALUE */\n    ] = queryParams.indexEndValue_;\n\n    if (queryParams.endNameSet_) {\n      obj[\"en\"\n      /* INDEX_END_NAME */\n      ] = queryParams.indexEndName_;\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    obj[\"l\"\n    /* LIMIT */\n    ] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = \"l\"\n        /* VIEW_FROM_LEFT */\n        ;\n      } else {\n        viewFrom = \"r\"\n        /* VIEW_FROM_RIGHT */\n        ;\n      }\n    }\n\n    obj[\"vf\"\n    /* VIEW_FROM */\n    ] = viewFrom;\n  } // For now, priority index is the default, so we only specify if it's some other index\n\n\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[\"i\"\n    /* INDEX */\n    ] = queryParams.index_.toString();\n  }\n\n  return obj;\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\n\n\nclass ReadonlyRestClient extends ServerActions {\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\n    super();\n    this.repoInfo_ = repoInfo_;\n    this.onDataUpdate_ = onDataUpdate_;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.appCheckTokenProvider_ = appCheckTokenProvider_;\n    /** @private {function(...[*])} */\n\n    this.log_ = logWrapper('p:rest:');\n    /**\n     * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n     * that's been removed. :-/\n     */\n\n    this.listens_ = {};\n  }\n\n  reportStats(stats) {\n    throw new Error('Method not implemented.');\n  }\n\n  static getListenId_(query, tag) {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\n      return query._path.toString();\n    }\n  }\n  /** @inheritDoc */\n\n\n  listen(query, currentHashFn, tag, onComplete) {\n    const pathString = query._path.toString();\n\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier); // Mark this listener so we can tell if it's removed.\n\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n    const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n    this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\n      let data = result;\n\n      if (error === 404) {\n        data = null;\n        error = null;\n      }\n\n      if (error === null) {\n        this.onDataUpdate_(pathString, data,\n        /*isMerge=*/\n        false, tag);\n      }\n\n      if (safeGet(this.listens_, listenId) === thisListen) {\n        let status;\n\n        if (!error) {\n          status = 'ok';\n        } else if (error === 401) {\n          status = 'permission_denied';\n        } else {\n          status = 'rest_error:' + error;\n        }\n\n        onComplete(status, null);\n      }\n    });\n  }\n  /** @inheritDoc */\n\n\n  unlisten(query, tag) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query) {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred();\n    this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\n      let data = result;\n\n      if (error === 404) {\n        data = null;\n        error = null;\n      }\n\n      if (error === null) {\n        this.onDataUpdate_(pathString, data,\n        /*isMerge=*/\n        false,\n        /*tag=*/\n        null);\n        deferred.resolve(data);\n      } else {\n        deferred.reject(new Error(data));\n      }\n    });\n    return deferred.promise;\n  }\n  /** @inheritDoc */\n\n\n  refreshAuthToken(token) {// no-op since we just always call getToken.\n  }\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n\n\n  restRequest_(pathString, queryStringParameters = {}, callback) {\n    queryStringParameters['format'] = 'export';\n    return Promise.all([this.authTokenProvider_.getToken(\n    /*forceRefresh=*/\n    false), this.appCheckTokenProvider_.getToken(\n    /*forceRefresh=*/\n    false)]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url = (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host + pathString + '?' + 'ns=' + this.repoInfo_.namespace + querystring(queryStringParameters);\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\n          let res = null;\n\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn('Failed to parse JSON response for ' + url + ': ' + xhr.responseText);\n            }\n\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn('Got unsuccessful REST response for ' + url + ' Status: ' + xhr.status);\n            }\n\n            callback(xhr.status);\n          }\n\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url,\n      /*asynchronous=*/\n      true);\n      xhr.send();\n    });\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\n\n\nclass SnapshotHolder {\n  constructor() {\n    this.rootNode_ = ChildrenNode.EMPTY_NODE;\n  }\n\n  getNode(path) {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path, newSnapshotNode) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nfunction newSparseSnapshotTree() {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\n\n\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\n\n\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\n\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\n\n\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\n\n\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\n\n\nclass StatsListener {\n  constructor(collection_) {\n    this.collection_ = collection_;\n    this.last_ = null;\n  }\n\n  get() {\n    const newStats = this.collection_.get();\n    const delta = Object.assign({}, newStats);\n\n    if (this.last_) {\n      each(this.last_, (stat, value) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n\n    this.last_ = newStats;\n    return delta;\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\n\n\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000; // We'll continue to report stats on average every 5 minutes.\n\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nclass StatsReporter {\n  constructor(collection, server_) {\n    this.server_ = server_;\n    this.statsToReport_ = {};\n    this.statsListener_ = new StatsListener(collection);\n    const timeout = FIRST_STATS_MIN_TIME + (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats = {};\n    let haveStatsToReport = false;\n    each(stats, (stat, value) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    } // queue our next run.\n\n\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n *\n * @enum\n */\n\n\nvar OperationType;\n\n(function (OperationType) {\n  OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\n  OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\n  OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\n  OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\n})(OperationType || (OperationType = {}));\n\nfunction newOperationSourceUser() {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nfunction newOperationSourceServer() {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nfunction newOperationSourceServerTaggedQuery(queryId) {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nclass AckUserWrite {\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n  /** @inheritDoc */\n  path,\n  /** @inheritDoc */\n  affectedTree,\n  /** @inheritDoc */\n  revert) {\n    this.path = path;\n    this.affectedTree = affectedTree;\n    this.revert = revert;\n    /** @inheritDoc */\n\n    this.type = OperationType.ACK_USER_WRITE;\n    /** @inheritDoc */\n\n    this.source = newOperationSourceUser();\n  }\n\n  operationForChild(childName) {\n    if (!pathIsEmpty(this.path)) {\n      assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\n      return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\n    } else if (this.affectedTree.value != null) {\n      assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.'); // All child locations are affected as well; just return same operation.\n\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nclass ListenComplete {\n  constructor(source, path) {\n    this.source = source;\n    this.path = path;\n    /** @inheritDoc */\n\n    this.type = OperationType.LISTEN_COMPLETE;\n  }\n\n  operationForChild(childName) {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nclass Overwrite {\n  constructor(source, path, snap) {\n    this.source = source;\n    this.path = path;\n    this.snap = snap;\n    /** @inheritDoc */\n\n    this.type = OperationType.OVERWRITE;\n  }\n\n  operationForChild(childName) {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nclass Merge {\n  constructor(\n  /** @inheritDoc */\n  source,\n  /** @inheritDoc */\n  path,\n  /** @inheritDoc */\n  children) {\n    this.source = source;\n    this.path = path;\n    this.children = children;\n    /** @inheritDoc */\n\n    this.type = OperationType.MERGE;\n  }\n\n  operationForChild(childName) {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n\n  toString() {\n    return 'Operation(' + this.path + ': ' + this.source.toString() + ' merge: ' + this.children.toString() + ')';\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\n\n\nclass CacheNode {\n  constructor(node_, fullyInitialized_, filtered_) {\n    this.node_ = node_;\n    this.fullyInitialized_ = fullyInitialized_;\n    this.filtered_ = filtered_;\n  }\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n\n\n  isFullyInitialized() {\n    return this.fullyInitialized_;\n  }\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n\n\n  isFiltered() {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path) {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key) {\n    return this.isFullyInitialized() && !this.filtered_ || this.node_.hasChild(key);\n  }\n\n  getNode() {\n    return this.node_;\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\n\n\nclass EventGenerator {\n  constructor(query_) {\n    this.query_ = query_;\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n\n}\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\n\n\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\n  const events = [];\n  const moves = [];\n  changes.forEach(change => {\n    if (change.type === \"child_changed\"\n    /* CHILD_CHANGED */\n    && eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\"\n  /* CHILD_REMOVED */\n  , changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\"\n  /* CHILD_ADDED */\n  , changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\"\n  /* CHILD_MOVED */\n  , moves, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\"\n  /* CHILD_CHANGED */\n  , changes, eventRegistrations, eventCache);\n  eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\"\n  /* VALUE */\n  , changes, eventRegistrations, eventCache);\n  return events;\n}\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\n\n\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n  filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(registration.createEvent(materializedChange, eventGenerator.query_));\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nfunction newViewCache(eventCache, serverCache) {\n  return {\n    eventCache,\n    serverCache\n  };\n}\n\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\n  return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\n}\n\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\n  return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\n}\n\nfunction viewCacheGetCompleteEventSnap(viewCache) {\n  return viewCache.eventCache.isFullyInitialized() ? viewCache.eventCache.getNode() : null;\n}\n\nfunction viewCacheGetCompleteServerSnap(viewCache) {\n  return viewCache.serverCache.isFullyInitialized() ? viewCache.serverCache.getNode() : null;\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nlet emptyChildrenSingleton;\n/**\n * Singleton empty children collection.\n *\n */\n\nconst EmptyChildren = () => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap(stringCompare);\n  }\n\n  return emptyChildrenSingleton;\n};\n/**\n * A tree with immutable elements.\n */\n\n\nclass ImmutableTree {\n  constructor(value, children = EmptyChildren()) {\n    this.value = value;\n    this.children = children;\n  }\n\n  static fromObject(obj) {\n    let tree = new ImmutableTree(null);\n    each(obj, (childPath, childSnap) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n  /**\n   * True if the value is empty and there are no children\n   */\n\n\n  isEmpty() {\n    return this.value === null && this.children.isEmpty();\n  }\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n\n\n  findRootMostMatchingPathAndValue(relativePath, predicate) {\n    if (this.value != null && predicate(this.value)) {\n      return {\n        path: newEmptyPath(),\n        value: this.value\n      };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n\n        if (child !== null) {\n          const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\n\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\n            return {\n              path: fullPath,\n              value: childExistingPathAndValue.value\n            };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n\n\n  findRootMostValueAndPath(relativePath) {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n  /**\n   * @returns The subtree at the given path\n   */\n\n\n  subtree(relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree(null);\n      }\n    }\n  }\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n\n\n  set(relativePath, toSet) {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n\n\n  remove(relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n\n\n  get(relativePath) {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n\n\n  setTree(relativePath, newTree) {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n\n\n  fold(fn) {\n    return this.fold_(newEmptyPath(), fn);\n  }\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n\n\n  fold_(pathSoFar, fn) {\n    const accum = {};\n    this.children.inorderTraversal((childKey, childTree) => {\n      accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n    });\n    return fn(pathSoFar, this.value, accum);\n  }\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n\n\n  findOnPath(path, f) {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  findOnPath_(pathToFollow, pathSoFar, f) {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow);\n        const nextChild = this.children.get(front);\n\n        if (nextChild) {\n          return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(path, f) {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  foreachOnPath_(pathToFollow, currentRelativePath, f) {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n\n      if (nextChild) {\n        return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\n      } else {\n        return new ImmutableTree(null);\n      }\n    }\n  }\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n\n\n  foreach(f) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  foreach_(currentRelativePath, f) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f) {\n    this.children.inorderTraversal((childName, childTree) => {\n      if (childTree.value) {\n        f(childName, childTree.value);\n      }\n    });\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\n\n\nclass CompoundWrite {\n  constructor(writeTree_) {\n    this.writeTree_ = writeTree_;\n  }\n\n  static empty() {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n\n}\n\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\n  let newWrite = compoundWrite;\n  each(updates, (childKey, node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\n\n\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\n    return new CompoundWrite(newWriteTree);\n  }\n}\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\n\n\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\n\n\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n\n  if (rootmost != null) {\n    return compoundWrite.writeTree_.get(rootmost.path).getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\n\n\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\n  const children = [];\n  const node = compoundWrite.writeTree_.value;\n\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n        children.push(new NamedNode(childName, childNode));\n      });\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\n      if (childTree.value != null) {\n        children.push(new NamedNode(childName, childTree.value));\n      }\n    });\n  }\n\n  return children;\n}\n\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\n\n\nfunction compoundWriteIsEmpty(compoundWrite) {\n  return compoundWrite.writeTree_.isEmpty();\n}\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\n\n\nfunction compoundWriteApply(compoundWrite, node) {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(relativePath, writeTree, node) {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\n      }\n    }); // If there was a priority write, we only apply it if the node is not empty\n\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\n    }\n\n    return node;\n  }\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\n\n\nfunction writeTreeChildWrites(writeTree, path) {\n  return newWriteTreeRef(path, writeTree);\n}\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\n\n\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\n  assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\n\n  if (visible === undefined) {\n    visible = true;\n  }\n\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\n  }\n\n  writeTree.lastWriteId = writeId;\n}\n/**\n * Record a new merge from user code.\n */\n\n\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\n  assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n  writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\n  writeTree.lastWriteId = writeId;\n}\n\nfunction writeTreeGetWrite(writeTree, writeId) {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n\n  return null;\n}\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\n\n\nfunction writeTreeRemoveWrite(writeTree, writeId) {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n\n    if (currentWrite.visible) {\n      if (i >= idx && writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\n    } else {\n      const children = writeToRemove.children;\n      each(children, childName => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\n      });\n    }\n\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (writeRecord.children.hasOwnProperty(childName) && pathContains(pathChild(writeRecord.path, childName), path)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\n\n\nfunction writeTreeResetTree_(writeTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\n\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId = writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\n\n\nfunction writeTreeDefaultFilter_(write) {\n  return write.visible;\n}\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\n\n\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\n  let compoundWrite = CompoundWrite.empty();\n\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i]; // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath;\n\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\n        } else ;\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\n            }\n          }\n        } else ;\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n\n  return compoundWrite;\n}\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\n\n\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (completeServerCache == null && !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (!includeHiddenWrites && completeServerCache == null && !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\n        return null;\n      } else {\n        const filter = function (write) {\n          return (write.visible || includeHiddenWrites) && (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write.writeId)) && (pathContains(write.path, treePath) || pathContains(treePath, write.path));\n        };\n\n        const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\n\n\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\n  let completeChildren = ChildrenNode.EMPTY_NODE;\n  const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n      });\n    }\n\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\n      completeChildren = completeChildren.updateImmediateChild(childName, node);\n    }); // Add any complete children we have from the set\n\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n    });\n    return completeChildren;\n  }\n}\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\n\n\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\n  assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\n  const path = pathChild(treePath, childPath);\n\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\n    }\n  }\n}\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\n\n\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n      return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\n    } else {\n      return null;\n    }\n  }\n}\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\n\n\nfunction writeTreeShadowingWrite(writeTree, path) {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\n\n\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\n  let toIterate;\n  const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n\n  toIterate = toIterate.withIndex(index);\n\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse ? toIterate.getReverseIteratorFrom(startPost, index) : toIterate.getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n\n      next = iter.getNext();\n    }\n\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nfunction newWriteTree() {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\n\n\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n  return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\n}\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\n\n\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\n  return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\n}\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\n\n\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\n  return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\n}\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\n\n\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\n  return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\n}\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\n\n\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\n  return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\n}\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\n\n\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\n  return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\n}\n/**\n * Return a WriteTreeRef for a child.\n */\n\n\nfunction writeTreeRefChild(writeTreeRef, childName) {\n  return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\n}\n\nfunction newWriteTreeRef(path, writeTree) {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nclass ChildChangeAccumulator {\n  constructor() {\n    this.changeMap = new Map();\n  }\n\n  trackChildChange(change) {\n    const type = change.type;\n    const childKey = change.childName;\n    assert(type === \"child_added\"\n    /* CHILD_ADDED */\n    || type === \"child_changed\"\n    /* CHILD_CHANGED */\n    || type === \"child_removed\"\n    /* CHILD_REMOVED */\n    , 'Only child changes supported for tracking');\n    assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\n    const oldChange = this.changeMap.get(childKey);\n\n    if (oldChange) {\n      const oldType = oldChange.type;\n\n      if (type === \"child_added\"\n      /* CHILD_ADDED */\n      && oldType === \"child_removed\"\n      /* CHILD_REMOVED */\n      ) {\n          this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\n        } else if (type === \"child_removed\"\n      /* CHILD_REMOVED */\n      && oldType === \"child_added\"\n      /* CHILD_ADDED */\n      ) {\n          this.changeMap.delete(childKey);\n        } else if (type === \"child_removed\"\n      /* CHILD_REMOVED */\n      && oldType === \"child_changed\"\n      /* CHILD_CHANGED */\n      ) {\n          this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\n        } else if (type === \"child_changed\"\n      /* CHILD_CHANGED */\n      && oldType === \"child_added\"\n      /* CHILD_ADDED */\n      ) {\n          this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\n        } else if (type === \"child_changed\"\n      /* CHILD_CHANGED */\n      && oldType === \"child_changed\"\n      /* CHILD_CHANGED */\n      ) {\n          this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\n        } else {\n        throw assertionError('Illegal combination of changes: ' + change + ' occurred after ' + oldChange);\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges() {\n    return Array.from(this.changeMap.values());\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\n\n\nclass NoCompleteChildSource_ {\n  getCompleteChild(childKey) {\n    return null;\n  }\n\n  getChildAfterChild(index, child, reverse) {\n    return null;\n  }\n\n}\n/**\n * Singleton instance.\n */\n\n\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\n\nclass WriteTreeCompleteChildSource {\n  constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\n    this.writes_ = writes_;\n    this.viewCache_ = viewCache_;\n    this.optCompleteServerCache_ = optCompleteServerCache_;\n  }\n\n  getCompleteChild(childKey) {\n    const node = this.viewCache_.eventCache;\n\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode = this.optCompleteServerCache_ != null ? new CacheNode(this.optCompleteServerCache_, true, false) : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n\n  getChildAfterChild(index, child, reverse) {\n    const completeServerData = this.optCompleteServerCache_ != null ? this.optCompleteServerCache_ : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\n\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nfunction newViewProcessor(filter) {\n  return {\n    filter\n  };\n}\n\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\n  assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\n  assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\n}\n\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation;\n\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.'); // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n\n      filterServerNode = overwrite.source.tagged || oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path);\n      newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation;\n\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.'); // We filter the node if it's a tagged update or the node has been previously filtered\n\n      filterServerNode = merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation;\n\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return {\n    viewCache: newViewCache,\n    changes\n  };\n}\n\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\n  const eventSnap = newViewCache.eventCache;\n\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n\n    if (accumulator.length > 0 || !oldViewCache.eventCache.isFullyInitialized() || isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap) || !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\n      accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\n  const oldEventSnap = viewCache.eventCache;\n\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\n\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren = serverCache instanceof ChildrenNode ? serverCache : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\n        newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n        newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n\n      if (childKey === '.priority') {\n        assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode(); // we might have overwrites for this priority\n\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\n\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath); // update child\n\n        let newEventChild;\n\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\n\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n        }\n\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n\n    return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode ? viewProcessor.filter : viewProcessor.filter.getIndexedFilter();\n\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap.getNode().updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\n  } else {\n    const childKey = pathGetFront(changePath);\n\n    if (!oldServerSnap.isCompleteForPath(changePath) && pathGetLength(changePath) > 1) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\n    } else {\n      newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\n    }\n  }\n\n  const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\n  const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\n  return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\n}\n\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\n\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\n    newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\n  } else {\n    const childKey = pathGetFront(changePath);\n\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\n      newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n\n        if (childNode != null) {\n          if (pathGetBack(childChangePath) === '.priority' && childNode.getChild(pathParent(childChangePath)).isEmpty()) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n    }\n  });\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n    }\n  });\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (viewCache.serverCache.getNode().isEmpty() && !viewCache.serverCache.isFullyInitialized()) {\n    return viewCache;\n  } // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n\n\n  let curViewCache = viewCache;\n  let viewMergeTree;\n\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\n  }\n\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\n      curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) && childMergeTree.value === null;\n\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\n      curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n    }\n  });\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  } // Only filter server node if it is currently filtered\n\n\n  const filterServerNode = viewCache.serverCache.isFiltered(); // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n\n  const serverCache = viewCache.serverCache;\n\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (pathIsEmpty(ackPath) && serverCache.isFullyInitialized() || serverCache.isCompleteForPath(ackPath)) {\n      return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\n      }\n    });\n    return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n  }\n}\n\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\n  return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\n}\n\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\n  let complete;\n\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\n        newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\n      }\n\n      newNode = newNode;\n      newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n\n      if (newChild == null && viewCache.serverCache.isCompleteForChild(childKey)) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\n      } else {\n        newEventCache = oldEventCache;\n      }\n\n      if (newEventCache.isEmpty() && viewCache.serverCache.isFullyInitialized()) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\n        }\n      }\n    }\n\n    complete = viewCache.serverCache.isFullyInitialized() || writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\n  }\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\n\n\nclass View {\n  constructor(query_, initialViewCache) {\n    this.query_ = query_;\n    this.eventRegistrations_ = [];\n    const params = this.query_._queryParams;\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n    this.processor_ = newViewProcessor(filter);\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache; // Don't filter server node with other filter than index, wait for tagged listen\n\n    const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\n    const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\n    const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\n    const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query() {\n    return this.query_;\n  }\n\n}\n\nfunction viewGetServerCache(view) {\n  return view.viewCache_.serverCache.getNode();\n}\n\nfunction viewGetCompleteNode(view) {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nfunction viewGetCompleteServerCache(view, path) {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (view.query._queryParams.loadsAllData() || !pathIsEmpty(path) && !cache.getImmediateChild(pathGetFront(path)).isEmpty()) {\n      return cache.getChild(path);\n    }\n  }\n\n  return null;\n}\n\nfunction viewIsEmpty(view) {\n  return view.eventRegistrations_.length === 0;\n}\n\nfunction viewAddEventRegistration(view, eventRegistration) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\n\n\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\n  const cancelEvents = [];\n\n  if (cancelError) {\n    assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n\n  return cancelEvents;\n}\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\n\n\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\n  if (operation.type === OperationType.MERGE && operation.source.queryId !== null) {\n    assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\n    assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n  assert(result.viewCache.serverCache.isFullyInitialized() || !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\n  view.viewCache_ = result.viewCache;\n  return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\n}\n\nfunction viewGetInitialEvents(view, registration) {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges = [];\n\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode();\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n\n  return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\n}\n\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\n  const registrations = eventRegistration ? [eventRegistration] : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nlet referenceConstructor$1;\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\n\nclass SyncPoint {\n  constructor() {\n    /**\n     * The Views being tracked at this location in the tree, stored as a map where the key is a\n     * queryId and the value is the View for that query.\n     *\n     * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n     */\n    this.views = new Map();\n  }\n\n}\n\nfunction syncPointSetReferenceConstructor(val) {\n  assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\n  referenceConstructor$1 = val;\n}\n\nfunction syncPointGetReferenceConstructor() {\n  assert(referenceConstructor$1, 'Reference.ts has not been loaded');\n  return referenceConstructor$1;\n}\n\nfunction syncPointIsEmpty(syncPoint) {\n  return syncPoint.views.size === 0;\n}\n\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\n  const queryId = operation.source.queryId;\n\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\n  } else {\n    let events = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\n    }\n\n    return events;\n  }\n}\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\n\n\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\n    let eventCacheComplete = false;\n\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n\n    const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\n    return new View(query, viewCache);\n  }\n\n  return view;\n}\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\n\n\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\n  const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\n\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  } // This is guaranteed to exist now, we just created anything that was missing\n\n\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\n\n\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\n  const queryId = query._queryIdentifier;\n  const removed = [];\n  let cancelEvents = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId); // We'll deal with complete views later.\n\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n\n    if (view) {\n      cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId); // We'll deal with complete views later.\n\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\n  }\n\n  return {\n    removed,\n    events: cancelEvents\n  };\n}\n\nfunction syncPointGetQueryViews(syncPoint) {\n  const result = [];\n\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n\n  return result;\n}\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\n\n\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\n  let serverCache = null;\n\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n\n  return serverCache;\n}\n\nfunction syncPointViewForQuery(syncPoint, query) {\n  const params = query._queryParams;\n\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nfunction syncPointViewExistsForQuery(syncPoint, query) {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nfunction syncPointHasCompleteView(syncPoint) {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nfunction syncPointGetCompleteView(syncPoint) {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n\n  return null;\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nlet referenceConstructor;\n\nfunction syncTreeSetReferenceConstructor(val) {\n  assert(!referenceConstructor, '__referenceConstructor has already been defined');\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor() {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n/**\n * Static tracker for next query tag.\n */\n\n\nlet syncTreeNextQueryTag_ = 1;\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\n\nclass SyncTree {\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(listenProvider_) {\n    this.listenProvider_ = listenProvider_;\n    /**\n     * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n     */\n\n    this.syncPointTree_ = new ImmutableTree(null);\n    /**\n     * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n     */\n\n    this.pendingWriteTree_ = newWriteTree();\n    this.tagToQueryMap = new Map();\n    this.queryToTagMap = new Map();\n  }\n\n}\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\n\n\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\n  // Record pending write.\n  writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\n  }\n}\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\n\n\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\n}\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\n\n\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\n\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree(null);\n\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, pathString => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\n  }\n}\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\n\n\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\n}\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\n\n\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\n}\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\n\n\nfunction syncTreeApplyListenComplete(syncTree, path) {\n  return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\n}\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\n\n\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n          queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\n *  deduping needs to take place. This flag allows toggling of that behavior\n * @returns Cancel events, if cancelError was provided.\n */\n\n\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError, skipListenerDedup = false) {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents = []; // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n\n  if (maybeSyncPoint && (query._queryIdentifier === 'default' || syncPointViewExistsForQuery(maybeSyncPoint, query))) {\n    const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\n\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n\n    if (!skipListenerDedup) {\n      /**\n       * We may have just removed one of many listeners and can short-circuit this whole process\n       * We may also not have removed a default listener, in which case all of the descendant listeners should already be\n       * properly set up.\n       */\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault = -1 !== removed.findIndex(query => {\n        return query._queryParams.loadsAllData();\n      });\n      const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\n\n      if (removingDefault && !covered) {\n        const subtree = syncTree.syncPointTree_.subtree(path); // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree); // Ok, we've collected all the listens we need. Set them up.\n\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n                  newQuery = view.query;\n            const listener = syncTreeCreateListenerForView_(syncTree, view);\n            syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery(syncTree, newQuery), listener.hashFn, listener.onComplete);\n          }\n        } // Otherwise there's nothing below us, so nothing we need to start listening on\n\n      } // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n\n\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag = null;\n          syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\n        } else {\n          removed.forEach(queryToRemove => {\n            const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\n          });\n        }\n      }\n    } // Now, clear all of the tags we're tracking for the removed listens\n\n\n    syncTreeRemoveTags_(syncTree, removed);\n  }\n\n  return cancelEvents;\n}\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\n\n\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n          queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\n\n\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n          queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\n\n\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration, skipSetupListener = false) {\n  const path = query._path;\n  let serverCache = null;\n  let foundAncestorDefaultView = false; // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\n\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(childName, completeCache);\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\n\n  if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n\n  return events;\n}\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\n\n\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\n    const relativePath = newRelativePath(pathSoFar, path);\n    const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\n\n    if (serverCache) {\n      return serverCache;\n    }\n  });\n  return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\n}\n\nfunction syncTreeGetServerValue(syncTree, query) {\n  const path = query._path;\n  let serverCache = null; // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode = serverCacheComplete ? new CacheNode(serverCache, true, false) : null;\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\n  const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\n  return viewGetCompleteNode(view);\n}\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\n\n\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\n  return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_,\n  /*serverCache=*/\n  null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\n}\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\n\n\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath()); // If we don't have cached server data, see if we can get it from this SyncPoint.\n\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n\n    if (childTree && childOperation) {\n      const childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\n    }\n\n    if (syncPoint) {\n      events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n    }\n\n    return events;\n  }\n}\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\n\n\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\n  const syncPoint = syncPointTree.get(newEmptyPath()); // If we don't have cached server data, see if we can get it from this SyncPoint.\n\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n\n    if (childOperation) {\n      events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(syncTree, view) {\n  const query = view.query;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: status => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(syncTree, query,\n        /*eventRegistration*/\n        null, error);\n      }\n    }\n  };\n}\n/**\n * Return the tag associated with the given query.\n */\n\n\nfunction syncTreeTagForQuery(syncTree, query) {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\n\n\nfunction syncTreeMakeQueryKey_(query) {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n/**\n * Return the query associated with the given tag, if we have one\n */\n\n\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\n  return syncTree.tagToQueryMap.get(tag);\n}\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\n\n\nfunction syncTreeParseQueryKey_(queryKey) {\n  const splitIndex = queryKey.indexOf('$');\n  assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n/**\n * A helper method to apply tagged operations\n */\n\n\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\n\n\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\n  return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views = [];\n\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n\n      each(childMap, (_key, childViews) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\n\n\nfunction syncTreeQueryForListening_(query) {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree, queries) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n/**\n * Static accessor for query tags.\n */\n\n\nfunction syncTreeGetNextQueryTag_() {\n  return syncTreeNextQueryTag_++;\n}\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\n\n\nfunction syncTreeSetupListener_(syncTree, query, view) {\n  const path = query._path;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n  const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\n  const subtree = syncTree.syncPointTree_.subtree(path); // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n\n  if (tag) {\n    assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\n      if (!pathIsEmpty(relativePath) && maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n        return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n      } else {\n        // No default listener here, flatten any deeper queries into an array\n        let queries = [];\n\n        if (maybeChildSyncPoint) {\n          queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\n        }\n\n        each(childMap, (_key, childQueries) => {\n          queries = queries.concat(childQueries);\n        });\n        return queries;\n      }\n    });\n\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery(syncTree, queryToStop));\n    }\n  }\n\n  return events;\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nclass ExistingValueProvider {\n  constructor(node_) {\n    this.node_ = node_;\n  }\n\n  getImmediateChild(childName) {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node() {\n    return this.node_;\n  }\n\n}\n\nclass DeferredValueProvider {\n  constructor(syncTree, path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName) {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node() {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n\n}\n/**\n * Generate placeholders for deferred values.\n */\n\n\nconst generateWithValues = function (values) {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\n\n\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\n  if (!value || typeof value !== 'object') {\n    return value;\n  }\n\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'];\n\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (op, existing, unused) {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n\n  const delta = op['increment'];\n\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls'); // Incrementing a non-number sets the value to the incremented amount\n\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode;\n  const existingVal = leaf.getValue();\n\n  if (typeof existingVal !== 'number') {\n    return delta;\n  } // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n\n\n  return existingVal + delta;\n};\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\n\n\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\n  return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\n};\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\n\n\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\n  return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\n};\n\nfunction resolveDeferredValue(node, existingVal, serverValues) {\n  const rawPri = node.getPriority().val();\n  const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\n  let newNode;\n\n  if (node.isLeafNode()) {\n    const leafNode = node;\n    const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\n\n    if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node;\n    newNode = childrenNode;\n\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\n\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\n\n\nclass Tree {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(name = '', parent = null, node = {\n    children: {},\n    childCount: 0\n  }) {\n    this.name = name;\n    this.parent = parent;\n    this.node = node;\n  }\n\n}\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\n\n\nfunction treeSubTree(tree, pathObj) {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n      next = pathGetFront(path);\n\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\n\n\nfunction treeGetValue(tree) {\n  return tree.node.value;\n}\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\n\n\nfunction treeSetValue(tree, value) {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n/**\n * @returns Whether the tree has any children.\n */\n\n\nfunction treeHasChildren(tree) {\n  return tree.node.childCount > 0;\n}\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\n\n\nfunction treeIsEmpty(tree) {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\n\n\nfunction treeForEachChild(tree, action) {\n  each(tree.node.children, (child, childTree) => {\n    action(new Tree(child, tree, childTree));\n  });\n}\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\n\n\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\n\n\nfunction treeForEachAncestor(tree, action, includeSelf) {\n  let node = includeSelf ? tree : tree.parent;\n\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n\n    node = node.parent;\n  }\n\n  return false;\n}\n/**\n * @returns The path of this tree node, as a Path.\n */\n\n\nfunction treeGetPath(tree) {\n  return new Path(tree.parent === null ? tree.name : treeGetPath(tree.parent) + '/' + tree.name);\n}\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\n\n\nfunction treeUpdateParents(tree) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\n\n\nfunction treeUpdateChild(tree, childName, child) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * True for invalid Firebase keys\n */\n\n\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\n\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n/**\n * Maximum number of characters to allow in leaf value\n */\n\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nconst isValidKey = function (key) {\n  return typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key);\n};\n\nconst isValidPathString = function (pathString) {\n  return typeof pathString === 'string' && pathString.length !== 0 && !INVALID_PATH_REGEX_.test(pathString);\n};\n\nconst isValidRootPathString = function (pathString) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nconst isValidPriority = function (priority) {\n  return priority === null || typeof priority === 'string' || typeof priority === 'number' && !isInvalidJSONNumber(priority) || priority && typeof priority === 'object' && // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  contains(priority, '.sv');\n};\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\n\n\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\n};\n/**\n * Validate a data object client-side before sending to server.\n */\n\n\nconst validateFirebaseData = function (errorPrefix, data, path_) {\n  const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\n  }\n\n  if (typeof data === 'function') {\n    throw new Error(errorPrefix + 'contains a function ' + validationPathToErrorString(path) + ' with contents = ' + data.toString());\n  }\n\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + validationPathToErrorString(path));\n  } // Check max leaf size, but try to avoid the utf8 conversion if we can.\n\n\n  if (typeof data === 'string' && data.length > MAX_LEAF_SIZE_ / 3 && stringLength(data) > MAX_LEAF_SIZE_) {\n    throw new Error(errorPrefix + 'contains a string greater than ' + MAX_LEAF_SIZE_ + ' utf8 bytes ' + validationPathToErrorString(path) + \" ('\" + data.substring(0, 50) + \"...')\");\n  } // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n\n\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key, value) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n\n        if (!isValidKey(key)) {\n          throw new Error(errorPrefix + ' contains an invalid key (' + key + ') ' + validationPathToErrorString(path) + '.  Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(errorPrefix + ' contains \".value\" child ' + validationPathToErrorString(path) + ' in addition to actual children.');\n    }\n  }\n};\n/**\n * Pre-validate paths passed in the firebase function.\n */\n\n\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\n  let i, curPath;\n\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) ;else if (!isValidKey(keys[j])) {\n        throw new Error(errorPrefix + 'contains an invalid key (' + keys[j] + ') in path ' + curPath.toString() + '. Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n      }\n    }\n  } // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n\n\n  mergePaths.sort(pathCompare);\n  let prevPath = null;\n\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(errorPrefix + 'contains a path ' + prevPath.toString() + ' that is ancestor of another path ' + curPath.toString());\n    }\n\n    prevPath = curPath;\n  }\n};\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\n\n\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix$1 = errorPrefix(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\n  }\n\n  const mergePaths = [];\n  each(data, (key, value) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\n\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(errorPrefix$1 + \"contains an invalid value for '\" + curPath.toString() + \"', which must be a valid \" + 'Firebase priority (a string, finite number, server value, or null).');\n      }\n    }\n\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix$1, mergePaths);\n};\n\nconst validatePriority = function (fnName, priority, optional) {\n  if (optional && priority === undefined) {\n    return;\n  }\n\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(errorPrefix(fnName, 'priority') + 'is ' + priority.toString() + ', but must be a valid Firebase priority (a string, finite number, ' + 'server value, or null).');\n  } // Special case to allow importing data with a .sv.\n\n\n  if (!isValidPriority(priority)) {\n    throw new Error(errorPrefix(fnName, 'priority') + 'must be a valid Firebase priority ' + '(a string, finite number, server value, or null).');\n  }\n};\n\nconst validateKey = function (fnName, argumentName, key, optional) {\n  if (optional && key === undefined) {\n    return;\n  }\n\n  if (!isValidKey(key)) {\n    throw new Error(errorPrefix(fnName, argumentName) + 'was an invalid key = \"' + key + '\".  Firebase keys must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\n  }\n};\n/**\n * @internal\n */\n\n\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(errorPrefix(fnName, argumentName) + 'was an invalid path = \"' + pathString + '\". Paths must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n  }\n};\n\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n/**\n * @internal\n */\n\n\nconst validateWritablePath = function (fnName, path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nconst validateUrl = function (fnName, parsedUrl) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n\n  if (!(typeof parsedUrl.repoInfo.host === 'string') || parsedUrl.repoInfo.host.length === 0 || !isValidKey(parsedUrl.repoInfo.namespace) && parsedUrl.repoInfo.host.split(':')[0] !== 'localhost' || pathString.length !== 0 && !isValidRootPathString(pathString)) {\n    throw new Error(errorPrefix(fnName, 'url') + 'must be a valid firebase URL and ' + 'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\n  }\n};\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\n\n\nclass EventQueue {\n  constructor() {\n    this.eventLists_ = [];\n    /**\n     * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n     */\n\n    this.recursionDepth_ = 0;\n  }\n\n}\n/**\n * @param eventDataList - The new events to queue.\n */\n\n\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList = null;\n\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = {\n        events: [],\n        path\n      };\n    }\n\n    currList.events.push(data);\n  }\n\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\n\n\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\n}\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\n\n\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) || pathContains(changedPath, eventPath));\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\n  eventQueue.recursionDepth_++;\n  let sentAll = true;\n\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n\n    if (eventList) {\n      const eventPath = eventList.path;\n\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n/**\n * Iterates through the list and raises each event\n */\n\n\nfunction eventListRaise(eventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n\n      exceptionGuard(eventFn);\n    }\n  }\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\n\nconst MAX_TRANSACTION_RETRIES = 25;\n/**\n * A connection to a single data repository.\n */\n\nclass Repo {\n  constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\n    this.repoInfo_ = repoInfo_;\n    this.forceRestClient_ = forceRestClient_;\n    this.authTokenProvider_ = authTokenProvider_;\n    this.appCheckProvider_ = appCheckProvider_;\n    this.dataUpdateCount = 0;\n    this.statsListener_ = null;\n    this.eventQueue_ = new EventQueue();\n    this.nextWriteId_ = 1;\n    this.interceptServerDataCallback_ = null;\n    /** A list of data pieces and paths to be set when this client disconnects. */\n\n    this.onDisconnect_ = newSparseSnapshotTree();\n    /** Stores queues of outstanding transactions for Firebase locations. */\n\n    this.transactionQueueTree_ = new Tree(); // TODO: This should be @private but it's used by test_access.js and internal.js\n\n    this.persistentConnection_ = null; // This key is intentionally not updated if RepoInfo is later changed or replaced\n\n    this.key = this.repoInfo_.toURLString();\n  }\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n\n\n  toString() {\n    return (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host;\n  }\n\n}\n\nfunction repoStart(repo, appId, authOverride) {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\n      repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n    }, repo.authTokenProvider_, repo.appCheckProvider_); // Minor hack: Fire onConnect immediately, since there's no actual connection.\n\n    setTimeout(() => repoOnConnectStatus(repo,\n    /* connectStatus= */\n    true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error('Only objects are supported for option databaseAuthVariableOverride');\n      }\n\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\n      repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n    }, connectStatus => {\n      repoOnConnectStatus(repo, connectStatus);\n    }, updates => {\n      repoOnServerInfoUpdate(repo, updates);\n    }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  }); // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_)); // Used for .info.\n\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents = [];\n      const node = repo.infoData_.getNode(query._path); // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\n      }); // No synchronous events for network-backed sync trees\n\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\n\n\nfunction repoServerTime(repo) {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = offsetNode.val() || 0;\n  return new Date().getTime() + offset;\n}\n/**\n * Generate ServerValues using some variables from the repo object.\n */\n\n\nfunction repoGenerateServerValues(repo) {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n/**\n * Called by realtime when we get new messages from the server.\n */\n\n\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_ ? repo.interceptServerDataCallback_(pathString, data) : data;\n  let events = [];\n\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(data, raw => nodeFromJSON(raw));\n      events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\n    }\n  } else if (isMerge) {\n    const changedChildren = map(data, raw => nodeFromJSON(raw));\n    events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n\n  let affectedPath = path;\n\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\nfunction repoOnConnectStatus(repo, connectStatus) {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo, updates) {\n  each(updates, (key, value) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo, pathString, value) {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo) {\n  return repo.nextWriteId_++;\n}\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will wait until the\n *  repo has established a connection and then request the value for `query`.\n * If the client is not able to retrieve the query result for another reason,\n * it reports an error.\n *\n * @param query - The query to surface a value for.\n */\n\n\nfunction repoGetValue(repo, query, eventRegistration) {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n\n  return repo.server_.get(query).then(payload => {\n    const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\n    /**\n     * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\n     * Add an event registration,\n     * Update data at the path,\n     * Raise any events,\n     * Cleanup the SyncTree\n     */\n\n    syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration, true);\n    let events;\n\n    if (query._queryParams.loadsAllData()) {\n      events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\n    } else {\n      const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n      events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, query._path, node, tag);\n    }\n    /*\n     * We need to raise events in the scenario where `get()` is called at a parent path, and\n     * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\n     * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\n     * and its corresponding serverCache, including the child location where `onValue` is called. Then,\n     * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\n     * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\n     * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\n     * ensure the corresponding child events will get fired.\n     */\n\n\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\n    syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration, null, true);\n    return node;\n  }, err => {\n    repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n    return Promise.reject(new Error(err));\n  });\n}\n\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  }); // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(path.toString(), newNodeUnresolved.val(\n  /*export=*/\n  true), (status, errorReason) => {\n    const success = status === 'ok';\n\n    if (!success) {\n      warn('set at ' + path + ' failed: ' + status);\n    }\n\n    const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath); // We queued the events above, so just flush the queue here\n\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\n  repoLog(repo, 'update', {\n    path: path.toString(),\n    value: childrenToMerge\n  }); // Start with our existing data and merge each child into it.\n\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren = {};\n  each(childrenToMerge, (changedKey, changedValue) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\n      const success = status === 'ok';\n\n      if (!success) {\n        warn('update at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n      const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n    each(childrenToMerge, changedPath => {\n      const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\n      repoRerunTransactions(repo, affectedPath);\n    }); // We queued the events above, so just flush the queue here\n\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\n\n\nfunction repoRunOnDisconnectEvents(repo) {\n  repoLog(repo, 'onDisconnectEvents');\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\n    const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\n    sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n  });\n  let events = [];\n  sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\n    events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\n    const affectedPath = repoAbortTransactions(repo, path);\n    repoRerunTransactions(repo, affectedPath);\n  });\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(path.toString(), newNode.val(\n  /*export=*/\n  true), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n    }\n\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(path.toString(), newNode.val(\n  /*export=*/\n  true), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n    }\n\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\n    if (status === 'ok') {\n      each(childrenToMerge, (childName, childNode) => {\n        const newChildNode = nodeFromJSON(childNode);\n        sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\n      });\n    }\n\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\n  let events;\n\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n  } else {\n    events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n  }\n\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n  } else {\n    events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n  }\n\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nfunction repoInterrupt(repo) {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nfunction repoResume(repo) {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nfunction repoLog(repo, ...varArgs) {\n  let prefix = '';\n\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n\n  log(prefix, ...varArgs);\n}\n\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n        error.code = code;\n        callback(error);\n      }\n    });\n  }\n}\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\n\n\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\n  repoLog(repo, 'transaction on ' + path); // Initialize transaction.\n\n  const transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  }; // Run transaction initially.\n\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path); // Mark as run and add to our queue.\n\n    transaction.status = 0\n    /* RUN */\n    ;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n    treeSetValue(queueNode, nodeQueue); // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n\n    let priorityForNode;\n\n    if (typeof newVal === 'object' && newVal !== null && contains(newVal, '.priority')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal, '.priority');\n      assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' + 'Priority must be a valid string, finite number, server value, or null.');\n    } else {\n      const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) || ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n/**\n * @param excludeSets - A specific set to exclude\n */\n\n\nfunction repoGetLatestState(repo, path, excludeSets) {\n  return syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) || ChildrenNode.EMPTY_NODE;\n}\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\n\n\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n    const allRun = queue.every(transaction => transaction.status === 0\n    /* RUN */\n    ); // If they're all run (and not sent), we can send them.  Else, we must wait.\n\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\n\n\nfunction repoSendTransactionQueue(repo, path, queue) {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(txn.status === 0\n    /* RUN */\n    , 'tryToSendTransactionQueue_: items in queue should all be run.');\n    txn.status = 1\n    /* SENT */\n    ;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path); // If we've gotten to this point, the output snapshot must be defined.\n\n    snapToSend = snapToSend.updateChild(relativePath\n    /** @type {!Node} */\n    , txn.currentOutputSnapshotRaw);\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path; // Send the put.\n\n  repo.server_.put(pathToSend.toString(), dataToSend, status => {\n    repoLog(repo, 'transaction put response', {\n      path: pathToSend.toString(),\n      status\n    });\n    let events = [];\n\n    if (status === 'ok') {\n      // Queue up the callbacks and fire them after cleaning up all of our\n      // transaction state, since the callback could trigger more\n      // transactions or sets.\n      const callbacks = [];\n\n      for (let i = 0; i < queue.length; i++) {\n        queue[i].status = 2\n        /* COMPLETED */\n        ;\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\n\n        if (queue[i].onComplete) {\n          // We never unset the output snapshot, and given that this\n          // transaction is complete, it should be set\n          callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\n        }\n\n        queue[i].unwatcher();\n      } // Now remove the completed transactions.\n\n\n      repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path)); // There may be pending transactions that we can now send.\n\n      repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events); // Finally, trigger onComplete callbacks.\n\n      for (let i = 0; i < callbacks.length; i++) {\n        exceptionGuard(callbacks[i]);\n      }\n    } else {\n      // transactions are no longer sent.  Update their status appropriately.\n      if (status === 'datastale') {\n        for (let i = 0; i < queue.length; i++) {\n          if (queue[i].status === 3\n          /* SENT_NEEDS_ABORT */\n          ) {\n              queue[i].status = 4\n              /* NEEDS_ABORT */\n              ;\n            } else {\n            queue[i].status = 0\n            /* RUN */\n            ;\n          }\n        }\n      } else {\n        warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\n\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = 4\n          /* NEEDS_ABORT */\n          ;\n          queue[i].abortReason = status;\n        }\n      }\n\n      repoRerunTransactions(repo, path);\n    }\n  }, latestHash);\n}\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\n\n\nfunction repoRerunTransactions(repo, changedPath) {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\n  const path = treeGetPath(rootMostTransactionNode);\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n  return path;\n}\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\n\n\nfunction repoRerunTransactionQueue(repo, queue, path) {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  } // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n\n\n  const callbacks = [];\n  let events = []; // Ignore all of the sets we're going to re-run.\n\n  const txnsToRerun = queue.filter(q => {\n    return q.status === 0\n    /* RUN */\n    ;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n        abortReason;\n    assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\n\n    if (transaction.status === 4\n    /* NEEDS_ABORT */\n    ) {\n        abortTransaction = true;\n        abortReason = transaction.abortReason;\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n      } else if (transaction.status === 0\n    /* RUN */\n    ) {\n        if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n          abortTransaction = true;\n          abortReason = 'maxretry';\n          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n        } else {\n          // This code reruns a transaction\n          const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\n          transaction.currentInputSnapshot = currentNode;\n          const newData = queue[i].update(currentNode.val());\n\n          if (newData !== undefined) {\n            validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\n            let newDataNode = nodeFromJSON(newData);\n            const hasExplicitPriority = typeof newData === 'object' && newData != null && contains(newData, '.priority');\n\n            if (!hasExplicitPriority) {\n              // Keep the old priority if there wasn't a priority explicitly specified.\n              newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n            }\n\n            const oldWriteId = transaction.currentWriteId;\n            const serverValues = repoGenerateServerValues(repo);\n            const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\n            transaction.currentOutputSnapshotRaw = newDataNode;\n            transaction.currentOutputSnapshotResolved = newNodeResolved;\n            transaction.currentWriteId = repoGetNextWriteId(repo); // Mutates setsToIgnore in place\n\n            setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n            events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\n          } else {\n            abortTransaction = true;\n            abortReason = 'nodata';\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n          }\n        }\n      }\n\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = 2\n      /* COMPLETED */\n      ; // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\n        } else {\n          callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\n        }\n      }\n    }\n  } // Clean up completed transactions.\n\n\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_); // Now fire callbacks, now that we're in a good, known state.\n\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  } // Try to send the transaction result to the server.\n\n\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\n\n\nfunction repoGetAncestorTransactionNode(repo, path) {\n  let front; // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\n\n\nfunction repoBuildTransactionQueue(repo, transactionNode) {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue = [];\n  repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue); // Sort them by the order the transactions were created.\n\n  transactionQueue.sort((a, b) => a.order - b.order);\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\n  const nodeQueue = treeGetValue(node);\n\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\n\n\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\n  const queue = treeGetValue(node);\n\n  if (queue) {\n    let to = 0;\n\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== 2\n      /* COMPLETED */\n      ) {\n          queue[to] = queue[from];\n          to++;\n        }\n    }\n\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\n\n\nfunction repoAbortTransactions(repo, path) {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n  treeForEachAncestor(transactionNode, node => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n  repoAbortTransactionsOnNode(repo, transactionNode);\n  treeForEachDescendant(transactionNode, node => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n  return affectedPath;\n}\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\n\n\nfunction repoAbortTransactionsOnNode(repo, node) {\n  const queue = treeGetValue(node);\n\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = []; // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n\n    let events = [];\n    let lastSent = -1;\n\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === 3\n      /* SENT_NEEDS_ABORT */\n      ) ;else if (queue[i].status === 1\n      /* SENT */\n      ) {\n          assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\n          lastSent = i; // Mark transaction for abort when it comes back.\n\n          queue[i].status = 3\n          /* SENT_NEEDS_ABORT */\n          ;\n          queue[i].abortReason = 'set';\n        } else {\n        assert(queue[i].status === 0\n        /* RUN */\n        , 'Unexpected transaction status in abort'); // We can abort it immediately.\n\n        queue[i].unwatcher();\n        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\n\n        if (queue[i].onComplete) {\n          callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\n        }\n      }\n    }\n\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    } // Now fire the callbacks.\n\n\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\n\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nfunction decodePath(pathString) {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n\n      pathStringDecoded += '/' + piece;\n    }\n  }\n\n  return pathStringDecoded;\n}\n/**\n * @returns key value hash\n */\n\n\nfunction decodeQuery(queryString) {\n  const results = {};\n\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n\n    const kv = segment.split('=');\n\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n\n  return results;\n}\n\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\n  const parsedUrl = parseDatabaseURL(dataURL),\n        namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(parsedUrl.host + ' is no longer supported. ' + 'Please use <YOUR FIREBASE>.firebaseio.com instead');\n  } // Catch common error of uninitialized namespace value.\n\n\n  if ((!namespace || namespace === 'undefined') && parsedUrl.domain !== 'localhost') {\n    fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n  return {\n    repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin,\n    /*persistenceKey=*/\n    '',\n    /*includeNamespaceInQueryParams=*/\n    namespace !== parsedUrl.subdomain),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nconst parseDatabaseURL = function (dataURL) {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n      domain = '',\n      subdomain = '',\n      pathString = '',\n      namespace = ''; // Always default to SSL, unless otherwise specified.\n\n  let secure = true,\n      scheme = 'https',\n      port = 443; // Don't do any validation here. The caller is responsible for validating the result of parsing.\n\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    } // Parse host, path, and query string.\n\n\n    let slashInd = dataURL.indexOf('/');\n\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n\n    let questionMarkInd = dataURL.indexOf('?');\n\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n\n    const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd))); // If we have a port, use scheme for determining if it's secure.\n\n    colonInd = host.indexOf(':');\n\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1); // Normalize namespaces to lowercase to share storage / connection.\n\n      namespace = subdomain;\n    } // Always treat the value of the `ns` as the namespace name if it is present.\n\n\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Encapsulates the data needed to raise an event\n */\n\n\nclass DataEvent {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(eventType, eventRegistration, snapshot, prevName) {\n    this.eventType = eventType;\n    this.eventRegistration = eventRegistration;\n    this.snapshot = snapshot;\n    this.prevName = prevName;\n  }\n\n  getPath() {\n    const ref = this.snapshot.ref;\n\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n\n  getEventType() {\n    return this.eventType;\n  }\n\n  getEventRunner() {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  toString() {\n    return this.getPath().toString() + ':' + this.eventType + ':' + stringify(this.snapshot.exportVal());\n  }\n\n}\n\nclass CancelEvent {\n  constructor(eventRegistration, error, path) {\n    this.eventRegistration = eventRegistration;\n    this.error = error;\n    this.path = path;\n  }\n\n  getPath() {\n    return this.path;\n  }\n\n  getEventType() {\n    return 'cancel';\n  }\n\n  getEventRunner() {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  toString() {\n    return this.path.toString() + ':cancel';\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\n\n\nclass CallbackContext {\n  constructor(snapshotCallback, cancelCallback) {\n    this.snapshotCallback = snapshotCallback;\n    this.cancelCallback = cancelCallback;\n  }\n\n  onValue(expDataSnapshot, previousChildName) {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error) {\n    assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback() {\n    return !!this.cancelCallback;\n  }\n\n  matches(other) {\n    return this.snapshotCallback === other.snapshotCallback || this.snapshotCallback.userCallback !== undefined && this.snapshotCallback.userCallback === other.snapshotCallback.userCallback && this.snapshotCallback.context === other.snapshotCallback.context;\n  }\n\n}\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The `onDisconnect` class allows you to write or clear data when your client\n * disconnects from the Database server. These updates occur whether your\n * client disconnects cleanly or not, so you can rely on them to clean up data\n * even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in\n * applications where it is useful to detect how many clients are connected and\n * when other clients disconnect. See\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be\n * transferred to the Database server, these functions should be called before\n * writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an\n * operation to occur each time a disconnect occurs, you'll need to re-establish\n * the `onDisconnect` operations each time you reconnect.\n */\n\n\nclass OnDisconnect {\n  /** @hideconstructor */\n  constructor(_repo, _path) {\n    this._repo = _repo;\n    this._path = _path;\n  }\n  /**\n   * Cancels all previously queued `onDisconnect()` set or update events for this\n   * location and all children.\n   *\n   * If a write has been queued for this location via a `set()` or `update()` at a\n   * parent location, the write at this location will be canceled, though writes\n   * to sibling locations will still occur.\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n\n\n  cancel() {\n    const deferred = new Deferred();\n    repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\n   * Ensures the data at this location is deleted when the client is disconnected\n   * (due to closing the browser, navigating to a new page, or network issues).\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n\n\n  remove() {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred();\n    repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\n   * Ensures the data at this location is set to the specified value when the\n   * client is disconnected (due to closing the browser, navigating to a new page,\n   * or network issues).\n   *\n   * `set()` is especially useful for implementing \"presence\" systems, where a\n   * value should be changed or cleared when a user disconnects so that they\n   * appear \"offline\" to other users. See\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n   * for more information.\n   *\n   * Note that `onDisconnect` operations are only triggered once. If you want an\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\n   * the `onDisconnect` operations each time.\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n\n\n  set(value) {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred();\n    repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\n   * Ensures the data at this location is set to the specified value and priority\n   * when the client is disconnected (due to closing the browser, navigating to a\n   * new page, or network issues).\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @param priority - The priority to be written (string, number, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n\n\n  setWithPriority(value, priority) {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n    const deferred = new Deferred();\n    repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n  /**\n   * Writes multiple values at this location when the client is disconnected (due\n   * to closing the browser, navigating to a new page, or network issues).\n   *\n   * The `values` argument contains multiple property-value pairs that will be\n   * written to the Database together. Each child property can either be a simple\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\n   * from the current location to the data to update.\n   *\n   * As opposed to the `set()` method, `update()` can be use to selectively update\n   * only the referenced properties at the current location (instead of replacing\n   * all the child properties at the current location).\n   *\n   * @param values - Object containing multiple values.\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n\n\n  update(values) {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\n    const deferred = new Deferred();\n    repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => {}));\n    return deferred.promise;\n  }\n\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @internal\n */\n\n\nclass QueryImpl {\n  /**\n   * @hideconstructor\n   */\n  constructor(_repo, _path, _queryParams, _orderByCalled) {\n    this._repo = _repo;\n    this._path = _path;\n    this._queryParams = _queryParams;\n    this._orderByCalled = _orderByCalled;\n  }\n\n  get key() {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref() {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier() {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n\n\n  get _queryObject() {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other) {\n    other = getModularInstance(other);\n\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n\n  toString() {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n\n}\n/**\n * Validates that no other order by call has been made\n */\n\n\nfunction validateNoPreviousOrderByCall(query, fnName) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n/**\n * Validates start/end values for queries.\n */\n\n\nfunction validateQueryEndpoints(params) {\n  let startNode = null;\n  let endNode = null;\n\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' + 'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' + 'endAt(), endBefore(), or equalTo() must be a string.';\n\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (startNode != null && !isValidPriority(startNode) || endNode != null && !isValidPriority(endNode)) {\n      throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' + 'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' + '(null, a number, or a string).');\n    }\n  } else {\n    assert(params.getIndex() instanceof PathIndex || params.getIndex() === VALUE_INDEX, 'unknown index type.');\n\n    if (startNode != null && typeof startNode === 'object' || endNode != null && typeof endNode === 'object') {\n      throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' + 'equalTo() cannot be an object.');\n    }\n  }\n}\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\n\n\nfunction validateLimit(params) {\n  if (params.hasStart() && params.hasEnd() && params.hasLimit() && !params.hasAnchoredLimit()) {\n    throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" + 'limitToFirst() or limitToLast() instead.');\n  }\n}\n/**\n * @internal\n */\n\n\nclass ReferenceImpl extends QueryImpl {\n  /** @hideconstructor */\n  constructor(repo, path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent() {\n    const parentPath = pathParent(this._path);\n    return parentPath === null ? null : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root() {\n    let ref = this;\n\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n\n    return ref;\n  }\n\n}\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\n\n\nclass DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(_node,\n  /**\n   * The location of this DataSnapshot.\n   */\n  ref, _index) {\n    this._node = _node;\n    this.ref = ref;\n    this._index = _index;\n  }\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n\n\n  get priority() {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val();\n  }\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n\n\n  get key() {\n    return this.ref.key;\n  }\n  /** Returns the number of child properties of this `DataSnapshot`. */\n\n\n  get size() {\n    return this._node.numChildren();\n  }\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n\n\n  child(path) {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n\n\n  exists() {\n    return !this._node.isEmpty();\n  }\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  exportVal() {\n    return this._node.val(true);\n  }\n  /**\n   * Enumerates the top-level children in the `DataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n\n\n  forEach(action) {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node; // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\n    });\n  }\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n\n\n  hasChild(path) {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n\n\n  hasChildren() {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n\n\n  toJSON() {\n    return this.exportVal();\n  }\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  val() {\n    return this._node.val();\n  }\n\n}\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\n\n\nfunction ref(db, path) {\n  db = getModularInstance(db);\n\n  db._checkNotDeleted('ref');\n\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\n\n\nfunction refFromURL(db, url) {\n  db = getModularInstance(db);\n\n  db._checkNotDeleted('refFromURL');\n\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n  const repoInfo = parsedURL.repoInfo;\n\n  if (!db._repo.repoInfo_.isCustomHost() && repoInfo.host !== db._repo.repoInfo_.host) {\n    fatal('refFromURL' + ': Host name does not match the current database: ' + '(found ' + repoInfo.host + ' but expected ' + db._repo.repoInfo_.host + ')');\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\n\n\nfunction child(parent, path) {\n  parent = getModularInstance(parent);\n\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\n\n\nfunction onDisconnect(ref) {\n  ref = getModularInstance(ref);\n  return new OnDisconnect(ref._repo, ref._path);\n}\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\n\n\nfunction push(parent, value) {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now); // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n\n  const thennablePushRef = child(parent, name);\n  const pushRef = child(parent, name);\n  let promise;\n\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef;\n}\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\n\n\nfunction remove(ref) {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\n\n\nfunction set(ref, value) {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred();\n  repoSetWithPriority(ref._repo, ref._path, value,\n  /*priority=*/\n  null, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\n\n\nfunction setPriority(ref, priority) {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred();\n  repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\n\n\nfunction setWithPriority(ref, value, priority) {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred();\n  repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\n\n\nfunction update(ref, values) {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred();\n  repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => {}));\n  return deferred.promise;\n}\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\n\n\nfunction get(query) {\n  query = getModularInstance(query);\n  const callbackContext = new CallbackContext(() => {});\n  const container = new ValueEventRegistration(callbackContext);\n  return repoGetValue(query._repo, query, container).then(node => {\n    return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\n  });\n}\n/**\n * Represents registration for 'value' events.\n */\n\n\nclass ValueEventRegistration {\n  constructor(callbackContext) {\n    this.callbackContext = callbackContext;\n  }\n\n  respondsTo(eventType) {\n    return eventType === 'value';\n  }\n\n  createEvent(change, query) {\n    const index = query._queryParams.getIndex();\n\n    return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\n  }\n\n  getEventRunner(eventData) {\n    if (eventData.getEventType() === 'cancel') {\n      return () => this.callbackContext.onCancel(eventData.error);\n    } else {\n      return () => this.callbackContext.onValue(eventData.snapshot, null);\n    }\n  }\n\n  createCancelEvent(error, path) {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other) {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback() {\n    return this.callbackContext !== null;\n  }\n\n}\n/**\n * Represents the registration of a child_x event.\n */\n\n\nclass ChildEventRegistration {\n  constructor(eventType, callbackContext) {\n    this.eventType = eventType;\n    this.callbackContext = callbackContext;\n  }\n\n  respondsTo(eventType) {\n    let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck = eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error, path) {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change, query) {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\n\n    const index = query._queryParams.getIndex();\n\n    return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\n  }\n\n  getEventRunner(eventData) {\n    if (eventData.getEventType() === 'cancel') {\n      return () => this.callbackContext.onCancel(eventData.error);\n    } else {\n      return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\n    }\n  }\n\n  matches(other) {\n    if (other instanceof ChildEventRegistration) {\n      return this.eventType === other.eventType && (!this.callbackContext || !other.callbackContext || this.callbackContext.matches(other.callbackContext));\n    }\n\n    return false;\n  }\n\n  hasAnyCallback() {\n    return !!this.callbackContext;\n  }\n\n}\n\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\n  let cancelCallback;\n\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n\n    const onceCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\n  const container = eventType === 'value' ? new ValueEventRegistration(callbackContext) : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\n}\n\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\n}\n\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\n}\n\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\n}\n\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\n  return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\n}\n/**\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\n * the respective `on*` callbacks.\n *\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\n\n\nfunction off(query, eventType, callback) {\n  let container = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\n\n\nclass QueryConstraint {}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n\n  _apply(query) {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n\n    if (query._queryParams.hasEnd()) {\n      throw new Error('endAt: Starting point was already set (by another call to endAt, ' + 'endBefore or equalTo).');\n    }\n\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n\n}\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\n\n\nfunction endAt(value, key) {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n\n  _apply(query) {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n\n    if (query._queryParams.hasEnd()) {\n      throw new Error('endBefore: Starting point was already set (by another call to endAt, ' + 'endBefore or equalTo).');\n    }\n\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n\n}\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value lesss than or equal\n * to the specified value and a a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\n\n\nfunction endBefore(value, key) {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n\n  _apply(query) {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n\n    if (query._queryParams.hasStart()) {\n      throw new Error('startAt: Starting point was already set (by another call to startAt, ' + 'startBefore or equalTo).');\n    }\n\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n\n}\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\n\n\nfunction startAt(value = null, key) {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n\n  _apply(query) {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n\n    if (query._queryParams.hasStart()) {\n      throw new Error('startAfter: Starting point was already set (by another call to startAt, ' + 'startAfter, or equalTo).');\n    }\n\n    return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n  }\n\n}\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\n\n\nfunction startAfter(value, key) {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  constructor(_limit) {\n    super();\n    this._limit = _limit;\n  }\n\n  _apply(query) {\n    if (query._queryParams.hasLimit()) {\n      throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' + 'or limitToLast).');\n    }\n\n    return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\n  }\n\n}\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\n\n\nfunction limitToFirst(limit) {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  constructor(_limit) {\n    super();\n    this._limit = _limit;\n  }\n\n  _apply(query) {\n    if (query._queryParams.hasLimit()) {\n      throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' + 'or limitToLast).');\n    }\n\n    return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\n  }\n\n}\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\n\n\nfunction limitToLast(limit) {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  constructor(_path) {\n    super();\n    this._path = _path;\n  }\n\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\n    }\n\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams,\n    /*orderByCalled=*/\n    true);\n  }\n\n}\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\n\n\nfunction orderByChild(path) {\n  if (path === '$key') {\n    throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\n  } else if (path === '$priority') {\n    throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\n  } else if (path === '$value') {\n    throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\n  }\n\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams,\n    /*orderByCalled=*/\n    true);\n  }\n\n}\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\n\n\nfunction orderByKey() {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams,\n    /*orderByCalled=*/\n    true);\n  }\n\n}\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\n\n\nfunction orderByPriority() {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  _apply(query) {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(query._repo, query._path, newParams,\n    /*orderByCalled=*/\n    true);\n  }\n\n}\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\n\n\nfunction orderByValue() {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  constructor(_value, _key) {\n    super();\n    this._value = _value;\n    this._key = _key;\n  }\n\n  _apply(query) {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n\n    if (query._queryParams.hasStart()) {\n      throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' + 'equalTo).');\n    }\n\n    if (query._queryParams.hasEnd()) {\n      throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' + 'equalTo).');\n    }\n\n    return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\n  }\n\n}\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\n\n\nfunction equalTo(value, key) {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\n\n\nfunction query(query, ...queryConstraints) {\n  let queryImpl = getModularInstance(query);\n\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n\n  return queryImpl;\n}\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\n\n\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\n\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n/**\n * Creates and caches `Repo` instances.\n */\n\nconst repos = {};\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\n\nlet useRestClient = false;\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\n\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\n  repo.repoInfo_ = new RepoInfo(`${host}:${port}`,\n  /* secure= */\n  false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\n\n\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\n  let dbUrl = url || app.options.databaseURL;\n\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\"Can't determine Firebase Database URL. Be sure to include \" + ' a Project ID when calling firebase.initializeApp().');\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n  let isEmulator;\n  let dbEmulatorHost = undefined;\n\n  if (typeof process !== 'undefined' && process.env) {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider = nodeAdmin && isEmulator ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER) : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal('Database URL must point to the root of a Firebase Database ' + '(not including a child path).');\n  }\n\n  const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\n  return new Database(repo, app);\n}\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\n\n\nfunction repoManagerDeleteRepo(repo, appName) {\n  const appRepos = repos[appName]; // This should never happen...\n\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\n\n\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n\n  if (repo) {\n    fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\n  }\n\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n  return repo;\n}\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\n\n\nfunction repoManagerForceRestClient(forceRestClient) {\n  useRestClient = forceRestClient;\n}\n/**\n * Class representing a Firebase Realtime Database.\n */\n\n\nclass Database {\n  /** @hideconstructor */\n  constructor(_repoInternal,\n  /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n  app) {\n    this._repoInternal = _repoInternal;\n    this.app = app;\n    /** Represents a `Database` instance. */\n\n    this['type'] = 'database';\n    /** Track if the instance has been used (root or repo accessed) */\n\n    this._instanceStarted = false;\n  }\n\n  get _repo() {\n    if (!this._instanceStarted) {\n      repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\n      this._instanceStarted = true;\n    }\n\n    return this._repoInternal;\n  }\n\n  get _root() {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n\n    return this._rootInternal;\n  }\n\n  _delete() {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n\n}\n\nfunction checkTransportInit() {\n  if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n    warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');\n  }\n}\n/**\n * Force the use of websockets instead of longPolling.\n */\n\n\nfunction forceWebSockets() {\n  checkTransportInit();\n  BrowserPollConnection.forceDisallow();\n}\n/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\n\n\nfunction forceLongPolling() {\n  checkTransportInit();\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n}\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\n\n\nfunction getDatabase(app = getApp(), url) {\n  return _getProvider(app, 'database').getImmediate({\n    identifier: url\n  });\n}\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\n\n\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\n  db = getModularInstance(db);\n\n  db._checkNotDeleted('useEmulator');\n\n  if (db._instanceStarted) {\n    fatal('Cannot call useEmulator() after instance has already been initialized.');\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider = undefined;\n\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\n    }\n\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token = typeof options.mockUserToken === 'string' ? options.mockUserToken : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  } // Modify the repo to apply emulator settings\n\n\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\n\n\nfunction goOffline(db) {\n  db = getModularInstance(db);\n\n  db._checkNotDeleted('goOffline');\n\n  repoInterrupt(db._repo);\n}\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\n\n\nfunction goOnline(db) {\n  db = getModularInstance(db);\n\n  db._checkNotDeleted('goOnline');\n\n  repoResume(db._repo);\n}\n\nfunction enableLogging(logger, persistent) {\n  enableLogging$1(logger, persistent);\n}\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nfunction registerDatabase(variant) {\n  setSDKVersion(SDK_VERSION$1);\n\n  _registerComponent(new Component('database', (container, {\n    instanceIdentifier: url\n  }) => {\n    const app = container.getProvider('app').getImmediate();\n    const authProvider = container.getProvider('auth-internal');\n    const appCheckProvider = container.getProvider('app-check-internal');\n    return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setMultipleInstances(true));\n\n  registerVersion(name, version, variant); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name, version, 'esm2017');\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\n\nfunction serverTimestamp() {\n  return SERVER_TIMESTAMP;\n}\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\n\n\nfunction increment(delta) {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A type for the resolve value of {@link runTransaction}.\n */\n\n\nclass TransactionResult {\n  /** @hideconstructor */\n  constructor(\n  /** Whether the transaction was successfully committed. */\n  committed,\n  /** The resulting data snapshot. */\n  snapshot) {\n    this.committed = committed;\n    this.snapshot = snapshot;\n  }\n  /** Returns a JSON-serializable representation of this object. */\n\n\n  toJSON() {\n    return {\n      committed: this.committed,\n      snapshot: this.snapshot.toJSON()\n    };\n  }\n\n}\n/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which\n * just overwrites the data regardless of its previous value, `runTransaction()` is\n * used to modify the existing value to a new value, ensuring there are no\n * conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is\n * used to transform the current value into a new value. If another client\n * writes to the location before your new value is successfully written, your\n * update function will be called again with the new current value, and the\n * write will be retried. This will happen repeatedly until your write succeeds\n * without conflict or you abort the transaction by not returning a value from\n * your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at\n * that location, so extreme care should be taken if mixing `set()` and\n * `runTransaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be\n * aware that a client needs `.read` access in addition to `.write` access in\n * order to perform a transaction. This is because the client-side nature of\n * transactions requires the client to read the data in order to transactionally\n * update it.\n *\n * @param ref - The location to atomically modify.\n * @param transactionUpdate - A developer-supplied function which will be passed\n * the current data stored at this location (as a JavaScript object). The\n * function should return the new value it would like written (as a JavaScript\n * object). If `undefined` is returned (i.e. you return with no arguments) the\n * transaction will be aborted and the data at this location will not be\n * modified.\n * @param options - An options object to configure transactions.\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\n * callback to handle success and failure.\n */\n\n\nfunction runTransaction(ref, // eslint-disable-next-line @typescript-eslint/no-explicit-any\ntransactionUpdate, options) {\n  var _a;\n\n  ref = getModularInstance(ref);\n  validateWritablePath('Reference.transaction', ref._path);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'Reference.transaction failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\n  const deferred = new Deferred();\n\n  const promiseComplete = (error, committed, node) => {\n    let dataSnapshot = null;\n\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  }; // Add a watch to make sure we get server updates.\n\n\n  const unwatcher = onValue(ref, () => {});\n  repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\n  return deferred.promise;\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nPersistentConnection; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\n  this.sendRequest('q', {\n    p: pathString\n  }, onComplete);\n}; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nPersistentConnection.prototype.echo = function (data, onEcho) {\n  this.sendRequest('echo', {\n    d: data\n  }, onEcho);\n}; // RealTimeConnection properties that we use in tests.\n\n\nConnection;\n/**\n * @internal\n */\n\nconst hijackHash = function (newHash) {\n  const oldPut = PersistentConnection.prototype.put;\n\n  PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nRepoInfo;\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\n\nconst forceRestClient = function (forceRestClient) {\n  repoManagerForceRestClient(forceRestClient);\n};\n/**\n * Firebase Realtime Database\n *\n * @packageDocumentation\n */\n\n\nregisterDatabase();\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, forceLongPolling, forceWebSockets, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };","map":{"version":3,"sources":["C:/Users/eKasi_TMB_COM00704/Downloads/hotelApp-main (1)/hotelApp-main/node_modules/@firebase/database/dist/index.esm2017.js"],"names":["getApp","_getProvider","SDK_VERSION","SDK_VERSION$1","_registerComponent","registerVersion","Component","stringify","jsonEval","contains","assert","isNodeSdk","base64","stringToByteArray","Sha1","deepCopy","base64Encode","isMobileCordova","stringLength","Deferred","safeGet","isAdmin","isValidFormat","isEmpty","isReactNative","assertionError","map","querystring","errorPrefix","getModularInstance","createMockUserToken","Logger","LogLevel","name","version","setSDKVersion","DOMStorageWrapper","constructor","domStorage_","prefix_","set","key","value","removeItem","prefixedName_","setItem","get","storedVal","getItem","remove","toString","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","logClient","LUIDGenerator","id","sha1","str","utf8Bytes","update","sha1Bytes","digest","encodeByteArray","buildLogMessage_","varArgs","message","i","length","arg","Array","isArray","apply","logger","firstLog_","enableLogging$1","logger_","persistent","logLevel","VERBOSE","log","bind","logWrapper","prefix","error","fatal","Error","warn","warnIfPageIsSecure","location","protocol","indexOf","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","executeWhenDOMReady","fn","document","readyState","called","wrappedFn","body","setTimeout","Math","floor","addEventListener","attachEvent","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","hasOwnProperty","doubleToIEEE754String","v","ebits","fbits","bias","s","f","ln","Infinity","abs","pow","min","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","isChromeExtensionContentScript","test","href","isWindowsStoreApp","Windows","UI","errorForServerCode","code","query","reason","_path","toUpperCase","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","intVal","exceptionGuard","stack","beingCrawled","userAgent","search","setTimeoutNonBlocking","time","timeout","Deno","unrefTimer","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getImmediate","optional","then","getToken","forceRefresh","Promise","resolve","reject","addTokenChangeListener","listener","_a","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","onInit","auth","catch","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN_RE","LAST_SESSION_PARAM","APPLICATION_ID_PARAM","APP_CHECK_TOKEN_PARAM","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","repoInfoNeedsQueryParam","repoInfo","repoInfoConnectionURL","type","params","connURL","pairs","StatsCollection","counters_","incrementCounter","amount","collections","reporters","statsManagerGetCollection","hashString","statsManagerGetOrCreateReporter","creatorFunction","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","callback","handleResponse","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","forceDisallow","forceDisallow_","isAvailable","createElement","markConnectionHealthy","shutdown_","close","myDisconnFrame","removeChild","send","dataStr","base64data","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","Set","pendingSegs","currentSerial","myIFrame","createIFrame_","script","currentDomain","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","size","theURL","curDataString","nextSeg","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","add","doNewRequest","delete","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript","async","onload","onreadystatechange","rstate","parentNode","onerror","WEBSOCKET_MAX_FRAME_SIZE","WEBSOCKET_KEEPALIVE_INTERVAL","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","options","device","headers","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","oldAndroidRegex","oldAndroidMatch","match","parseFloat","previouslyFailed","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","String","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","isWebSocketsAvailable","isSkipPollConnection","transports_","transports","transport","initialTransport","upgradeTransport","UPGRADE_TIMEOUT","DELAY_BEFORE_SENDING_EXTRA_REQUESTS","BYTES_SENT_HEALTHY_OVERRIDE","BYTES_RECEIVED_HEALTHY_OVERRIDE","MESSAGE_TYPE","MESSAGE_DATA","CONTROL_SHUTDOWN","CONTROL_RESET","CONTROL_ERROR","CONTROL_PONG","SWITCH_ACK","END_TRANSMISSION","PING","SERVER_HELLO","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","t","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","ServerActions","put","pathString","onComplete","hash","merge","refreshAuthToken","token","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","listeners_","trigger","eventType","listeners","context","on","validateEventType_","eventData","getInitialEvent","off","splice","find","et","OnlineMonitor","online_","getInstance","currentlyOnline","MAX_PATH_DEPTH","MAX_PATH_LENGTH_BYTES","Path","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathToUrlEncodedString","encodeURIComponent","pathSlice","begin","slice","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathCompare","left","right","leftKeys","rightKeys","cmp","pathEquals","other","j","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPathPush","validationPath","child","validationPathPop","last","pop","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","RECONNECT_MAX_DELAY_FOR_ADMINS","RECONNECT_DELAY_MULTIPLIER","RECONNECT_DELAY_RESET_TIMEOUT","SERVER_KILL_INTERRUPT_REASON","INVALID_TOKEN_THRESHOLD","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","Map","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","onVisible_","onOnline_","action","onResponse","curReqNum","r","initConnection_","deferred","request","p","q","_queryObject","outstandingGet","index","sendGet_","promise","listen","currentHashFn","tag","queryId","_queryIdentifier","has","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","currentListenSpec","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isFirebaseSecret","tryAppCheck","authMethod","requestData","cred","res","onAuthRevoked_","onAppCheckRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","undefined","sendPut_","queued","result","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","Date","getTime","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectSucceeded","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","all","interrupt","resume","delta","serverTimeOffset","normalizedPathString","statusCode","explanation","console","replace","queries","values","clientName","NamedNode","node","Wrap","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","val","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","n","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","LLRBEmptyNode","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE$2","setMaxNode$1","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","LeafNode","value_","priorityNode_","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","nodeFromJSON$1","MAX_NODE$1","setNodeFromJSON","setMaxNode","PriorityIndex","aPriority","bPriority","indexCmp","PRIORITY_INDEX","LOG_2","Base12Num","logBase2","num","bitMask","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","buildFrom12Array","base12","root","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","next","newIndex","indexName","newIndexSet","Object","assign","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","MAX_NODE","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","defineProperties","MAX","USE_HINZE","nodeFromJSON","json","jsonLeaf","children","childrenHavePriority","hinzeJsonObj","childSet","sortedChildSet","childData","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","ValueIndex","VALUE_INDEX","PUSH_CHARS","MIN_PUSH_CHAR","MAX_PUSH_CHAR","MAX_KEY_LEN","nextPushId","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","charAt","successor","keyAsInt","source","sourcePlusOne","repeat","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","changeChildMoved","IndexedFilter","index_","newChild","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","matches","filtered","self","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","inRange","indexCompare","foundStartPost","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","oldChildSnap","nextChild","getChildAfterChild","compareNext","remainsInWindow","newEventCache","nextChildInRange","QueryParams","limitSet_","startSet_","startNameSet_","startAfterSet_","endSet_","endNameSet_","endBeforeSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasStartAfter","hasEndBefore","hasLimit","hasAnchoredLimit","queryParamsGetNodeFilter","queryParams","queryParamsLimitToFirst","newLimit","newParams","queryParamsLimitToLast","queryParamsStartAt","queryParamsStartAfter","queryParamsEndAt","queryParamsEndBefore","queryParamsOrderBy","queryParamsToRestQueryStringParameters","qs","orderBy","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","getListenId_","listenId","thisListen","queryStringParameters","restRequest_","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForget","tree","safeToRemove","sparseSnapshotTreeForEachTree","prefixPath","func","sparseSnapshotTreeForEachChild","forEach","StatsListener","collection_","last_","newStats","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceUser","fromUser","fromServer","tagged","newOperationSourceServer","newOperationSourceServerTaggedQuery","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForChanges","eventGenerator","changes","eventCache","eventRegistrations","events","moves","change","eventGeneratorGenerateEventsForType","registrations","filteredChanges","filter","eventGeneratorCompareChanges","materializedChange","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","prevName","aWrapped","bWrapped","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","EmptyChildren","ImmutableTree","fromObject","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","fullPath","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","empty","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeAddOverwrite","writeId","lastWriteId","allWrites","visibleWrites","writeTreeAddMerge","changedChildren","writeTreeGetWrite","record","writeTreeRemoveWrite","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","writeTreeResetTree_","writeRecord","writeTreeLayerTree_","writeTreeDefaultFilter_","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","layeredCache","mergeAtPath","writeTreeCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcCompleteChild","writeTreeShadowingWrite","writeTreeCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeRefCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","from","NoCompleteChildSource_","getCompleteChild","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","newViewProcessor","viewProcessorAssertIndexed","viewProcessor","viewProcessorApplyOperation","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","overwrite","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","viewProcessorAckUserWrite","viewProcessorRevertUserWrite","viewProcessorListenComplete","viewProcessorMaybeAddValueEvent","isLeafOrEmpty","oldCompleteSnap","viewProcessorGenerateEventCacheAfterServerEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","newEventSnap","viewProcessorCacheHasChild","curViewCache","viewProcessorApplyMerge","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","mergePath","serverCachePath","oldServerNode","serverChildren","View","initialViewCache","eventRegistrations_","indexFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","viewGetServerCache","view","viewGetCompleteNode","viewGetCompleteServerCache","cache","viewIsEmpty","viewAddEventRegistration","eventRegistration","viewRemoveEventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewGenerateEventsForChanges_","viewGetInitialEvents","initialChanges","eventNode","referenceConstructor$1","SyncPoint","views","syncPointSetReferenceConstructor","syncPointGetReferenceConstructor","syncPointIsEmpty","syncPoint","syncPointApplyOperation","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","entries","_repo","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","referenceConstructor","syncTreeSetReferenceConstructor","syncTreeGetReferenceConstructor","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","syncTreeApplyOperationToSyncPoints_","syncTreeApplyUserMerge","changeTree","syncTreeAckUserWrite","needToReevaluate","syncTreeApplyServerOverwrite","syncTreeApplyServerMerge","syncTreeApplyListenComplete","syncTreeApplyTaggedListenComplete","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","op","syncTreeApplyTaggedOperation_","syncTreeRemoveEventRegistration","skipListenerDedup","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery","defaultTag","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyTaggedQueryMerge","syncTreeAddEventRegistration","skipSetupListener","foundAncestorDefaultView","pathToSyncPoint","sp","childSyncPoint","viewAlreadyExists","syncTreeGetNextQueryTag_","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","includeHiddenSets","syncTreeGetServerValue","serverCacheNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","splitIndex","maybeChildSyncPoint","childMap","completeView","_key","childViews","removedQuery","removedQueryKey","removedQueryTag","queriesToStop","childQueries","queryToStop","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","generateWithValues","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","unused","existingNode","leaf","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeIsEmpty","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeForEachAncestor","treeGetPath","treeUpdateChild","childEmpty","childExists","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidRootPathString","isValidPriority","validateFirebaseDataArg","fnName","validateFirebaseData","hasDotValue","hasActualChild","validateFirebaseMergePaths","mergePaths","curPath","prevPath","validateFirebaseMergeDataArg","errorPrefix$1","validatePriority","validateKey","argumentName","validatePathString","validateRootPathString","validateWritablePath","validateUrl","parsedUrl","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","MAX_TRANSACTION_RETRIES","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","appId","authOverride","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoOnServerInfoUpdate","statsReporter_","infoData_","infoSyncTree_","infoEvents","repoUpdateInfo","serverSyncTree_","repoServerTime","offsetNode","offset","repoGenerateServerValues","taggedChildren","raw","taggedSnap","repoRerunTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoGetValue","cached","err","repoLog","repoSetWithPriority","newVal","newNodeUnresolved","success","clearEvents","repoCallOnCompleteCallback","repoAbortTransactions","repoUpdate","childrenToMerge","changedKey","changedValue","resolvedOnDisconnectTree","resolved","repoOnDisconnectCancel","repoOnDisconnectSet","repoOnDisconnectSetWithPriority","repoOnDisconnectUpdate","repoAddEventCallbackForQuery","repoRemoveEventCallbackForQuery","repoInterrupt","repoResume","repoStartTransaction","transactionUpdate","unwatcher","applyLocally","transaction","order","retryCount","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","repoGetLatestState","queueNode","nodeQueue","priorityForNode","currentNode","repoSendReadyTransactions","excludeSets","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","allRun","every","repoSendTransactionQueue","setsToIgnore","txn","latestState","snapToSend","latestHash","dataToSend","pathToSend","callbacks","rootMostTransactionNode","repoGetAncestorTransactionNode","repoRerunTransactionQueue","txnsToRerun","abortTransaction","newDataNode","hasExplicitPriority","oldWriteId","newNodeResolved","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","to","repoAbortTransactionsOnNode","lastSent","decodePath","pathStringDecoded","piece","decodeURIComponent","decodeQuery","queryString","results","segment","kv","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","hostWithoutPort","dotInd","DataEvent","snapshot","ref","getEventType","exportVal","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","onValue","expDataSnapshot","previousChildName","call","onCancel","hasCancelCallback","userCallback","OnDisconnect","cancel","wrapCallback","setWithPriority","QueryImpl","_orderByCalled","ReferenceImpl","isEqual","sameRepo","samePath","sameQueryIdentifier","toJSON","validateNoPreviousOrderByCall","validateQueryEndpoints","startNode","endNode","tooManyArgsError","wrongArgTypeError","validateLimit","parentPath","DataSnapshot","_node","_index","childRef","exists","hasChildren","db","_checkNotDeleted","_root","refFromURL","parsedURL","thennablePushRef","pushRef","setPriority","callbackContext","container","ValueEventRegistration","ChildEventRegistration","eventToCheck","cancelCallbackOrListenOptions","onlyOnce","onceCallback","dataSnapshot","onChildAdded","onChildChanged","onChildMoved","onChildRemoved","expCallback","QueryConstraint","QueryEndAtConstraint","_value","_apply","endAt","QueryEndBeforeConstraint","endBefore","QueryStartAtConstraint","startAt","QueryStartAfterConstraint","startAfter","QueryLimitToFirstConstraint","_limit","limitToFirst","limit","QueryLimitToLastConstraint","limitToLast","QueryOrderByChildConstraint","parsedPath","orderByChild","QueryOrderByKeyConstraint","orderByKey","QueryOrderByPriorityConstraint","orderByPriority","QueryOrderByValueConstraint","orderByValue","QueryEqualToValueConstraint","equalTo","queryConstraints","queryImpl","constraint","FIREBASE_DATABASE_EMULATOR_HOST_VAR","repos","useRestClient","repoManagerApplyEmulatorSettings","tokenProvider","repoManagerDatabaseFromApp","app","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","repoManagerCreateRepo","Database","repoManagerDeleteRepo","appName","appRepos","repoManagerForceRestClient","forceRestClient","_repoInternal","_instanceStarted","_rootInternal","_delete","apiName","checkTransportInit","forceWebSockets","forceLongPolling","getDatabase","identifier","connectDatabaseEmulator","mockUserToken","goOffline","goOnline","enableLogging","registerDatabase","variant","instanceIdentifier","getProvider","setMultipleInstances","SERVER_TIMESTAMP","serverTimestamp","increment","TransactionResult","committed","runTransaction","promiseComplete","prototype","simpleListen","echo","onEcho","hijackHash","newHash","oldPut","_QueryImpl","_QueryParams","_ReferenceImpl","_TEST_ACCESS_forceRestClient","_TEST_ACCESS_hijackHash","_repoManagerDatabaseFromApp","_setSDKVersion","_validatePathString","_validateWritablePath"],"mappings":"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","sourcesContent":["import { getApp, _getProvider, SDK_VERSION as SDK_VERSION$1, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { stringify, jsonEval, contains, assert, isNodeSdk, base64, stringToByteArray, Sha1, deepCopy, base64Encode, isMobileCordova, stringLength, Deferred, safeGet, isAdmin, isValidFormat, isEmpty, isReactNative, assertionError, map, querystring, errorPrefix, getModularInstance, createMockUserToken } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\n\nconst name = \"@firebase/database\";\nconst version = \"0.13.6\";\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** The semver (www.semver.org) version of the SDK. */\nlet SDK_VERSION = '';\n/**\n * SDK_VERSION should be set before any database instance is created\n * @internal\n */\nfunction setSDKVersion(version) {\n    SDK_VERSION = version;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nclass DOMStorageWrapper {\n    /**\n     * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n     */\n    constructor(domStorage_) {\n        this.domStorage_ = domStorage_;\n        // Use a prefix to avoid collisions with other stuff saved by the app.\n        this.prefix_ = 'firebase:';\n    }\n    /**\n     * @param key - The key to save the value under\n     * @param value - The value being stored, or null to remove the key.\n     */\n    set(key, value) {\n        if (value == null) {\n            this.domStorage_.removeItem(this.prefixedName_(key));\n        }\n        else {\n            this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n        }\n    }\n    /**\n     * @returns The value that was stored under this key, or null\n     */\n    get(key) {\n        const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n        if (storedVal == null) {\n            return null;\n        }\n        else {\n            return jsonEval(storedVal);\n        }\n    }\n    remove(key) {\n        this.domStorage_.removeItem(this.prefixedName_(key));\n    }\n    prefixedName_(name) {\n        return this.prefix_ + name;\n    }\n    toString() {\n        return this.domStorage_.toString();\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nclass MemoryStorage {\n    constructor() {\n        this.cache_ = {};\n        this.isInMemoryStorage = true;\n    }\n    set(key, value) {\n        if (value == null) {\n            delete this.cache_[key];\n        }\n        else {\n            this.cache_[key] = value;\n        }\n    }\n    get(key) {\n        if (contains(this.cache_, key)) {\n            return this.cache_[key];\n        }\n        return null;\n    }\n    remove(key) {\n        delete this.cache_[key];\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (domStorageName) {\n    try {\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n        // so it must be inside the try/catch.\n        if (typeof window !== 'undefined' &&\n            typeof window[domStorageName] !== 'undefined') {\n            // Need to test cache. Just because it's here doesn't mean it works\n            const domStorage = window[domStorageName];\n            domStorage.setItem('firebase:sentinel', 'cache');\n            domStorage.removeItem('firebase:sentinel');\n            return new DOMStorageWrapper(domStorage);\n        }\n    }\n    catch (e) { }\n    // Failed to create wrapper.  Just return in-memory storage.\n    // TODO: log?\n    return new MemoryStorage();\n};\n/** A storage object that lasts across sessions */\nconst PersistentStorage = createStoragefor('localStorage');\n/** A storage object that only lasts one session */\nconst SessionStorage = createStoragefor('sessionStorage');\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst logClient = new Logger('@firebase/database');\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nconst LUIDGenerator = (function () {\n    let id = 1;\n    return function () {\n        return id++;\n    };\n})();\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nconst sha1 = function (str) {\n    const utf8Bytes = stringToByteArray(str);\n    const sha1 = new Sha1();\n    sha1.update(utf8Bytes);\n    const sha1Bytes = sha1.digest();\n    return base64.encodeByteArray(sha1Bytes);\n};\nconst buildLogMessage_ = function (...varArgs) {\n    let message = '';\n    for (let i = 0; i < varArgs.length; i++) {\n        const arg = varArgs[i];\n        if (Array.isArray(arg) ||\n            (arg &&\n                typeof arg === 'object' &&\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                typeof arg.length === 'number')) {\n            message += buildLogMessage_.apply(null, arg);\n        }\n        else if (typeof arg === 'object') {\n            message += stringify(arg);\n        }\n        else {\n            message += arg;\n        }\n        message += ' ';\n    }\n    return message;\n};\n/**\n * Use this for all debug messages in Firebase.\n */\nlet logger = null;\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nconst enableLogging$1 = function (logger_, persistent) {\n    assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\n    if (logger_ === true) {\n        logClient.logLevel = LogLevel.VERBOSE;\n        logger = logClient.log.bind(logClient);\n        if (persistent) {\n            SessionStorage.set('logging_enabled', true);\n        }\n    }\n    else if (typeof logger_ === 'function') {\n        logger = logger_;\n    }\n    else {\n        logger = null;\n        SessionStorage.remove('logging_enabled');\n    }\n};\nconst log = function (...varArgs) {\n    if (firstLog_ === true) {\n        firstLog_ = false;\n        if (logger === null && SessionStorage.get('logging_enabled') === true) {\n            enableLogging$1(true);\n        }\n    }\n    if (logger) {\n        const message = buildLogMessage_.apply(null, varArgs);\n        logger(message);\n    }\n};\nconst logWrapper = function (prefix) {\n    return function (...varArgs) {\n        log(prefix, ...varArgs);\n    };\n};\nconst error = function (...varArgs) {\n    const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n    logClient.error(message);\n};\nconst fatal = function (...varArgs) {\n    const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n    logClient.error(message);\n    throw new Error(message);\n};\nconst warn = function (...varArgs) {\n    const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n    logClient.warn(message);\n};\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nconst warnIfPageIsSecure = function () {\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\n    if (typeof window !== 'undefined' &&\n        window.location &&\n        window.location.protocol &&\n        window.location.protocol.indexOf('https:') !== -1) {\n        warn('Insecure Firebase access from a secure page. ' +\n            'Please use https in calls to new Firebase().');\n    }\n};\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nconst isInvalidJSONNumber = function (data) {\n    return (typeof data === 'number' &&\n        (data !== data || // NaN\n            data === Number.POSITIVE_INFINITY ||\n            data === Number.NEGATIVE_INFINITY));\n};\nconst executeWhenDOMReady = function (fn) {\n    if (isNodeSdk() || document.readyState === 'complete') {\n        fn();\n    }\n    else {\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n        // fire before onload), but fall back to onload.\n        let called = false;\n        const wrappedFn = function () {\n            if (!document.body) {\n                setTimeout(wrappedFn, Math.floor(10));\n                return;\n            }\n            if (!called) {\n                called = true;\n                fn();\n            }\n        };\n        if (document.addEventListener) {\n            document.addEventListener('DOMContentLoaded', wrappedFn, false);\n            // fallback to onload.\n            window.addEventListener('load', wrappedFn, false);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }\n        else if (document.attachEvent) {\n            // IE.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            document.attachEvent('onreadystatechange', () => {\n                if (document.readyState === 'complete') {\n                    wrappedFn();\n                }\n            });\n            // fallback to onload.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            window.attachEvent('onload', wrappedFn);\n            // jQuery has an extra hack for IE that we could employ (based on\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n            // I'm hoping we don't need it.\n        }\n    }\n};\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nconst MIN_NAME = '[MIN_NAME]';\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nconst MAX_NAME = '[MAX_NAME]';\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nconst nameCompare = function (a, b) {\n    if (a === b) {\n        return 0;\n    }\n    else if (a === MIN_NAME || b === MAX_NAME) {\n        return -1;\n    }\n    else if (b === MIN_NAME || a === MAX_NAME) {\n        return 1;\n    }\n    else {\n        const aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);\n        if (aAsInt !== null) {\n            if (bAsInt !== null) {\n                return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n            }\n            else {\n                return -1;\n            }\n        }\n        else if (bAsInt !== null) {\n            return 1;\n        }\n        else {\n            return a < b ? -1 : 1;\n        }\n    }\n};\n/**\n * @returns {!number} comparison result.\n */\nconst stringCompare = function (a, b) {\n    if (a === b) {\n        return 0;\n    }\n    else if (a < b) {\n        return -1;\n    }\n    else {\n        return 1;\n    }\n};\nconst requireKey = function (key, obj) {\n    if (obj && key in obj) {\n        return obj[key];\n    }\n    else {\n        throw new Error('Missing required key (' + key + ') in object: ' + stringify(obj));\n    }\n};\nconst ObjectToUniqueKey = function (obj) {\n    if (typeof obj !== 'object' || obj === null) {\n        return stringify(obj);\n    }\n    const keys = [];\n    // eslint-disable-next-line guard-for-in\n    for (const k in obj) {\n        keys.push(k);\n    }\n    // Export as json, but with the keys sorted.\n    keys.sort();\n    let key = '{';\n    for (let i = 0; i < keys.length; i++) {\n        if (i !== 0) {\n            key += ',';\n        }\n        key += stringify(keys[i]);\n        key += ':';\n        key += ObjectToUniqueKey(obj[keys[i]]);\n    }\n    key += '}';\n    return key;\n};\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nconst splitStringBySize = function (str, segsize) {\n    const len = str.length;\n    if (len <= segsize) {\n        return [str];\n    }\n    const dataSegs = [];\n    for (let c = 0; c < len; c += segsize) {\n        if (c + segsize > len) {\n            dataSegs.push(str.substring(c, len));\n        }\n        else {\n            dataSegs.push(str.substring(c, c + segsize));\n        }\n    }\n    return dataSegs;\n};\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nfunction each(obj, fn) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            fn(key, obj[key]);\n        }\n    }\n}\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nconst doubleToIEEE754String = function (v) {\n    assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n    const ebits = 11, fbits = 52;\n    const bias = (1 << (ebits - 1)) - 1;\n    let s, e, f, ln, i;\n    // Compute sign, exponent, fraction\n    // Skip NaN / Infinity handling --MJL.\n    if (v === 0) {\n        e = 0;\n        f = 0;\n        s = 1 / v === -Infinity ? 1 : 0;\n    }\n    else {\n        s = v < 0;\n        v = Math.abs(v);\n        if (v >= Math.pow(2, 1 - bias)) {\n            // Normalized\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n            e = ln + bias;\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n        }\n        else {\n            // Denormalized\n            e = 0;\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n        }\n    }\n    // Pack sign, exponent, fraction\n    const bits = [];\n    for (i = fbits; i; i -= 1) {\n        bits.push(f % 2 ? 1 : 0);\n        f = Math.floor(f / 2);\n    }\n    for (i = ebits; i; i -= 1) {\n        bits.push(e % 2 ? 1 : 0);\n        e = Math.floor(e / 2);\n    }\n    bits.push(s ? 1 : 0);\n    bits.reverse();\n    const str = bits.join('');\n    // Return the data as a hex string. --MJL\n    let hexByteString = '';\n    for (i = 0; i < 64; i += 8) {\n        let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n        if (hexByte.length === 1) {\n            hexByte = '0' + hexByte;\n        }\n        hexByteString = hexByteString + hexByte;\n    }\n    return hexByteString.toLowerCase();\n};\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nconst isChromeExtensionContentScript = function () {\n    return !!(typeof window === 'object' &&\n        window['chrome'] &&\n        window['chrome']['extension'] &&\n        !/^chrome/.test(window.location.href));\n};\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nconst isWindowsStoreApp = function () {\n    // Check for the presence of a couple WinRT globals\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n/**\n * Converts a server error code to a Javascript Error\n */\nfunction errorForServerCode(code, query) {\n    let reason = 'Unknown Error';\n    if (code === 'too_big') {\n        reason =\n            'The data requested exceeds the maximum size ' +\n                'that can be accessed with a single request.';\n    }\n    else if (code === 'permission_denied') {\n        reason = \"Client doesn't have permission to access the desired data.\";\n    }\n    else if (code === 'unavailable') {\n        reason = 'The service is unavailable';\n    }\n    const error = new Error(code + ' at ' + query._path.toString() + ': ' + reason);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    error.code = code.toUpperCase();\n    return error;\n}\n/**\n * Used to test for integer-looking strings\n */\nconst INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nconst INTEGER_32_MIN = -2147483648;\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nconst INTEGER_32_MAX = 2147483647;\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nconst tryParseInt = function (str) {\n    if (INTEGER_REGEXP_.test(str)) {\n        const intVal = Number(str);\n        if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n            return intVal;\n        }\n    }\n    return null;\n};\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nconst exceptionGuard = function (fn) {\n    try {\n        fn();\n    }\n    catch (e) {\n        // Re-throw exception when it's safe.\n        setTimeout(() => {\n            // It used to be that \"throw e\" would result in a good console error with\n            // relevant context, but as of Chrome 39, you just get the firebase.js\n            // file/line number where we re-throw it, which is useless. So we log\n            // e.stack explicitly.\n            const stack = e.stack || '';\n            warn('Exception was thrown by user callback.', stack);\n            throw e;\n        }, Math.floor(0));\n    }\n};\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nconst beingCrawled = function () {\n    const userAgent = (typeof window === 'object' &&\n        window['navigator'] &&\n        window['navigator']['userAgent']) ||\n        '';\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n    // believe to support JavaScript/AJAX rendering.\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\n};\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nconst setTimeoutNonBlocking = function (fn, time) {\n    const timeout = setTimeout(fn, time);\n    // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n    if (typeof timeout === 'number' &&\n        // @ts-ignore Is only defined in Deno environments.\n        typeof Deno !== 'undefined' &&\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n        Deno['unrefTimer']) {\n        // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n        Deno.unrefTimer(timeout);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }\n    else if (typeof timeout === 'object' && timeout['unref']) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        timeout['unref']();\n    }\n    return timeout;\n};\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nclass AppCheckTokenProvider {\n    constructor(appName_, appCheckProvider) {\n        this.appName_ = appName_;\n        this.appCheckProvider = appCheckProvider;\n        this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });\n        if (!this.appCheck) {\n            appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(appCheck => (this.appCheck = appCheck));\n        }\n    }\n    getToken(forceRefresh) {\n        if (!this.appCheck) {\n            return new Promise((resolve, reject) => {\n                // Support delayed initialization of FirebaseAppCheck. This allows our\n                // customers to initialize the RTDB SDK before initializing Firebase\n                // AppCheck and ensures that all requests are authenticated if a token\n                // becomes available before the timoeout below expires.\n                setTimeout(() => {\n                    if (this.appCheck) {\n                        this.getToken(forceRefresh).then(resolve, reject);\n                    }\n                    else {\n                        resolve(null);\n                    }\n                }, 0);\n            });\n        }\n        return this.appCheck.getToken(forceRefresh);\n    }\n    addTokenChangeListener(listener) {\n        var _a;\n        (_a = this.appCheckProvider) === null || _a === void 0 ? void 0 : _a.get().then(appCheck => appCheck.addTokenListener(listener));\n    }\n    notifyForInvalidToken() {\n        warn(`Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n            'are invalid. This usually indicates your app was not initialized correctly.');\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nclass FirebaseAuthTokenProvider {\n    constructor(appName_, firebaseOptions_, authProvider_) {\n        this.appName_ = appName_;\n        this.firebaseOptions_ = firebaseOptions_;\n        this.authProvider_ = authProvider_;\n        this.auth_ = null;\n        this.auth_ = authProvider_.getImmediate({ optional: true });\n        if (!this.auth_) {\n            authProvider_.onInit(auth => (this.auth_ = auth));\n        }\n    }\n    getToken(forceRefresh) {\n        if (!this.auth_) {\n            return new Promise((resolve, reject) => {\n                // Support delayed initialization of FirebaseAuth. This allows our\n                // customers to initialize the RTDB SDK before initializing Firebase\n                // Auth and ensures that all requests are authenticated if a token\n                // becomes available before the timoeout below expires.\n                setTimeout(() => {\n                    if (this.auth_) {\n                        this.getToken(forceRefresh).then(resolve, reject);\n                    }\n                    else {\n                        resolve(null);\n                    }\n                }, 0);\n            });\n        }\n        return this.auth_.getToken(forceRefresh).catch(error => {\n            // TODO: Need to figure out all the cases this is raised and whether\n            // this makes sense.\n            if (error && error.code === 'auth/token-not-initialized') {\n                log('Got auth/token-not-initialized error.  Treating as null token.');\n                return null;\n            }\n            else {\n                return Promise.reject(error);\n            }\n        });\n    }\n    addTokenChangeListener(listener) {\n        // TODO: We might want to wrap the listener and call it with no args to\n        // avoid a leaky abstraction, but that makes removing the listener harder.\n        if (this.auth_) {\n            this.auth_.addAuthTokenListener(listener);\n        }\n        else {\n            this.authProvider_\n                .get()\n                .then(auth => auth.addAuthTokenListener(listener));\n        }\n    }\n    removeTokenChangeListener(listener) {\n        this.authProvider_\n            .get()\n            .then(auth => auth.removeAuthTokenListener(listener));\n    }\n    notifyForInvalidToken() {\n        let errorMessage = 'Provided authentication credentials for the app named \"' +\n            this.appName_ +\n            '\" are invalid. This usually indicates your app was not ' +\n            'initialized correctly. ';\n        if ('credential' in this.firebaseOptions_) {\n            errorMessage +=\n                'Make sure the \"credential\" property provided to initializeApp() ' +\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n                    'project.';\n        }\n        else if ('serviceAccount' in this.firebaseOptions_) {\n            errorMessage +=\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n                    'project.';\n        }\n        else {\n            errorMessage +=\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n                    'initializeApp() match the values provided for your app at ' +\n                    'https://console.firebase.google.com/.';\n        }\n        warn(errorMessage);\n    }\n}\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nclass EmulatorTokenProvider {\n    constructor(accessToken) {\n        this.accessToken = accessToken;\n    }\n    getToken(forceRefresh) {\n        return Promise.resolve({\n            accessToken: this.accessToken\n        });\n    }\n    addTokenChangeListener(listener) {\n        // Invoke the listener immediately to match the behavior in Firebase Auth\n        // (see packages/auth/src/auth.js#L1807)\n        listener(this.accessToken);\n    }\n    removeTokenChangeListener(listener) { }\n    notifyForInvalidToken() { }\n}\n/** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\nEmulatorTokenProvider.OWNER = 'owner';\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst PROTOCOL_VERSION = '5';\nconst VERSION_PARAM = 'v';\nconst TRANSPORT_SESSION_PARAM = 's';\nconst REFERER_PARAM = 'r';\nconst FORGE_REF = 'f';\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nconst FORGE_DOMAIN_RE = /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\nconst LAST_SESSION_PARAM = 'ls';\nconst APPLICATION_ID_PARAM = 'p';\nconst APP_CHECK_TOKEN_PARAM = 'ac';\nconst WEBSOCKET = 'websocket';\nconst LONG_POLLING = 'long_polling';\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A class that holds metadata about a Repo object\n */\nclass RepoInfo {\n    /**\n     * @param host - Hostname portion of the url for the repo\n     * @param secure - Whether or not this repo is accessed over ssl\n     * @param namespace - The namespace represented by the repo\n     * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n     * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n     * @param persistenceKey - Override the default session persistence storage key\n     */\n    constructor(host, secure, namespace, webSocketOnly, nodeAdmin = false, persistenceKey = '', includeNamespaceInQueryParams = false) {\n        this.secure = secure;\n        this.namespace = namespace;\n        this.webSocketOnly = webSocketOnly;\n        this.nodeAdmin = nodeAdmin;\n        this.persistenceKey = persistenceKey;\n        this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\n        this._host = host.toLowerCase();\n        this._domain = this._host.substr(this._host.indexOf('.') + 1);\n        this.internalHost =\n            PersistentStorage.get('host:' + host) || this._host;\n    }\n    isCacheableHost() {\n        return this.internalHost.substr(0, 2) === 's-';\n    }\n    isCustomHost() {\n        return (this._domain !== 'firebaseio.com' &&\n            this._domain !== 'firebaseio-demo.com');\n    }\n    get host() {\n        return this._host;\n    }\n    set host(newHost) {\n        if (newHost !== this.internalHost) {\n            this.internalHost = newHost;\n            if (this.isCacheableHost()) {\n                PersistentStorage.set('host:' + this._host, this.internalHost);\n            }\n        }\n    }\n    toString() {\n        let str = this.toURLString();\n        if (this.persistenceKey) {\n            str += '<' + this.persistenceKey + '>';\n        }\n        return str;\n    }\n    toURLString() {\n        const protocol = this.secure ? 'https://' : 'http://';\n        const query = this.includeNamespaceInQueryParams\n            ? `?ns=${this.namespace}`\n            : '';\n        return `${protocol}${this.host}/${query}`;\n    }\n}\nfunction repoInfoNeedsQueryParam(repoInfo) {\n    return (repoInfo.host !== repoInfo.internalHost ||\n        repoInfo.isCustomHost() ||\n        repoInfo.includeNamespaceInQueryParams);\n}\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nfunction repoInfoConnectionURL(repoInfo, type, params) {\n    assert(typeof type === 'string', 'typeof type must == string');\n    assert(typeof params === 'object', 'typeof params must == object');\n    let connURL;\n    if (type === WEBSOCKET) {\n        connURL =\n            (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n    }\n    else if (type === LONG_POLLING) {\n        connURL =\n            (repoInfo.secure ? 'https://' : 'http://') +\n                repoInfo.internalHost +\n                '/.lp?';\n    }\n    else {\n        throw new Error('Unknown connection type: ' + type);\n    }\n    if (repoInfoNeedsQueryParam(repoInfo)) {\n        params['ns'] = repoInfo.namespace;\n    }\n    const pairs = [];\n    each(params, (key, value) => {\n        pairs.push(key + '=' + value);\n    });\n    return connURL + pairs.join('&');\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Tracks a collection of stats.\n */\nclass StatsCollection {\n    constructor() {\n        this.counters_ = {};\n    }\n    incrementCounter(name, amount = 1) {\n        if (!contains(this.counters_, name)) {\n            this.counters_[name] = 0;\n        }\n        this.counters_[name] += amount;\n    }\n    get() {\n        return deepCopy(this.counters_);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst collections = {};\nconst reporters = {};\nfunction statsManagerGetCollection(repoInfo) {\n    const hashString = repoInfo.toString();\n    if (!collections[hashString]) {\n        collections[hashString] = new StatsCollection();\n    }\n    return collections[hashString];\n}\nfunction statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {\n    const hashString = repoInfo.toString();\n    if (!reporters[hashString]) {\n        reporters[hashString] = creatorFunction();\n    }\n    return reporters[hashString];\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nclass PacketReceiver {\n    /**\n     * @param onMessage_\n     */\n    constructor(onMessage_) {\n        this.onMessage_ = onMessage_;\n        this.pendingResponses = [];\n        this.currentResponseNum = 0;\n        this.closeAfterResponse = -1;\n        this.onClose = null;\n    }\n    closeAfter(responseNum, callback) {\n        this.closeAfterResponse = responseNum;\n        this.onClose = callback;\n        if (this.closeAfterResponse < this.currentResponseNum) {\n            this.onClose();\n            this.onClose = null;\n        }\n    }\n    /**\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n     * browsers will respond in the same order as the requests we sent\n     */\n    handleResponse(requestNum, data) {\n        this.pendingResponses[requestNum] = data;\n        while (this.pendingResponses[this.currentResponseNum]) {\n            const toProcess = this.pendingResponses[this.currentResponseNum];\n            delete this.pendingResponses[this.currentResponseNum];\n            for (let i = 0; i < toProcess.length; ++i) {\n                if (toProcess[i]) {\n                    exceptionGuard(() => {\n                        this.onMessage_(toProcess[i]);\n                    });\n                }\n            }\n            if (this.currentResponseNum === this.closeAfterResponse) {\n                if (this.onClose) {\n                    this.onClose();\n                    this.onClose = null;\n                }\n                break;\n            }\n            this.currentResponseNum++;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// URL query parameters associated with longpolling\nconst FIREBASE_LONGPOLL_START_PARAM = 'start';\nconst FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nconst FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nconst FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nconst FIREBASE_LONGPOLL_ID_PARAM = 'id';\nconst FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nconst FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nconst FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nconst FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nconst FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nconst FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nconst FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n/**\n * This class manages a single long-polling connection.\n */\nclass BrowserPollConnection {\n    /**\n     * @param connId An identifier for this connection, used for logging\n     * @param repoInfo The info for the endpoint to send data to.\n     * @param applicationId The Firebase App ID for this project.\n     * @param appCheckToken The AppCheck token for this client.\n     * @param authToken The AuthToken to use for this connection.\n     * @param transportSessionId Optional transportSessionid if we are\n     * reconnecting for an existing transport session\n     * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n     * already created a connection previously\n     */\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n        this.connId = connId;\n        this.repoInfo = repoInfo;\n        this.applicationId = applicationId;\n        this.appCheckToken = appCheckToken;\n        this.authToken = authToken;\n        this.transportSessionId = transportSessionId;\n        this.lastSessionId = lastSessionId;\n        this.bytesSent = 0;\n        this.bytesReceived = 0;\n        this.everConnected_ = false;\n        this.log_ = logWrapper(connId);\n        this.stats_ = statsManagerGetCollection(repoInfo);\n        this.urlFn = (params) => {\n            // Always add the token if we have one.\n            if (this.appCheckToken) {\n                params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n            }\n            return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n        };\n    }\n    /**\n     * @param onMessage - Callback when messages arrive\n     * @param onDisconnect - Callback with connection lost.\n     */\n    open(onMessage, onDisconnect) {\n        this.curSegmentNum = 0;\n        this.onDisconnect_ = onDisconnect;\n        this.myPacketOrderer = new PacketReceiver(onMessage);\n        this.isClosed_ = false;\n        this.connectTimeoutTimer_ = setTimeout(() => {\n            this.log_('Timed out trying to connect.');\n            // Make sure we clear the host cache\n            this.onClosed_();\n            this.connectTimeoutTimer_ = null;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }, Math.floor(LP_CONNECT_TIMEOUT));\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\n        executeWhenDOMReady(() => {\n            if (this.isClosed_) {\n                return;\n            }\n            //Set up a callback that gets triggered once a connection is set up.\n            this.scriptTagHolder = new FirebaseIFrameScriptHolder((...args) => {\n                const [command, arg1, arg2, arg3, arg4] = args;\n                this.incrementIncomingBytes_(args);\n                if (!this.scriptTagHolder) {\n                    return; // we closed the connection.\n                }\n                if (this.connectTimeoutTimer_) {\n                    clearTimeout(this.connectTimeoutTimer_);\n                    this.connectTimeoutTimer_ = null;\n                }\n                this.everConnected_ = true;\n                if (command === FIREBASE_LONGPOLL_START_PARAM) {\n                    this.id = arg1;\n                    this.password = arg2;\n                }\n                else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\n                    if (arg1) {\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\n                        // through our already open polls), so don't send any more.\n                        this.scriptTagHolder.sendNewPolls = false;\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\n                        // all of the responses up to this one before closing\n                        this.myPacketOrderer.closeAfter(arg1, () => {\n                            this.onClosed_();\n                        });\n                    }\n                    else {\n                        this.onClosed_();\n                    }\n                }\n                else {\n                    throw new Error('Unrecognized command received: ' + command);\n                }\n            }, (...args) => {\n                const [pN, data] = args;\n                this.incrementIncomingBytes_(args);\n                this.myPacketOrderer.handleResponse(pN, data);\n            }, () => {\n                this.onClosed_();\n            }, this.urlFn);\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n            //from cache.\n            const urlParams = {};\n            urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\n            if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n                urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n                    this.scriptTagHolder.uniqueCallbackIdentifier;\n            }\n            urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n            if (this.transportSessionId) {\n                urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n            }\n            if (this.lastSessionId) {\n                urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n            }\n            if (this.applicationId) {\n                urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n            }\n            if (this.appCheckToken) {\n                urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n            }\n            if (typeof location !== 'undefined' &&\n                location.hostname &&\n                FORGE_DOMAIN_RE.test(location.hostname)) {\n                urlParams[REFERER_PARAM] = FORGE_REF;\n            }\n            const connectURL = this.urlFn(urlParams);\n            this.log_('Connecting via long-poll to ' + connectURL);\n            this.scriptTagHolder.addTag(connectURL, () => {\n                /* do nothing */\n            });\n        });\n    }\n    /**\n     * Call this when a handshake has completed successfully and we want to consider the connection established\n     */\n    start() {\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\n        this.addDisconnectPingFrame(this.id, this.password);\n    }\n    /**\n     * Forces long polling to be considered as a potential transport\n     */\n    static forceAllow() {\n        BrowserPollConnection.forceAllow_ = true;\n    }\n    /**\n     * Forces longpolling to not be considered as a potential transport\n     */\n    static forceDisallow() {\n        BrowserPollConnection.forceDisallow_ = true;\n    }\n    // Static method, use string literal so it can be accessed in a generic way\n    static isAvailable() {\n        if (isNodeSdk()) {\n            return false;\n        }\n        else if (BrowserPollConnection.forceAllow_) {\n            return true;\n        }\n        else {\n            // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n            // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n            return (!BrowserPollConnection.forceDisallow_ &&\n                typeof document !== 'undefined' &&\n                document.createElement != null &&\n                !isChromeExtensionContentScript() &&\n                !isWindowsStoreApp());\n        }\n    }\n    /**\n     * No-op for polling\n     */\n    markConnectionHealthy() { }\n    /**\n     * Stops polling and cleans up the iframe\n     */\n    shutdown_() {\n        this.isClosed_ = true;\n        if (this.scriptTagHolder) {\n            this.scriptTagHolder.close();\n            this.scriptTagHolder = null;\n        }\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n        if (this.myDisconnFrame) {\n            document.body.removeChild(this.myDisconnFrame);\n            this.myDisconnFrame = null;\n        }\n        if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n        }\n    }\n    /**\n     * Triggered when this transport is closed\n     */\n    onClosed_() {\n        if (!this.isClosed_) {\n            this.log_('Longpoll is closing itself');\n            this.shutdown_();\n            if (this.onDisconnect_) {\n                this.onDisconnect_(this.everConnected_);\n                this.onDisconnect_ = null;\n            }\n        }\n    }\n    /**\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n     * that we've left.\n     */\n    close() {\n        if (!this.isClosed_) {\n            this.log_('Longpoll is being closed.');\n            this.shutdown_();\n        }\n    }\n    /**\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n     * broken into chunks (since URLs have a small maximum length).\n     * @param data - The JSON data to transmit.\n     */\n    send(data) {\n        const dataStr = stringify(data);\n        this.bytesSent += dataStr.length;\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\n        //first, lets get the base64-encoded data\n        const base64data = base64Encode(dataStr);\n        //We can only fit a certain amount in each URL, so we need to split this request\n        //up into multiple pieces if it doesn't fit in one request.\n        const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n        //of segments so that we can reassemble the packet on the server.\n        for (let i = 0; i < dataSegs.length; i++) {\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\n            this.curSegmentNum++;\n        }\n    }\n    /**\n     * This is how we notify the server that we're leaving.\n     * We aren't able to send requests with DHTML on a window close event, but we can\n     * trigger XHR requests in some browsers (everything but Opera basically).\n     */\n    addDisconnectPingFrame(id, pw) {\n        if (isNodeSdk()) {\n            return;\n        }\n        this.myDisconnFrame = document.createElement('iframe');\n        const urlParams = {};\n        urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n        urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n        urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n        this.myDisconnFrame.src = this.urlFn(urlParams);\n        this.myDisconnFrame.style.display = 'none';\n        document.body.appendChild(this.myDisconnFrame);\n    }\n    /**\n     * Used to track the bytes received by this client\n     */\n    incrementIncomingBytes_(args) {\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n        const bytesReceived = stringify(args).length;\n        this.bytesReceived += bytesReceived;\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\n    }\n}\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nclass FirebaseIFrameScriptHolder {\n    /**\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\n     */\n    constructor(commandCB, onMessageCB, onDisconnect, urlFn) {\n        this.onDisconnect = onDisconnect;\n        this.urlFn = urlFn;\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n        //problems in some browsers.\n        this.outstandingRequests = new Set();\n        //A queue of the pending segments waiting for transmission to the server.\n        this.pendingSegs = [];\n        //A serial number. We use this for two things:\n        // 1) A way to ensure the browser doesn't cache responses to polls\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n        //    JSONP code in the order it was added to the iframe.\n        this.currentSerial = Math.floor(Math.random() * 100000000);\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n        // incoming data from the server that we're waiting for).\n        this.sendNewPolls = true;\n        if (!isNodeSdk()) {\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n            //iframes where we put the long-polling script tags. We have two callbacks:\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\n            //   2) Message Callback - Triggered when new data arrives.\n            this.uniqueCallbackIdentifier = LUIDGenerator();\n            window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\n            window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n                onMessageCB;\n            //Create an iframe for us to add script tags to.\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n            // Set the iframe's contents.\n            let script = '';\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n            // for ie9, but ie8 needs to do it again in the document itself.\n            if (this.myIFrame.src &&\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\n                const currentDomain = document.domain;\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n            }\n            const iframeContents = '<html><body>' + script + '</body></html>';\n            try {\n                this.myIFrame.doc.open();\n                this.myIFrame.doc.write(iframeContents);\n                this.myIFrame.doc.close();\n            }\n            catch (e) {\n                log('frame writing exception');\n                if (e.stack) {\n                    log(e.stack);\n                }\n                log(e);\n            }\n        }\n        else {\n            this.commandCB = commandCB;\n            this.onMessageCB = onMessageCB;\n        }\n    }\n    /**\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n     * actually use.\n     */\n    static createIFrame_() {\n        const iframe = document.createElement('iframe');\n        iframe.style.display = 'none';\n        // This is necessary in order to initialize the document inside the iframe\n        if (document.body) {\n            document.body.appendChild(iframe);\n            try {\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n                const a = iframe.contentWindow.document;\n                if (!a) {\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n                    log('No IE domain setting required');\n                }\n            }\n            catch (e) {\n                const domain = document.domain;\n                iframe.src =\n                    \"javascript:void((function(){document.open();document.domain='\" +\n                        domain +\n                        \"';document.close();})())\";\n            }\n        }\n        else {\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n            // never gets hit.\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n        }\n        // Get the document of the iframe in a browser-specific way.\n        if (iframe.contentDocument) {\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n        }\n        else if (iframe.contentWindow) {\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }\n        else if (iframe.document) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            iframe.doc = iframe.document; //others?\n        }\n        return iframe;\n    }\n    /**\n     * Cancel all outstanding queries and remove the frame.\n     */\n    close() {\n        //Mark this iframe as dead, so no new requests are sent.\n        this.alive = false;\n        if (this.myIFrame) {\n            //We have to actually remove all of the html inside this iframe before removing it from the\n            //window, or IE will continue loading and executing the script tags we've already added, which\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n            this.myIFrame.doc.body.innerHTML = '';\n            setTimeout(() => {\n                if (this.myIFrame !== null) {\n                    document.body.removeChild(this.myIFrame);\n                    this.myIFrame = null;\n                }\n            }, Math.floor(0));\n        }\n        // Protect from being called recursively.\n        const onDisconnect = this.onDisconnect;\n        if (onDisconnect) {\n            this.onDisconnect = null;\n            onDisconnect();\n        }\n    }\n    /**\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n     * @param id - The ID of this connection\n     * @param pw - The password for this connection\n     */\n    startLongPoll(id, pw) {\n        this.myID = id;\n        this.myPW = pw;\n        this.alive = true;\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n        while (this.newRequest_()) { }\n    }\n    /**\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n     * too many outstanding requests and we are still alive.\n     *\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n     * needed.\n     */\n    newRequest_() {\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n        // close the old request.\n        if (this.alive &&\n            this.sendNewPolls &&\n            this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\n            //construct our url\n            this.currentSerial++;\n            const urlParams = {};\n            urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n            urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n            urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n            let theURL = this.urlFn(urlParams);\n            //Now add as much data as we can.\n            let curDataString = '';\n            let i = 0;\n            while (this.pendingSegs.length > 0) {\n                //first, lets see if the next segment will fit.\n                const nextSeg = this.pendingSegs[0];\n                if (nextSeg.d.length +\n                    SEG_HEADER_SIZE +\n                    curDataString.length <=\n                    MAX_URL_DATA_SIZE) {\n                    //great, the segment will fit. Lets append it.\n                    const theSeg = this.pendingSegs.shift();\n                    curDataString =\n                        curDataString +\n                            '&' +\n                            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n                            i +\n                            '=' +\n                            theSeg.seg +\n                            '&' +\n                            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n                            i +\n                            '=' +\n                            theSeg.ts +\n                            '&' +\n                            FIREBASE_LONGPOLL_DATA_PARAM +\n                            i +\n                            '=' +\n                            theSeg.d;\n                    i++;\n                }\n                else {\n                    break;\n                }\n            }\n            theURL = theURL + curDataString;\n            this.addLongPollTag_(theURL, this.currentSerial);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Queue a packet for transmission to the server.\n     * @param segnum - A sequential id for this packet segment used for reassembly\n     * @param totalsegs - The total number of segments in this packet\n     * @param data - The data for this segment.\n     */\n    enqueueSegment(segnum, totalsegs, data) {\n        //add this to the queue of segments to send.\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n        //send the data immediately if there isn't already data being transmitted, unless\n        //startLongPoll hasn't been called yet.\n        if (this.alive) {\n            this.newRequest_();\n        }\n    }\n    /**\n     * Add a script tag for a regular long-poll request.\n     * @param url - The URL of the script tag.\n     * @param serial - The serial number of the request.\n     */\n    addLongPollTag_(url, serial) {\n        //remember that we sent this request.\n        this.outstandingRequests.add(serial);\n        const doNewRequest = () => {\n            this.outstandingRequests.delete(serial);\n            this.newRequest_();\n        };\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n        const keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\n        const readyStateCB = () => {\n            // Request completed.  Cancel the keepalive.\n            clearTimeout(keepaliveTimeout);\n            // Trigger a new request so we can continue receiving data.\n            doNewRequest();\n        };\n        this.addTag(url, readyStateCB);\n    }\n    /**\n     * Add an arbitrary script tag to the iframe.\n     * @param url - The URL for the script tag source.\n     * @param loadCB - A callback to be triggered once the script has loaded.\n     */\n    addTag(url, loadCB) {\n        if (isNodeSdk()) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.doNodeLongPoll(url, loadCB);\n        }\n        else {\n            setTimeout(() => {\n                try {\n                    // if we're already closed, don't add this poll\n                    if (!this.sendNewPolls) {\n                        return;\n                    }\n                    const newScript = this.myIFrame.doc.createElement('script');\n                    newScript.type = 'text/javascript';\n                    newScript.async = true;\n                    newScript.src = url;\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    newScript.onload = newScript.onreadystatechange =\n                        function () {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            const rstate = newScript.readyState;\n                            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                newScript.onload = newScript.onreadystatechange = null;\n                                if (newScript.parentNode) {\n                                    newScript.parentNode.removeChild(newScript);\n                                }\n                                loadCB();\n                            }\n                        };\n                    newScript.onerror = () => {\n                        log('Long-poll script failed to load: ' + url);\n                        this.sendNewPolls = false;\n                        this.close();\n                    };\n                    this.myIFrame.doc.body.appendChild(newScript);\n                }\n                catch (e) {\n                    // TODO: we should make this error visible somehow\n                }\n            }, Math.floor(1));\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n    WebSocketImpl = MozWebSocket;\n}\nelse if (typeof WebSocket !== 'undefined') {\n    WebSocketImpl = WebSocket;\n}\n/**\n * Create a new websocket connection with the given callbacks.\n */\nclass WebSocketConnection {\n    /**\n     * @param connId identifier for this transport\n     * @param repoInfo The info for the websocket endpoint.\n     * @param applicationId The Firebase App ID for this project.\n     * @param appCheckToken The App Check Token for this client.\n     * @param authToken The Auth Token for this client.\n     * @param transportSessionId Optional transportSessionId if this is connecting\n     * to an existing transport session\n     * @param lastSessionId Optional lastSessionId if there was a previous\n     * connection\n     */\n    constructor(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {\n        this.connId = connId;\n        this.applicationId = applicationId;\n        this.appCheckToken = appCheckToken;\n        this.authToken = authToken;\n        this.keepaliveTimer = null;\n        this.frames = null;\n        this.totalFrames = 0;\n        this.bytesSent = 0;\n        this.bytesReceived = 0;\n        this.log_ = logWrapper(this.connId);\n        this.stats_ = statsManagerGetCollection(repoInfo);\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId);\n        this.nodeAdmin = repoInfo.nodeAdmin;\n    }\n    /**\n     * @param repoInfo - The info for the websocket endpoint.\n     * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n     *                                         session\n     * @param lastSessionId - Optional lastSessionId if there was a previous connection\n     * @returns connection url\n     */\n    static connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken, applicationId) {\n        const urlParams = {};\n        urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n        if (!isNodeSdk() &&\n            typeof location !== 'undefined' &&\n            location.hostname &&\n            FORGE_DOMAIN_RE.test(location.hostname)) {\n            urlParams[REFERER_PARAM] = FORGE_REF;\n        }\n        if (transportSessionId) {\n            urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n        }\n        if (lastSessionId) {\n            urlParams[LAST_SESSION_PARAM] = lastSessionId;\n        }\n        if (appCheckToken) {\n            urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n        }\n        if (applicationId) {\n            urlParams[APPLICATION_ID_PARAM] = applicationId;\n        }\n        return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n    }\n    /**\n     * @param onMessage - Callback when messages arrive\n     * @param onDisconnect - Callback with connection lost.\n     */\n    open(onMessage, onDisconnect) {\n        this.onDisconnect = onDisconnect;\n        this.onMessage = onMessage;\n        this.log_('Websocket connecting to ' + this.connURL);\n        this.everConnected_ = false;\n        // Assume failure until proven otherwise.\n        PersistentStorage.set('previous_websocket_failure', true);\n        try {\n            let options;\n            if (isNodeSdk()) {\n                const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n                options = {\n                    headers: {\n                        'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n                        'X-Firebase-GMPID': this.applicationId || ''\n                    }\n                };\n                // If using Node with admin creds, AppCheck-related checks are unnecessary.\n                // Note that we send the credentials here even if they aren't admin credentials, which is\n                // not a problem.\n                // Note that this header is just used to bypass appcheck, and the token should still be sent\n                // through the websocket connection once it is established.\n                if (this.authToken) {\n                    options.headers['Authorization'] = `Bearer ${this.authToken}`;\n                }\n                if (this.appCheckToken) {\n                    options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n                }\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n                const env = process['env'];\n                const proxy = this.connURL.indexOf('wss://') === 0\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\n                    : env['HTTP_PROXY'] || env['http_proxy'];\n                if (proxy) {\n                    options['proxy'] = { origin: proxy };\n                }\n            }\n            this.mySock = new WebSocketImpl(this.connURL, [], options);\n        }\n        catch (e) {\n            this.log_('Error instantiating WebSocket.');\n            const error = e.message || e.data;\n            if (error) {\n                this.log_(error);\n            }\n            this.onClosed_();\n            return;\n        }\n        this.mySock.onopen = () => {\n            this.log_('Websocket connected.');\n            this.everConnected_ = true;\n        };\n        this.mySock.onclose = () => {\n            this.log_('Websocket connection was disconnected.');\n            this.mySock = null;\n            this.onClosed_();\n        };\n        this.mySock.onmessage = m => {\n            this.handleIncomingFrame(m);\n        };\n        this.mySock.onerror = e => {\n            this.log_('WebSocket error.  Closing connection.');\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const error = e.message || e.data;\n            if (error) {\n                this.log_(error);\n            }\n            this.onClosed_();\n        };\n    }\n    /**\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n     */\n    start() { }\n    static forceDisallow() {\n        WebSocketConnection.forceDisallow_ = true;\n    }\n    static isAvailable() {\n        let isOldAndroid = false;\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\n            const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n            const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n                    isOldAndroid = true;\n                }\n            }\n        }\n        return (!isOldAndroid &&\n            WebSocketImpl !== null &&\n            !WebSocketConnection.forceDisallow_);\n    }\n    /**\n     * Returns true if we previously failed to connect with this transport.\n     */\n    static previouslyFailed() {\n        // If our persistent storage is actually only in-memory storage,\n        // we default to assuming that it previously failed to be safe.\n        return (PersistentStorage.isInMemoryStorage ||\n            PersistentStorage.get('previous_websocket_failure') === true);\n    }\n    markConnectionHealthy() {\n        PersistentStorage.remove('previous_websocket_failure');\n    }\n    appendFrame_(data) {\n        this.frames.push(data);\n        if (this.frames.length === this.totalFrames) {\n            const fullMess = this.frames.join('');\n            this.frames = null;\n            const jsonMess = jsonEval(fullMess);\n            //handle the message\n            this.onMessage(jsonMess);\n        }\n    }\n    /**\n     * @param frameCount - The number of frames we are expecting from the server\n     */\n    handleNewFrameCount_(frameCount) {\n        this.totalFrames = frameCount;\n        this.frames = [];\n    }\n    /**\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n     * @returns Any remaining data to be process, or null if there is none\n     */\n    extractFrameCount_(data) {\n        assert(this.frames === null, 'We already have a frame buffer');\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n        if (data.length <= 6) {\n            const frameCount = Number(data);\n            if (!isNaN(frameCount)) {\n                this.handleNewFrameCount_(frameCount);\n                return null;\n            }\n        }\n        this.handleNewFrameCount_(1);\n        return data;\n    }\n    /**\n     * Process a websocket frame that has arrived from the server.\n     * @param mess - The frame data\n     */\n    handleIncomingFrame(mess) {\n        if (this.mySock === null) {\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n        }\n        const data = mess['data'];\n        this.bytesReceived += data.length;\n        this.stats_.incrementCounter('bytes_received', data.length);\n        this.resetKeepAlive();\n        if (this.frames !== null) {\n            // we're buffering\n            this.appendFrame_(data);\n        }\n        else {\n            // try to parse out a frame count, otherwise, assume 1 and process it\n            const remainingData = this.extractFrameCount_(data);\n            if (remainingData !== null) {\n                this.appendFrame_(remainingData);\n            }\n        }\n    }\n    /**\n     * Send a message to the server\n     * @param data - The JSON object to transmit\n     */\n    send(data) {\n        this.resetKeepAlive();\n        const dataStr = stringify(data);\n        this.bytesSent += dataStr.length;\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\n        //up into multiple pieces if it doesn't fit in one request.\n        const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n        //Send the length header\n        if (dataSegs.length > 1) {\n            this.sendString_(String(dataSegs.length));\n        }\n        //Send the actual data in segments.\n        for (let i = 0; i < dataSegs.length; i++) {\n            this.sendString_(dataSegs[i]);\n        }\n    }\n    shutdown_() {\n        this.isClosed_ = true;\n        if (this.keepaliveTimer) {\n            clearInterval(this.keepaliveTimer);\n            this.keepaliveTimer = null;\n        }\n        if (this.mySock) {\n            this.mySock.close();\n            this.mySock = null;\n        }\n    }\n    onClosed_() {\n        if (!this.isClosed_) {\n            this.log_('WebSocket is closing itself');\n            this.shutdown_();\n            // since this is an internal close, trigger the close listener\n            if (this.onDisconnect) {\n                this.onDisconnect(this.everConnected_);\n                this.onDisconnect = null;\n            }\n        }\n    }\n    /**\n     * External-facing close handler.\n     * Close the websocket and kill the connection.\n     */\n    close() {\n        if (!this.isClosed_) {\n            this.log_('WebSocket is being closed');\n            this.shutdown_();\n        }\n    }\n    /**\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n     * the last activity.\n     */\n    resetKeepAlive() {\n        clearInterval(this.keepaliveTimer);\n        this.keepaliveTimer = setInterval(() => {\n            //If there has been no websocket activity for a while, send a no-op\n            if (this.mySock) {\n                this.sendString_('0');\n            }\n            this.resetKeepAlive();\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\n    }\n    /**\n     * Send a string over the websocket.\n     *\n     * @param str - String to send.\n     */\n    sendString_(str) {\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n        // calls for some unknown reason.  We treat these as an error and disconnect.\n        // See https://app.asana.com/0/58926111402292/68021340250410\n        try {\n            this.mySock.send(str);\n        }\n        catch (e) {\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\n            setTimeout(this.onClosed_.bind(this), 0);\n        }\n    }\n}\n/**\n * Number of response before we consider the connection \"healthy.\"\n */\nWebSocketConnection.responsesRequiredToBeHealthy = 2;\n/**\n * Time to wait for the connection te become healthy before giving up.\n */\nWebSocketConnection.healthyTimeout = 30000;\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nclass TransportManager {\n    /**\n     * @param repoInfo - Metadata around the namespace we're connecting to\n     */\n    constructor(repoInfo) {\n        this.initTransports_(repoInfo);\n    }\n    static get ALL_TRANSPORTS() {\n        return [BrowserPollConnection, WebSocketConnection];\n    }\n    /**\n     * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\n     * TransportManager has already set up transports_\n     */\n    static get IS_TRANSPORT_INITIALIZED() {\n        return this.globalTransportInitialized_;\n    }\n    initTransports_(repoInfo) {\n        const isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\n        let isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n        if (repoInfo.webSocketOnly) {\n            if (!isWebSocketsAvailable) {\n                warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\n            }\n            isSkipPollConnection = true;\n        }\n        if (isSkipPollConnection) {\n            this.transports_ = [WebSocketConnection];\n        }\n        else {\n            const transports = (this.transports_ = []);\n            for (const transport of TransportManager.ALL_TRANSPORTS) {\n                if (transport && transport['isAvailable']()) {\n                    transports.push(transport);\n                }\n            }\n            TransportManager.globalTransportInitialized_ = true;\n        }\n    }\n    /**\n     * @returns The constructor for the initial transport to use\n     */\n    initialTransport() {\n        if (this.transports_.length > 0) {\n            return this.transports_[0];\n        }\n        else {\n            throw new Error('No transports available');\n        }\n    }\n    /**\n     * @returns The constructor for the next transport, or null\n     */\n    upgradeTransport() {\n        if (this.transports_.length > 1) {\n            return this.transports_[1];\n        }\n        else {\n            return null;\n        }\n    }\n}\n// Keeps track of whether the TransportManager has already chosen a transport to use\nTransportManager.globalTransportInitialized_ = false;\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\nconst SERVER_HELLO = 'h';\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nclass Connection {\n    /**\n     * @param id - an id for this connection\n     * @param repoInfo_ - the info for the endpoint to connect to\n     * @param applicationId_ - the Firebase App ID for this project\n     * @param appCheckToken_ - The App Check Token for this device.\n     * @param authToken_ - The auth token for this session.\n     * @param onMessage_ - the callback to be triggered when a server-push message arrives\n     * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n     * @param onDisconnect_ - the callback to be triggered when a connection was lost\n     * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n     * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n     */\n    constructor(id, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\n        this.id = id;\n        this.repoInfo_ = repoInfo_;\n        this.applicationId_ = applicationId_;\n        this.appCheckToken_ = appCheckToken_;\n        this.authToken_ = authToken_;\n        this.onMessage_ = onMessage_;\n        this.onReady_ = onReady_;\n        this.onDisconnect_ = onDisconnect_;\n        this.onKill_ = onKill_;\n        this.lastSessionId = lastSessionId;\n        this.connectionCount = 0;\n        this.pendingDataMessages = [];\n        this.state_ = 0 /* CONNECTING */;\n        this.log_ = logWrapper('c:' + this.id + ':');\n        this.transportManager_ = new TransportManager(repoInfo_);\n        this.log_('Connection created');\n        this.start_();\n    }\n    /**\n     * Starts a connection attempt\n     */\n    start_() {\n        const conn = this.transportManager_.initialTransport();\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n        // can consider the transport healthy.\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n        const onMessageReceived = this.connReceiver_(this.conn_);\n        const onConnectionLost = this.disconnReceiver_(this.conn_);\n        this.tx_ = this.conn_;\n        this.rx_ = this.conn_;\n        this.secondaryConn_ = null;\n        this.isHealthy_ = false;\n        /*\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n         * still have the context of your originating frame.\n         */\n        setTimeout(() => {\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n            this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n        }, Math.floor(0));\n        const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n        if (healthyTimeoutMS > 0) {\n            this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n                this.healthyTimeout_ = null;\n                if (!this.isHealthy_) {\n                    if (this.conn_ &&\n                        this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\n                        this.log_('Connection exceeded healthy timeout but has received ' +\n                            this.conn_.bytesReceived +\n                            ' bytes.  Marking connection healthy.');\n                        this.isHealthy_ = true;\n                        this.conn_.markConnectionHealthy();\n                    }\n                    else if (this.conn_ &&\n                        this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\n                        this.log_('Connection exceeded healthy timeout but has sent ' +\n                            this.conn_.bytesSent +\n                            ' bytes.  Leaving connection alive.');\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n                        // the server.\n                    }\n                    else {\n                        this.log_('Closing unhealthy connection after timeout.');\n                        this.close();\n                    }\n                }\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            }, Math.floor(healthyTimeoutMS));\n        }\n    }\n    nextTransportId_() {\n        return 'c:' + this.id + ':' + this.connectionCount++;\n    }\n    disconnReceiver_(conn) {\n        return everConnected => {\n            if (conn === this.conn_) {\n                this.onConnectionLost_(everConnected);\n            }\n            else if (conn === this.secondaryConn_) {\n                this.log_('Secondary connection lost.');\n                this.onSecondaryConnectionLost_();\n            }\n            else {\n                this.log_('closing an old connection');\n            }\n        };\n    }\n    connReceiver_(conn) {\n        return (message) => {\n            if (this.state_ !== 2 /* DISCONNECTED */) {\n                if (conn === this.rx_) {\n                    this.onPrimaryMessageReceived_(message);\n                }\n                else if (conn === this.secondaryConn_) {\n                    this.onSecondaryMessageReceived_(message);\n                }\n                else {\n                    this.log_('message on old connection');\n                }\n            }\n        };\n    }\n    /**\n     * @param dataMsg - An arbitrary data message to be sent to the server\n     */\n    sendRequest(dataMsg) {\n        // wrap in a data message envelope and send it on\n        const msg = { t: 'd', d: dataMsg };\n        this.sendData_(msg);\n    }\n    tryCleanupConnection() {\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\n            this.conn_ = this.secondaryConn_;\n            this.secondaryConn_ = null;\n            // the server will shutdown the old connection\n        }\n    }\n    onSecondaryControl_(controlData) {\n        if (MESSAGE_TYPE in controlData) {\n            const cmd = controlData[MESSAGE_TYPE];\n            if (cmd === SWITCH_ACK) {\n                this.upgradeIfSecondaryHealthy_();\n            }\n            else if (cmd === CONTROL_RESET) {\n                // Most likely the session wasn't valid. Abandon the switch attempt\n                this.log_('Got a reset on secondary, closing it');\n                this.secondaryConn_.close();\n                // If we were already using this connection for something, than we need to fully close\n                if (this.tx_ === this.secondaryConn_ ||\n                    this.rx_ === this.secondaryConn_) {\n                    this.close();\n                }\n            }\n            else if (cmd === CONTROL_PONG) {\n                this.log_('got pong on secondary.');\n                this.secondaryResponsesRequired_--;\n                this.upgradeIfSecondaryHealthy_();\n            }\n        }\n    }\n    onSecondaryMessageReceived_(parsedData) {\n        const layer = requireKey('t', parsedData);\n        const data = requireKey('d', parsedData);\n        if (layer === 'c') {\n            this.onSecondaryControl_(data);\n        }\n        else if (layer === 'd') {\n            // got a data message, but we're still second connection. Need to buffer it up\n            this.pendingDataMessages.push(data);\n        }\n        else {\n            throw new Error('Unknown protocol layer: ' + layer);\n        }\n    }\n    upgradeIfSecondaryHealthy_() {\n        if (this.secondaryResponsesRequired_ <= 0) {\n            this.log_('Secondary connection is healthy.');\n            this.isHealthy_ = true;\n            this.secondaryConn_.markConnectionHealthy();\n            this.proceedWithUpgrade_();\n        }\n        else {\n            // Send a ping to make sure the connection is healthy.\n            this.log_('sending ping on secondary.');\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n        }\n    }\n    proceedWithUpgrade_() {\n        // tell this connection to consider itself open\n        this.secondaryConn_.start();\n        // send ack\n        this.log_('sending client ack on secondary');\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n        // send end packet on primary transport, switch to sending on this one\n        // can receive on this one, buffer responses until end received on primary transport\n        this.log_('Ending transmission on primary');\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n        this.tx_ = this.secondaryConn_;\n        this.tryCleanupConnection();\n    }\n    onPrimaryMessageReceived_(parsedData) {\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n        const layer = requireKey('t', parsedData);\n        const data = requireKey('d', parsedData);\n        if (layer === 'c') {\n            this.onControl_(data);\n        }\n        else if (layer === 'd') {\n            this.onDataMessage_(data);\n        }\n    }\n    onDataMessage_(message) {\n        this.onPrimaryResponse_();\n        // We don't do anything with data messages, just kick them up a level\n        this.onMessage_(message);\n    }\n    onPrimaryResponse_() {\n        if (!this.isHealthy_) {\n            this.primaryResponsesRequired_--;\n            if (this.primaryResponsesRequired_ <= 0) {\n                this.log_('Primary connection is healthy.');\n                this.isHealthy_ = true;\n                this.conn_.markConnectionHealthy();\n            }\n        }\n    }\n    onControl_(controlData) {\n        const cmd = requireKey(MESSAGE_TYPE, controlData);\n        if (MESSAGE_DATA in controlData) {\n            const payload = controlData[MESSAGE_DATA];\n            if (cmd === SERVER_HELLO) {\n                this.onHandshake_(payload);\n            }\n            else if (cmd === END_TRANSMISSION) {\n                this.log_('recvd end transmission on primary');\n                this.rx_ = this.secondaryConn_;\n                for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n                    this.onDataMessage_(this.pendingDataMessages[i]);\n                }\n                this.pendingDataMessages = [];\n                this.tryCleanupConnection();\n            }\n            else if (cmd === CONTROL_SHUTDOWN) {\n                // This was previously the 'onKill' callback passed to the lower-level connection\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\n                this.onConnectionShutdown_(payload);\n            }\n            else if (cmd === CONTROL_RESET) {\n                // payload in this case is the host we should contact\n                this.onReset_(payload);\n            }\n            else if (cmd === CONTROL_ERROR) {\n                error('Server Error: ' + payload);\n            }\n            else if (cmd === CONTROL_PONG) {\n                this.log_('got pong on primary.');\n                this.onPrimaryResponse_();\n                this.sendPingOnPrimaryIfNecessary_();\n            }\n            else {\n                error('Unknown control packet command: ' + cmd);\n            }\n        }\n    }\n    /**\n     * @param handshake - The handshake data returned from the server\n     */\n    onHandshake_(handshake) {\n        const timestamp = handshake.ts;\n        const version = handshake.v;\n        const host = handshake.h;\n        this.sessionId = handshake.s;\n        this.repoInfo_.host = host;\n        // if we've already closed the connection, then don't bother trying to progress further\n        if (this.state_ === 0 /* CONNECTING */) {\n            this.conn_.start();\n            this.onConnectionEstablished_(this.conn_, timestamp);\n            if (PROTOCOL_VERSION !== version) {\n                warn('Protocol version mismatch detected');\n            }\n            // TODO: do we want to upgrade? when? maybe a delay?\n            this.tryStartUpgrade_();\n        }\n    }\n    tryStartUpgrade_() {\n        const conn = this.transportManager_.upgradeTransport();\n        if (conn) {\n            this.startUpgrade_(conn);\n        }\n    }\n    startUpgrade_(conn) {\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n        // can consider the transport healthy.\n        this.secondaryResponsesRequired_ =\n            conn['responsesRequiredToBeHealthy'] || 0;\n        const onMessage = this.connReceiver_(this.secondaryConn_);\n        const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n        this.secondaryConn_.open(onMessage, onDisconnect);\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n        setTimeoutNonBlocking(() => {\n            if (this.secondaryConn_) {\n                this.log_('Timed out trying to upgrade.');\n                this.secondaryConn_.close();\n            }\n        }, Math.floor(UPGRADE_TIMEOUT));\n    }\n    onReset_(host) {\n        this.log_('Reset packet received.  New host: ' + host);\n        this.repoInfo_.host = host;\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n        // We don't currently support resets after the connection has already been established\n        if (this.state_ === 1 /* CONNECTED */) {\n            this.close();\n        }\n        else {\n            // Close whatever connections we have open and start again.\n            this.closeConnections_();\n            this.start_();\n        }\n    }\n    onConnectionEstablished_(conn, timestamp) {\n        this.log_('Realtime connection established.');\n        this.conn_ = conn;\n        this.state_ = 1 /* CONNECTED */;\n        if (this.onReady_) {\n            this.onReady_(timestamp, this.sessionId);\n            this.onReady_ = null;\n        }\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n        // send some pings.\n        if (this.primaryResponsesRequired_ === 0) {\n            this.log_('Primary connection is healthy.');\n            this.isHealthy_ = true;\n        }\n        else {\n            setTimeoutNonBlocking(() => {\n                this.sendPingOnPrimaryIfNecessary_();\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n        }\n    }\n    sendPingOnPrimaryIfNecessary_() {\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\n            this.log_('sending ping on primary.');\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n        }\n    }\n    onSecondaryConnectionLost_() {\n        const conn = this.secondaryConn_;\n        this.secondaryConn_ = null;\n        if (this.tx_ === conn || this.rx_ === conn) {\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\n            this.close();\n        }\n    }\n    /**\n     * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n     * we should flush the host cache\n     */\n    onConnectionLost_(everConnected) {\n        this.conn_ = null;\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\n            this.log_('Realtime connection failed.');\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n            if (this.repoInfo_.isCacheableHost()) {\n                PersistentStorage.remove('host:' + this.repoInfo_.host);\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n                this.repoInfo_.internalHost = this.repoInfo_.host;\n            }\n        }\n        else if (this.state_ === 1 /* CONNECTED */) {\n            this.log_('Realtime connection lost.');\n        }\n        this.close();\n    }\n    onConnectionShutdown_(reason) {\n        this.log_('Connection shutdown command received. Shutting down...');\n        if (this.onKill_) {\n            this.onKill_(reason);\n            this.onKill_ = null;\n        }\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\n        // so clear the callback.\n        this.onDisconnect_ = null;\n        this.close();\n    }\n    sendData_(data) {\n        if (this.state_ !== 1 /* CONNECTED */) {\n            throw 'Connection is not connected';\n        }\n        else {\n            this.tx_.send(data);\n        }\n    }\n    /**\n     * Cleans up this connection, calling the appropriate callbacks\n     */\n    close() {\n        if (this.state_ !== 2 /* DISCONNECTED */) {\n            this.log_('Closing realtime connection.');\n            this.state_ = 2 /* DISCONNECTED */;\n            this.closeConnections_();\n            if (this.onDisconnect_) {\n                this.onDisconnect_();\n                this.onDisconnect_ = null;\n            }\n        }\n    }\n    closeConnections_() {\n        this.log_('Shutting down all connections');\n        if (this.conn_) {\n            this.conn_.close();\n            this.conn_ = null;\n        }\n        if (this.secondaryConn_) {\n            this.secondaryConn_.close();\n            this.secondaryConn_ = null;\n        }\n        if (this.healthyTimeout_) {\n            clearTimeout(this.healthyTimeout_);\n            this.healthyTimeout_ = null;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nclass ServerActions {\n    put(pathString, data, onComplete, hash) { }\n    merge(pathString, data, onComplete, hash) { }\n    /**\n     * Refreshes the auth token for the current connection.\n     * @param token - The authentication token\n     */\n    refreshAuthToken(token) { }\n    /**\n     * Refreshes the app check token for the current connection.\n     * @param token The app check token\n     */\n    refreshAppCheckToken(token) { }\n    onDisconnectPut(pathString, data, onComplete) { }\n    onDisconnectMerge(pathString, data, onComplete) { }\n    onDisconnectCancel(pathString, onComplete) { }\n    reportStats(stats) { }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nclass EventEmitter {\n    constructor(allowedEvents_) {\n        this.allowedEvents_ = allowedEvents_;\n        this.listeners_ = {};\n        assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\n    }\n    /**\n     * To be called by derived classes to trigger events.\n     */\n    trigger(eventType, ...varArgs) {\n        if (Array.isArray(this.listeners_[eventType])) {\n            // Clone the list, since callbacks could add/remove listeners.\n            const listeners = [...this.listeners_[eventType]];\n            for (let i = 0; i < listeners.length; i++) {\n                listeners[i].callback.apply(listeners[i].context, varArgs);\n            }\n        }\n    }\n    on(eventType, callback, context) {\n        this.validateEventType_(eventType);\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\n        this.listeners_[eventType].push({ callback, context });\n        const eventData = this.getInitialEvent(eventType);\n        if (eventData) {\n            callback.apply(context, eventData);\n        }\n    }\n    off(eventType, callback, context) {\n        this.validateEventType_(eventType);\n        const listeners = this.listeners_[eventType] || [];\n        for (let i = 0; i < listeners.length; i++) {\n            if (listeners[i].callback === callback &&\n                (!context || context === listeners[i].context)) {\n                listeners.splice(i, 1);\n                return;\n            }\n        }\n    }\n    validateEventType_(eventType) {\n        assert(this.allowedEvents_.find(et => {\n            return et === eventType;\n        }), 'Unknown event: ' + eventType);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nclass OnlineMonitor extends EventEmitter {\n    constructor() {\n        super(['online']);\n        this.online_ = true;\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\n        // for Cordova.\n        if (typeof window !== 'undefined' &&\n            typeof window.addEventListener !== 'undefined' &&\n            !isMobileCordova()) {\n            window.addEventListener('online', () => {\n                if (!this.online_) {\n                    this.online_ = true;\n                    this.trigger('online', true);\n                }\n            }, false);\n            window.addEventListener('offline', () => {\n                if (this.online_) {\n                    this.online_ = false;\n                    this.trigger('online', false);\n                }\n            }, false);\n        }\n    }\n    static getInstance() {\n        return new OnlineMonitor();\n    }\n    getInitialEvent(eventType) {\n        assert(eventType === 'online', 'Unknown event type: ' + eventType);\n        return [this.online_];\n    }\n    currentlyOnline() {\n        return this.online_;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\nclass Path {\n    /**\n     * @param pathOrString - Path string to parse, or another path, or the raw\n     * tokens array\n     */\n    constructor(pathOrString, pieceNum) {\n        if (pieceNum === void 0) {\n            this.pieces_ = pathOrString.split('/');\n            // Remove empty pieces.\n            let copyTo = 0;\n            for (let i = 0; i < this.pieces_.length; i++) {\n                if (this.pieces_[i].length > 0) {\n                    this.pieces_[copyTo] = this.pieces_[i];\n                    copyTo++;\n                }\n            }\n            this.pieces_.length = copyTo;\n            this.pieceNum_ = 0;\n        }\n        else {\n            this.pieces_ = pathOrString;\n            this.pieceNum_ = pieceNum;\n        }\n    }\n    toString() {\n        let pathString = '';\n        for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n            if (this.pieces_[i] !== '') {\n                pathString += '/' + this.pieces_[i];\n            }\n        }\n        return pathString || '/';\n    }\n}\nfunction newEmptyPath() {\n    return new Path('');\n}\nfunction pathGetFront(path) {\n    if (path.pieceNum_ >= path.pieces_.length) {\n        return null;\n    }\n    return path.pieces_[path.pieceNum_];\n}\n/**\n * @returns The number of segments in this path\n */\nfunction pathGetLength(path) {\n    return path.pieces_.length - path.pieceNum_;\n}\nfunction pathPopFront(path) {\n    let pieceNum = path.pieceNum_;\n    if (pieceNum < path.pieces_.length) {\n        pieceNum++;\n    }\n    return new Path(path.pieces_, pieceNum);\n}\nfunction pathGetBack(path) {\n    if (path.pieceNum_ < path.pieces_.length) {\n        return path.pieces_[path.pieces_.length - 1];\n    }\n    return null;\n}\nfunction pathToUrlEncodedString(path) {\n    let pathString = '';\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n        if (path.pieces_[i] !== '') {\n            pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n        }\n    }\n    return pathString || '/';\n}\n/**\n * Shallow copy of the parts of the path.\n *\n */\nfunction pathSlice(path, begin = 0) {\n    return path.pieces_.slice(path.pieceNum_ + begin);\n}\nfunction pathParent(path) {\n    if (path.pieceNum_ >= path.pieces_.length) {\n        return null;\n    }\n    const pieces = [];\n    for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n        pieces.push(path.pieces_[i]);\n    }\n    return new Path(pieces, 0);\n}\nfunction pathChild(path, childPathObj) {\n    const pieces = [];\n    for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n        pieces.push(path.pieces_[i]);\n    }\n    if (childPathObj instanceof Path) {\n        for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n            pieces.push(childPathObj.pieces_[i]);\n        }\n    }\n    else {\n        const childPieces = childPathObj.split('/');\n        for (let i = 0; i < childPieces.length; i++) {\n            if (childPieces[i].length > 0) {\n                pieces.push(childPieces[i]);\n            }\n        }\n    }\n    return new Path(pieces, 0);\n}\n/**\n * @returns True if there are no segments in this path\n */\nfunction pathIsEmpty(path) {\n    return path.pieceNum_ >= path.pieces_.length;\n}\n/**\n * @returns The path from outerPath to innerPath\n */\nfunction newRelativePath(outerPath, innerPath) {\n    const outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);\n    if (outer === null) {\n        return innerPath;\n    }\n    else if (outer === inner) {\n        return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n    }\n    else {\n        throw new Error('INTERNAL ERROR: innerPath (' +\n            innerPath +\n            ') is not within ' +\n            'outerPath (' +\n            outerPath +\n            ')');\n    }\n}\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nfunction pathCompare(left, right) {\n    const leftKeys = pathSlice(left, 0);\n    const rightKeys = pathSlice(right, 0);\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n        const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n        if (cmp !== 0) {\n            return cmp;\n        }\n    }\n    if (leftKeys.length === rightKeys.length) {\n        return 0;\n    }\n    return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n/**\n * @returns true if paths are the same.\n */\nfunction pathEquals(path, other) {\n    if (pathGetLength(path) !== pathGetLength(other)) {\n        return false;\n    }\n    for (let i = path.pieceNum_, j = other.pieceNum_; i <= path.pieces_.length; i++, j++) {\n        if (path.pieces_[i] !== other.pieces_[j]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * @returns True if this path is a parent of (or the same as) other\n */\nfunction pathContains(path, other) {\n    let i = path.pieceNum_;\n    let j = other.pieceNum_;\n    if (pathGetLength(path) > pathGetLength(other)) {\n        return false;\n    }\n    while (i < path.pieces_.length) {\n        if (path.pieces_[i] !== other.pieces_[j]) {\n            return false;\n        }\n        ++i;\n        ++j;\n    }\n    return true;\n}\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nclass ValidationPath {\n    /**\n     * @param path - Initial Path.\n     * @param errorPrefix_ - Prefix for any error messages.\n     */\n    constructor(path, errorPrefix_) {\n        this.errorPrefix_ = errorPrefix_;\n        this.parts_ = pathSlice(path, 0);\n        /** Initialize to number of '/' chars needed in path. */\n        this.byteLength_ = Math.max(1, this.parts_.length);\n        for (let i = 0; i < this.parts_.length; i++) {\n            this.byteLength_ += stringLength(this.parts_[i]);\n        }\n        validationPathCheckValid(this);\n    }\n}\nfunction validationPathPush(validationPath, child) {\n    // Count the needed '/'\n    if (validationPath.parts_.length > 0) {\n        validationPath.byteLength_ += 1;\n    }\n    validationPath.parts_.push(child);\n    validationPath.byteLength_ += stringLength(child);\n    validationPathCheckValid(validationPath);\n}\nfunction validationPathPop(validationPath) {\n    const last = validationPath.parts_.pop();\n    validationPath.byteLength_ -= stringLength(last);\n    // Un-count the previous '/'\n    if (validationPath.parts_.length > 0) {\n        validationPath.byteLength_ -= 1;\n    }\n}\nfunction validationPathCheckValid(validationPath) {\n    if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n        throw new Error(validationPath.errorPrefix_ +\n            'has a key path longer than ' +\n            MAX_PATH_LENGTH_BYTES +\n            ' bytes (' +\n            validationPath.byteLength_ +\n            ').');\n    }\n    if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n        throw new Error(validationPath.errorPrefix_ +\n            'path specified exceeds the maximum depth that can be written (' +\n            MAX_PATH_DEPTH +\n            ') or object contains a cycle ' +\n            validationPathToErrorString(validationPath));\n    }\n}\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nfunction validationPathToErrorString(validationPath) {\n    if (validationPath.parts_.length === 0) {\n        return '';\n    }\n    return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass VisibilityMonitor extends EventEmitter {\n    constructor() {\n        super(['visible']);\n        let hidden;\n        let visibilityChange;\n        if (typeof document !== 'undefined' &&\n            typeof document.addEventListener !== 'undefined') {\n            if (typeof document['hidden'] !== 'undefined') {\n                // Opera 12.10 and Firefox 18 and later support\n                visibilityChange = 'visibilitychange';\n                hidden = 'hidden';\n            }\n            else if (typeof document['mozHidden'] !== 'undefined') {\n                visibilityChange = 'mozvisibilitychange';\n                hidden = 'mozHidden';\n            }\n            else if (typeof document['msHidden'] !== 'undefined') {\n                visibilityChange = 'msvisibilitychange';\n                hidden = 'msHidden';\n            }\n            else if (typeof document['webkitHidden'] !== 'undefined') {\n                visibilityChange = 'webkitvisibilitychange';\n                hidden = 'webkitHidden';\n            }\n        }\n        // Initially, we always assume we are visible. This ensures that in browsers\n        // without page visibility support or in cases where we are never visible\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n        // reconnects\n        this.visible_ = true;\n        if (visibilityChange) {\n            document.addEventListener(visibilityChange, () => {\n                const visible = !document[hidden];\n                if (visible !== this.visible_) {\n                    this.visible_ = visible;\n                    this.trigger('visible', visible);\n                }\n            }, false);\n        }\n    }\n    static getInstance() {\n        return new VisibilityMonitor();\n    }\n    getInitialEvent(eventType) {\n        assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n        return [this.visible_];\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nclass PersistentConnection extends ServerActions {\n    /**\n     * @param repoInfo_ - Data about the namespace we are connecting to\n     * @param applicationId_ - The Firebase App ID for this project\n     * @param onDataUpdate_ - A callback for new data from the server\n     */\n    constructor(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {\n        super();\n        this.repoInfo_ = repoInfo_;\n        this.applicationId_ = applicationId_;\n        this.onDataUpdate_ = onDataUpdate_;\n        this.onConnectStatus_ = onConnectStatus_;\n        this.onServerInfoUpdate_ = onServerInfoUpdate_;\n        this.authTokenProvider_ = authTokenProvider_;\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\n        this.authOverride_ = authOverride_;\n        // Used for diagnostic logging.\n        this.id = PersistentConnection.nextPersistentConnectionId_++;\n        this.log_ = logWrapper('p:' + this.id + ':');\n        this.interruptReasons_ = {};\n        this.listens = new Map();\n        this.outstandingPuts_ = [];\n        this.outstandingGets_ = [];\n        this.outstandingPutCount_ = 0;\n        this.outstandingGetCount_ = 0;\n        this.onDisconnectRequestQueue_ = [];\n        this.connected_ = false;\n        this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n        this.securityDebugCallback_ = null;\n        this.lastSessionId = null;\n        this.establishConnectionTimer_ = null;\n        this.visible_ = false;\n        // Before we get connected, we keep a queue of pending messages to send.\n        this.requestCBHash_ = {};\n        this.requestNumber_ = 0;\n        this.realtime_ = null;\n        this.authToken_ = null;\n        this.appCheckToken_ = null;\n        this.forceTokenRefresh_ = false;\n        this.invalidAuthTokenCount_ = 0;\n        this.invalidAppCheckTokenCount_ = 0;\n        this.firstConnection_ = true;\n        this.lastConnectionAttemptTime_ = null;\n        this.lastConnectionEstablishedTime_ = null;\n        if (authOverride_ && !isNodeSdk()) {\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\n        }\n        VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\n            OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n        }\n    }\n    sendRequest(action, body, onResponse) {\n        const curReqNum = ++this.requestNumber_;\n        const msg = { r: curReqNum, a: action, b: body };\n        this.log_(stringify(msg));\n        assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\n        this.realtime_.sendRequest(msg);\n        if (onResponse) {\n            this.requestCBHash_[curReqNum] = onResponse;\n        }\n    }\n    get(query) {\n        this.initConnection_();\n        const deferred = new Deferred();\n        const request = {\n            p: query._path.toString(),\n            q: query._queryObject\n        };\n        const outstandingGet = {\n            action: 'g',\n            request,\n            onComplete: (message) => {\n                const payload = message['d'];\n                if (message['s'] === 'ok') {\n                    deferred.resolve(payload);\n                }\n                else {\n                    deferred.reject(payload);\n                }\n            }\n        };\n        this.outstandingGets_.push(outstandingGet);\n        this.outstandingGetCount_++;\n        const index = this.outstandingGets_.length - 1;\n        if (this.connected_) {\n            this.sendGet_(index);\n        }\n        return deferred.promise;\n    }\n    listen(query, currentHashFn, tag, onComplete) {\n        this.initConnection_();\n        const queryId = query._queryIdentifier;\n        const pathString = query._path.toString();\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\n        if (!this.listens.has(pathString)) {\n            this.listens.set(pathString, new Map());\n        }\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'listen() called for non-default but complete query');\n        assert(!this.listens.get(pathString).has(queryId), `listen() called twice for same path/queryId.`);\n        const listenSpec = {\n            onComplete,\n            hashFn: currentHashFn,\n            query,\n            tag\n        };\n        this.listens.get(pathString).set(queryId, listenSpec);\n        if (this.connected_) {\n            this.sendListen_(listenSpec);\n        }\n    }\n    sendGet_(index) {\n        const get = this.outstandingGets_[index];\n        this.sendRequest('g', get.request, (message) => {\n            delete this.outstandingGets_[index];\n            this.outstandingGetCount_--;\n            if (this.outstandingGetCount_ === 0) {\n                this.outstandingGets_ = [];\n            }\n            if (get.onComplete) {\n                get.onComplete(message);\n            }\n        });\n    }\n    sendListen_(listenSpec) {\n        const query = listenSpec.query;\n        const pathString = query._path.toString();\n        const queryId = query._queryIdentifier;\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\n        const req = { /*path*/ p: pathString };\n        const action = 'q';\n        // Only bother to send query if it's non-default.\n        if (listenSpec.tag) {\n            req['q'] = query._queryObject;\n            req['t'] = listenSpec.tag;\n        }\n        req[ /*hash*/'h'] = listenSpec.hashFn();\n        this.sendRequest(action, req, (message) => {\n            const payload = message[ /*data*/'d'];\n            const status = message[ /*status*/'s'];\n            // print warnings in any case...\n            PersistentConnection.warnOnListenWarnings_(payload, query);\n            const currentListenSpec = this.listens.get(pathString) &&\n                this.listens.get(pathString).get(queryId);\n            // only trigger actions if the listen hasn't been removed and readded\n            if (currentListenSpec === listenSpec) {\n                this.log_('listen response', message);\n                if (status !== 'ok') {\n                    this.removeListen_(pathString, queryId);\n                }\n                if (listenSpec.onComplete) {\n                    listenSpec.onComplete(status, payload);\n                }\n            }\n        });\n    }\n    static warnOnListenWarnings_(payload, query) {\n        if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const warnings = safeGet(payload, 'w');\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n                const indexSpec = '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n                const indexPath = query._path.toString();\n                warn(`Using an unspecified index. Your data will be downloaded and ` +\n                    `filtered on the client. Consider adding ${indexSpec} at ` +\n                    `${indexPath} to your security rules for better performance.`);\n            }\n        }\n    }\n    refreshAuthToken(token) {\n        this.authToken_ = token;\n        this.log_('Auth token refreshed');\n        if (this.authToken_) {\n            this.tryAuth();\n        }\n        else {\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n            //the credential so we dont become authenticated next time we connect.\n            if (this.connected_) {\n                this.sendRequest('unauth', {}, () => { });\n            }\n        }\n        this.reduceReconnectDelayIfAdminCredential_(token);\n    }\n    reduceReconnectDelayIfAdminCredential_(credential) {\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n        const isFirebaseSecret = credential && credential.length === 40;\n        if (isFirebaseSecret || isAdmin(credential)) {\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n        }\n    }\n    refreshAppCheckToken(token) {\n        this.appCheckToken_ = token;\n        this.log_('App check token refreshed');\n        if (this.appCheckToken_) {\n            this.tryAppCheck();\n        }\n        else {\n            //If we're connected we want to let the server know to unauthenticate us.\n            //If we're not connected, simply delete the credential so we dont become\n            // authenticated next time we connect.\n            if (this.connected_) {\n                this.sendRequest('unappeck', {}, () => { });\n            }\n        }\n    }\n    /**\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n     * a auth revoked (the connection is closed).\n     */\n    tryAuth() {\n        if (this.connected_ && this.authToken_) {\n            const token = this.authToken_;\n            const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n            const requestData = { cred: token };\n            if (this.authOverride_ === null) {\n                requestData['noauth'] = true;\n            }\n            else if (typeof this.authOverride_ === 'object') {\n                requestData['authvar'] = this.authOverride_;\n            }\n            this.sendRequest(authMethod, requestData, (res) => {\n                const status = res[ /*status*/'s'];\n                const data = res[ /*data*/'d'] || 'error';\n                if (this.authToken_ === token) {\n                    if (status === 'ok') {\n                        this.invalidAuthTokenCount_ = 0;\n                    }\n                    else {\n                        // Triggers reconnect and force refresh for auth token\n                        this.onAuthRevoked_(status, data);\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Attempts to authenticate with the given token. If the authentication\n     * attempt fails, it's triggered like the token was revoked (the connection is\n     * closed).\n     */\n    tryAppCheck() {\n        if (this.connected_ && this.appCheckToken_) {\n            this.sendRequest('appcheck', { 'token': this.appCheckToken_ }, (res) => {\n                const status = res[ /*status*/'s'];\n                const data = res[ /*data*/'d'] || 'error';\n                if (status === 'ok') {\n                    this.invalidAppCheckTokenCount_ = 0;\n                }\n                else {\n                    this.onAppCheckRevoked_(status, data);\n                }\n            });\n        }\n    }\n    /**\n     * @inheritDoc\n     */\n    unlisten(query, tag) {\n        const pathString = query._path.toString();\n        const queryId = query._queryIdentifier;\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n        assert(query._queryParams.isDefault() || !query._queryParams.loadsAllData(), 'unlisten() called for non-default but complete query');\n        const listen = this.removeListen_(pathString, queryId);\n        if (listen && this.connected_) {\n            this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n        }\n    }\n    sendUnlisten_(pathString, queryId, queryObj, tag) {\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n        const req = { /*path*/ p: pathString };\n        const action = 'n';\n        // Only bother sending queryId if it's non-default.\n        if (tag) {\n            req['q'] = queryObj;\n            req['t'] = tag;\n        }\n        this.sendRequest(action, req);\n    }\n    onDisconnectPut(pathString, data, onComplete) {\n        this.initConnection_();\n        if (this.connected_) {\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\n        }\n        else {\n            this.onDisconnectRequestQueue_.push({\n                pathString,\n                action: 'o',\n                data,\n                onComplete\n            });\n        }\n    }\n    onDisconnectMerge(pathString, data, onComplete) {\n        this.initConnection_();\n        if (this.connected_) {\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\n        }\n        else {\n            this.onDisconnectRequestQueue_.push({\n                pathString,\n                action: 'om',\n                data,\n                onComplete\n            });\n        }\n    }\n    onDisconnectCancel(pathString, onComplete) {\n        this.initConnection_();\n        if (this.connected_) {\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\n        }\n        else {\n            this.onDisconnectRequestQueue_.push({\n                pathString,\n                action: 'oc',\n                data: null,\n                onComplete\n            });\n        }\n    }\n    sendOnDisconnect_(action, pathString, data, onComplete) {\n        const request = { /*path*/ p: pathString, /*data*/ d: data };\n        this.log_('onDisconnect ' + action, request);\n        this.sendRequest(action, request, (response) => {\n            if (onComplete) {\n                setTimeout(() => {\n                    onComplete(response[ /*status*/'s'], response[ /* data */'d']);\n                }, Math.floor(0));\n            }\n        });\n    }\n    put(pathString, data, onComplete, hash) {\n        this.putInternal('p', pathString, data, onComplete, hash);\n    }\n    merge(pathString, data, onComplete, hash) {\n        this.putInternal('m', pathString, data, onComplete, hash);\n    }\n    putInternal(action, pathString, data, onComplete, hash) {\n        this.initConnection_();\n        const request = {\n            /*path*/ p: pathString,\n            /*data*/ d: data\n        };\n        if (hash !== undefined) {\n            request[ /*hash*/'h'] = hash;\n        }\n        // TODO: Only keep track of the most recent put for a given path?\n        this.outstandingPuts_.push({\n            action,\n            request,\n            onComplete\n        });\n        this.outstandingPutCount_++;\n        const index = this.outstandingPuts_.length - 1;\n        if (this.connected_) {\n            this.sendPut_(index);\n        }\n        else {\n            this.log_('Buffering put: ' + pathString);\n        }\n    }\n    sendPut_(index) {\n        const action = this.outstandingPuts_[index].action;\n        const request = this.outstandingPuts_[index].request;\n        const onComplete = this.outstandingPuts_[index].onComplete;\n        this.outstandingPuts_[index].queued = this.connected_;\n        this.sendRequest(action, request, (message) => {\n            this.log_(action + ' response', message);\n            delete this.outstandingPuts_[index];\n            this.outstandingPutCount_--;\n            // Clean up array occasionally.\n            if (this.outstandingPutCount_ === 0) {\n                this.outstandingPuts_ = [];\n            }\n            if (onComplete) {\n                onComplete(message[ /*status*/'s'], message[ /* data */'d']);\n            }\n        });\n    }\n    reportStats(stats) {\n        // If we're not connected, we just drop the stats.\n        if (this.connected_) {\n            const request = { /*counters*/ c: stats };\n            this.log_('reportStats', request);\n            this.sendRequest(/*stats*/ 's', request, result => {\n                const status = result[ /*status*/'s'];\n                if (status !== 'ok') {\n                    const errorReason = result[ /* data */'d'];\n                    this.log_('reportStats', 'Error sending stats: ' + errorReason);\n                }\n            });\n        }\n    }\n    onDataMessage_(message) {\n        if ('r' in message) {\n            // this is a response\n            this.log_('from server: ' + stringify(message));\n            const reqNum = message['r'];\n            const onResponse = this.requestCBHash_[reqNum];\n            if (onResponse) {\n                delete this.requestCBHash_[reqNum];\n                onResponse(message[ /*body*/'b']);\n            }\n        }\n        else if ('error' in message) {\n            throw 'A server-side error has occurred: ' + message['error'];\n        }\n        else if ('a' in message) {\n            // a and b are action and body, respectively\n            this.onDataPush_(message['a'], message['b']);\n        }\n    }\n    onDataPush_(action, body) {\n        this.log_('handleServerMessage', action, body);\n        if (action === 'd') {\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \n            /*isMerge*/ false, body['t']);\n        }\n        else if (action === 'm') {\n            this.onDataUpdate_(body[ /*path*/'p'], body[ /*data*/'d'], \n            /*isMerge=*/ true, body['t']);\n        }\n        else if (action === 'c') {\n            this.onListenRevoked_(body[ /*path*/'p'], body[ /*query*/'q']);\n        }\n        else if (action === 'ac') {\n            this.onAuthRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\n        }\n        else if (action === 'apc') {\n            this.onAppCheckRevoked_(body[ /*status code*/'s'], body[ /* explanation */'d']);\n        }\n        else if (action === 'sd') {\n            this.onSecurityDebugPacket_(body);\n        }\n        else {\n            error('Unrecognized action received from server: ' +\n                stringify(action) +\n                '\\nAre you using the latest client?');\n        }\n    }\n    onReady_(timestamp, sessionId) {\n        this.log_('connection ready');\n        this.connected_ = true;\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\n        this.handleTimestamp_(timestamp);\n        this.lastSessionId = sessionId;\n        if (this.firstConnection_) {\n            this.sendConnectStats_();\n        }\n        this.restoreState_();\n        this.firstConnection_ = false;\n        this.onConnectStatus_(true);\n    }\n    scheduleConnect_(timeout) {\n        assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\n        if (this.establishConnectionTimer_) {\n            clearTimeout(this.establishConnectionTimer_);\n        }\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n        this.establishConnectionTimer_ = setTimeout(() => {\n            this.establishConnectionTimer_ = null;\n            this.establishConnection_();\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        }, Math.floor(timeout));\n    }\n    initConnection_() {\n        if (!this.realtime_ && this.firstConnection_) {\n            this.scheduleConnect_(0);\n        }\n    }\n    onVisible_(visible) {\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n        if (visible &&\n            !this.visible_ &&\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\n            this.log_('Window became visible.  Reducing delay.');\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n            if (!this.realtime_) {\n                this.scheduleConnect_(0);\n            }\n        }\n        this.visible_ = visible;\n    }\n    onOnline_(online) {\n        if (online) {\n            this.log_('Browser went online.');\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n            if (!this.realtime_) {\n                this.scheduleConnect_(0);\n            }\n        }\n        else {\n            this.log_('Browser went offline.  Killing connection.');\n            if (this.realtime_) {\n                this.realtime_.close();\n            }\n        }\n    }\n    onRealtimeDisconnect_() {\n        this.log_('data client disconnected');\n        this.connected_ = false;\n        this.realtime_ = null;\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n        this.cancelSentTransactions_();\n        // Clear out the pending requests.\n        this.requestCBHash_ = {};\n        if (this.shouldReconnect_()) {\n            if (!this.visible_) {\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\n                this.reconnectDelay_ = this.maxReconnectDelay_;\n                this.lastConnectionAttemptTime_ = new Date().getTime();\n            }\n            else if (this.lastConnectionEstablishedTime_) {\n                // If we've been connected long enough, reset reconnect delay to minimum.\n                const timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n                }\n                this.lastConnectionEstablishedTime_ = null;\n            }\n            const timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\n            let reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\n            reconnectDelay = Math.random() * reconnectDelay;\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n            this.scheduleConnect_(reconnectDelay);\n            // Adjust reconnect delay for next time.\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\n        }\n        this.onConnectStatus_(false);\n    }\n    async establishConnection_() {\n        if (this.shouldReconnect_()) {\n            this.log_('Making a connection attempt');\n            this.lastConnectionAttemptTime_ = new Date().getTime();\n            this.lastConnectionEstablishedTime_ = null;\n            const onDataMessage = this.onDataMessage_.bind(this);\n            const onReady = this.onReady_.bind(this);\n            const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n            const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n            const lastSessionId = this.lastSessionId;\n            let canceled = false;\n            let connection = null;\n            const closeFn = function () {\n                if (connection) {\n                    connection.close();\n                }\n                else {\n                    canceled = true;\n                    onDisconnect();\n                }\n            };\n            const sendRequestFn = function (msg) {\n                assert(connection, \"sendRequest call when we're not connected not allowed.\");\n                connection.sendRequest(msg);\n            };\n            this.realtime_ = {\n                close: closeFn,\n                sendRequest: sendRequestFn\n            };\n            const forceRefresh = this.forceTokenRefresh_;\n            this.forceTokenRefresh_ = false;\n            try {\n                // First fetch auth and app check token, and establish connection after\n                // fetching the token was successful\n                const [authToken, appCheckToken] = await Promise.all([\n                    this.authTokenProvider_.getToken(forceRefresh),\n                    this.appCheckTokenProvider_.getToken(forceRefresh)\n                ]);\n                if (!canceled) {\n                    log('getToken() completed. Creating connection.');\n                    this.authToken_ = authToken && authToken.accessToken;\n                    this.appCheckToken_ = appCheckToken && appCheckToken.token;\n                    connection = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect, \n                    /* onKill= */ reason => {\n                        warn(reason + ' (' + this.repoInfo_.toString() + ')');\n                        this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n                    }, lastSessionId);\n                }\n                else {\n                    log('getToken() completed but was canceled');\n                }\n            }\n            catch (error) {\n                this.log_('Failed to get token: ' + error);\n                if (!canceled) {\n                    if (this.repoInfo_.nodeAdmin) {\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\n                        // But getToken() may also just have temporarily failed, so we still want to\n                        // continue retrying.\n                        warn(error);\n                    }\n                    closeFn();\n                }\n            }\n        }\n    }\n    interrupt(reason) {\n        log('Interrupting connection for reason: ' + reason);\n        this.interruptReasons_[reason] = true;\n        if (this.realtime_) {\n            this.realtime_.close();\n        }\n        else {\n            if (this.establishConnectionTimer_) {\n                clearTimeout(this.establishConnectionTimer_);\n                this.establishConnectionTimer_ = null;\n            }\n            if (this.connected_) {\n                this.onRealtimeDisconnect_();\n            }\n        }\n    }\n    resume(reason) {\n        log('Resuming connection for reason: ' + reason);\n        delete this.interruptReasons_[reason];\n        if (isEmpty(this.interruptReasons_)) {\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n            if (!this.realtime_) {\n                this.scheduleConnect_(0);\n            }\n        }\n    }\n    handleTimestamp_(timestamp) {\n        const delta = timestamp - new Date().getTime();\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\n    }\n    cancelSentTransactions_() {\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\n            const put = this.outstandingPuts_[i];\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\n                if (put.onComplete) {\n                    put.onComplete('disconnect');\n                }\n                delete this.outstandingPuts_[i];\n                this.outstandingPutCount_--;\n            }\n        }\n        // Clean up array occasionally.\n        if (this.outstandingPutCount_ === 0) {\n            this.outstandingPuts_ = [];\n        }\n    }\n    onListenRevoked_(pathString, query) {\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n        let queryId;\n        if (!query) {\n            queryId = 'default';\n        }\n        else {\n            queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n        }\n        const listen = this.removeListen_(pathString, queryId);\n        if (listen && listen.onComplete) {\n            listen.onComplete('permission_denied');\n        }\n    }\n    removeListen_(pathString, queryId) {\n        const normalizedPathString = new Path(pathString).toString(); // normalize path.\n        let listen;\n        if (this.listens.has(normalizedPathString)) {\n            const map = this.listens.get(normalizedPathString);\n            listen = map.get(queryId);\n            map.delete(queryId);\n            if (map.size === 0) {\n                this.listens.delete(normalizedPathString);\n            }\n        }\n        else {\n            // all listens for this path has already been removed\n            listen = undefined;\n        }\n        return listen;\n    }\n    onAuthRevoked_(statusCode, explanation) {\n        log('Auth token revoked: ' + statusCode + '/' + explanation);\n        this.authToken_ = null;\n        this.forceTokenRefresh_ = true;\n        this.realtime_.close();\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n            // We'll wait a couple times before logging the warning / increasing the\n            // retry period since oauth tokens will report as \"invalid\" if they're\n            // just expired. Plus there may be transient issues that resolve themselves.\n            this.invalidAuthTokenCount_++;\n            if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n                // Set a long reconnect delay because recovery is unlikely\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n                // Notify the auth token provider that the token is invalid, which will log\n                // a warning\n                this.authTokenProvider_.notifyForInvalidToken();\n            }\n        }\n    }\n    onAppCheckRevoked_(statusCode, explanation) {\n        log('App check token revoked: ' + statusCode + '/' + explanation);\n        this.appCheckToken_ = null;\n        this.forceTokenRefresh_ = true;\n        // Note: We don't close the connection as the developer may not have\n        // enforcement enabled. The backend closes connections with enforcements.\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n            // We'll wait a couple times before logging the warning / increasing the\n            // retry period since oauth tokens will report as \"invalid\" if they're\n            // just expired. Plus there may be transient issues that resolve themselves.\n            this.invalidAppCheckTokenCount_++;\n            if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n                this.appCheckTokenProvider_.notifyForInvalidToken();\n            }\n        }\n    }\n    onSecurityDebugPacket_(body) {\n        if (this.securityDebugCallback_) {\n            this.securityDebugCallback_(body);\n        }\n        else {\n            if ('msg' in body) {\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\n            }\n        }\n    }\n    restoreState_() {\n        //Re-authenticate ourselves if we have a credential stored.\n        this.tryAuth();\n        this.tryAppCheck();\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\n        // make sure to send listens before puts.\n        for (const queries of this.listens.values()) {\n            for (const listenSpec of queries.values()) {\n                this.sendListen_(listenSpec);\n            }\n        }\n        for (let i = 0; i < this.outstandingPuts_.length; i++) {\n            if (this.outstandingPuts_[i]) {\n                this.sendPut_(i);\n            }\n        }\n        while (this.onDisconnectRequestQueue_.length) {\n            const request = this.onDisconnectRequestQueue_.shift();\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\n        }\n        for (let i = 0; i < this.outstandingGets_.length; i++) {\n            if (this.outstandingGets_[i]) {\n                this.sendGet_(i);\n            }\n        }\n    }\n    /**\n     * Sends client stats for first connection\n     */\n    sendConnectStats_() {\n        const stats = {};\n        let clientName = 'js';\n        if (isNodeSdk()) {\n            if (this.repoInfo_.nodeAdmin) {\n                clientName = 'admin_node';\n            }\n            else {\n                clientName = 'node';\n            }\n        }\n        stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n        if (isMobileCordova()) {\n            stats['framework.cordova'] = 1;\n        }\n        else if (isReactNative()) {\n            stats['framework.reactnative'] = 1;\n        }\n        this.reportStats(stats);\n    }\n    shouldReconnect_() {\n        const online = OnlineMonitor.getInstance().currentlyOnline();\n        return isEmpty(this.interruptReasons_) && online;\n    }\n}\nPersistentConnection.nextPersistentConnectionId_ = 0;\n/**\n * Counter for number of connections created. Mainly used for tagging in the logs\n */\nPersistentConnection.nextConnectionId_ = 0;\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass NamedNode {\n    constructor(name, node) {\n        this.name = name;\n        this.node = node;\n    }\n    static Wrap(name, node) {\n        return new NamedNode(name, node);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Index {\n    /**\n     * @returns A standalone comparison function for\n     * this index\n     */\n    getCompare() {\n        return this.compare.bind(this);\n    }\n    /**\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n     *\n     *\n     * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n     */\n    indexedValueChanged(oldNode, newNode) {\n        const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n        const newWrapped = new NamedNode(MIN_NAME, newNode);\n        return this.compare(oldWrapped, newWrapped) !== 0;\n    }\n    /**\n     * @returns a node wrapper that will sort equal to or less than\n     * any other node wrapper, using this index\n     */\n    minPost() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return NamedNode.MIN;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet __EMPTY_NODE;\nclass KeyIndex extends Index {\n    static get __EMPTY_NODE() {\n        return __EMPTY_NODE;\n    }\n    static set __EMPTY_NODE(val) {\n        __EMPTY_NODE = val;\n    }\n    compare(a, b) {\n        return nameCompare(a.name, b.name);\n    }\n    isDefinedOn(node) {\n        // We could probably return true here (since every node has a key), but it's never called\n        // so just leaving unimplemented for now.\n        throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n    }\n    indexedValueChanged(oldNode, newNode) {\n        return false; // The key for a node never changes.\n    }\n    minPost() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return NamedNode.MIN;\n    }\n    maxPost() {\n        // TODO: This should really be created once and cached in a static property, but\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n        return new NamedNode(MAX_NAME, __EMPTY_NODE);\n    }\n    makePost(indexValue, name) {\n        assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n        return new NamedNode(indexValue, __EMPTY_NODE);\n    }\n    /**\n     * @returns String representation for inclusion in a query spec\n     */\n    toString() {\n        return '.key';\n    }\n}\nconst KEY_INDEX = new KeyIndex();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An iterator over an LLRBNode.\n */\nclass SortedMapIterator {\n    /**\n     * @param node - Node to iterate.\n     * @param isReverse_ - Whether or not to iterate in reverse\n     */\n    constructor(node, startKey, comparator, isReverse_, resultGenerator_ = null) {\n        this.isReverse_ = isReverse_;\n        this.resultGenerator_ = resultGenerator_;\n        this.nodeStack_ = [];\n        let cmp = 1;\n        while (!node.isEmpty()) {\n            node = node;\n            cmp = startKey ? comparator(node.key, startKey) : 1;\n            // flip the comparison if we're going in reverse\n            if (isReverse_) {\n                cmp *= -1;\n            }\n            if (cmp < 0) {\n                // This node is less than our start key. ignore it\n                if (this.isReverse_) {\n                    node = node.left;\n                }\n                else {\n                    node = node.right;\n                }\n            }\n            else if (cmp === 0) {\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n                this.nodeStack_.push(node);\n                break;\n            }\n            else {\n                // This node is greater than our start key, add it to the stack and move to the next one\n                this.nodeStack_.push(node);\n                if (this.isReverse_) {\n                    node = node.right;\n                }\n                else {\n                    node = node.left;\n                }\n            }\n        }\n    }\n    getNext() {\n        if (this.nodeStack_.length === 0) {\n            return null;\n        }\n        let node = this.nodeStack_.pop();\n        let result;\n        if (this.resultGenerator_) {\n            result = this.resultGenerator_(node.key, node.value);\n        }\n        else {\n            result = { key: node.key, value: node.value };\n        }\n        if (this.isReverse_) {\n            node = node.left;\n            while (!node.isEmpty()) {\n                this.nodeStack_.push(node);\n                node = node.right;\n            }\n        }\n        else {\n            node = node.right;\n            while (!node.isEmpty()) {\n                this.nodeStack_.push(node);\n                node = node.left;\n            }\n        }\n        return result;\n    }\n    hasNext() {\n        return this.nodeStack_.length > 0;\n    }\n    peek() {\n        if (this.nodeStack_.length === 0) {\n            return null;\n        }\n        const node = this.nodeStack_[this.nodeStack_.length - 1];\n        if (this.resultGenerator_) {\n            return this.resultGenerator_(node.key, node.value);\n        }\n        else {\n            return { key: node.key, value: node.value };\n        }\n    }\n}\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nclass LLRBNode {\n    /**\n     * @param key - Key associated with this node.\n     * @param value - Value associated with this node.\n     * @param color - Whether this node is red.\n     * @param left - Left child.\n     * @param right - Right child.\n     */\n    constructor(key, value, color, left, right) {\n        this.key = key;\n        this.value = value;\n        this.color = color != null ? color : LLRBNode.RED;\n        this.left =\n            left != null ? left : SortedMap.EMPTY_NODE;\n        this.right =\n            right != null ? right : SortedMap.EMPTY_NODE;\n    }\n    /**\n     * Returns a copy of the current node, optionally replacing pieces of it.\n     *\n     * @param key - New key for the node, or null.\n     * @param value - New value for the node, or null.\n     * @param color - New color for the node, or null.\n     * @param left - New left child for the node, or null.\n     * @param right - New right child for the node, or null.\n     * @returns The node copy.\n     */\n    copy(key, value, color, left, right) {\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n    }\n    /**\n     * @returns The total number of nodes in the tree.\n     */\n    count() {\n        return this.left.count() + 1 + this.right.count();\n    }\n    /**\n     * @returns True if the tree is empty.\n     */\n    isEmpty() {\n        return false;\n    }\n    /**\n     * Traverses the tree in key order and calls the specified action function\n     * for each node.\n     *\n     * @param action - Callback function to be called for each\n     *   node.  If it returns true, traversal is aborted.\n     * @returns The first truthy value returned by action, or the last falsey\n     *   value returned by action\n     */\n    inorderTraversal(action) {\n        return (this.left.inorderTraversal(action) ||\n            !!action(this.key, this.value) ||\n            this.right.inorderTraversal(action));\n    }\n    /**\n     * Traverses the tree in reverse key order and calls the specified action function\n     * for each node.\n     *\n     * @param action - Callback function to be called for each\n     * node.  If it returns true, traversal is aborted.\n     * @returns True if traversal was aborted.\n     */\n    reverseTraversal(action) {\n        return (this.right.reverseTraversal(action) ||\n            action(this.key, this.value) ||\n            this.left.reverseTraversal(action));\n    }\n    /**\n     * @returns The minimum node in the tree.\n     */\n    min_() {\n        if (this.left.isEmpty()) {\n            return this;\n        }\n        else {\n            return this.left.min_();\n        }\n    }\n    /**\n     * @returns The maximum key in the tree.\n     */\n    minKey() {\n        return this.min_().key;\n    }\n    /**\n     * @returns The maximum key in the tree.\n     */\n    maxKey() {\n        if (this.right.isEmpty()) {\n            return this.key;\n        }\n        else {\n            return this.right.maxKey();\n        }\n    }\n    /**\n     * @param key - Key to insert.\n     * @param value - Value to insert.\n     * @param comparator - Comparator.\n     * @returns New tree, with the key/value added.\n     */\n    insert(key, value, comparator) {\n        let n = this;\n        const cmp = comparator(key, n.key);\n        if (cmp < 0) {\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n        }\n        else if (cmp === 0) {\n            n = n.copy(null, value, null, null, null);\n        }\n        else {\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n        }\n        return n.fixUp_();\n    }\n    /**\n     * @returns New tree, with the minimum key removed.\n     */\n    removeMin_() {\n        if (this.left.isEmpty()) {\n            return SortedMap.EMPTY_NODE;\n        }\n        let n = this;\n        if (!n.left.isRed_() && !n.left.left.isRed_()) {\n            n = n.moveRedLeft_();\n        }\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\n        return n.fixUp_();\n    }\n    /**\n     * @param key - The key of the item to remove.\n     * @param comparator - Comparator.\n     * @returns New tree, with the specified item removed.\n     */\n    remove(key, comparator) {\n        let n, smallest;\n        n = this;\n        if (comparator(key, n.key) < 0) {\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n                n = n.moveRedLeft_();\n            }\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n        }\n        else {\n            if (n.left.isRed_()) {\n                n = n.rotateRight_();\n            }\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n                n = n.moveRedRight_();\n            }\n            if (comparator(key, n.key) === 0) {\n                if (n.right.isEmpty()) {\n                    return SortedMap.EMPTY_NODE;\n                }\n                else {\n                    smallest = n.right.min_();\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\n                }\n            }\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n        }\n        return n.fixUp_();\n    }\n    /**\n     * @returns Whether this is a RED node.\n     */\n    isRed_() {\n        return this.color;\n    }\n    /**\n     * @returns New tree after performing any needed rotations.\n     */\n    fixUp_() {\n        let n = this;\n        if (n.right.isRed_() && !n.left.isRed_()) {\n            n = n.rotateLeft_();\n        }\n        if (n.left.isRed_() && n.left.left.isRed_()) {\n            n = n.rotateRight_();\n        }\n        if (n.left.isRed_() && n.right.isRed_()) {\n            n = n.colorFlip_();\n        }\n        return n;\n    }\n    /**\n     * @returns New tree, after moveRedLeft.\n     */\n    moveRedLeft_() {\n        let n = this.colorFlip_();\n        if (n.right.left.isRed_()) {\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\n            n = n.rotateLeft_();\n            n = n.colorFlip_();\n        }\n        return n;\n    }\n    /**\n     * @returns New tree, after moveRedRight.\n     */\n    moveRedRight_() {\n        let n = this.colorFlip_();\n        if (n.left.left.isRed_()) {\n            n = n.rotateRight_();\n            n = n.colorFlip_();\n        }\n        return n;\n    }\n    /**\n     * @returns New tree, after rotateLeft.\n     */\n    rotateLeft_() {\n        const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n        return this.right.copy(null, null, this.color, nl, null);\n    }\n    /**\n     * @returns New tree, after rotateRight.\n     */\n    rotateRight_() {\n        const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n        return this.left.copy(null, null, this.color, null, nr);\n    }\n    /**\n     * @returns Newt ree, after colorFlip.\n     */\n    colorFlip_() {\n        const left = this.left.copy(null, null, !this.left.color, null, null);\n        const right = this.right.copy(null, null, !this.right.color, null, null);\n        return this.copy(null, null, !this.color, left, right);\n    }\n    /**\n     * For testing.\n     *\n     * @returns True if all is well.\n     */\n    checkMaxDepth_() {\n        const blackDepth = this.check_();\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\n    }\n    check_() {\n        if (this.isRed_() && this.left.isRed_()) {\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\n        }\n        if (this.right.isRed_()) {\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\n        }\n        const blackDepth = this.left.check_();\n        if (blackDepth !== this.right.check_()) {\n            throw new Error('Black depths differ');\n        }\n        else {\n            return blackDepth + (this.isRed_() ? 0 : 1);\n        }\n    }\n}\nLLRBNode.RED = true;\nLLRBNode.BLACK = false;\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nclass LLRBEmptyNode {\n    /**\n     * Returns a copy of the current node.\n     *\n     * @returns The node copy.\n     */\n    copy(key, value, color, left, right) {\n        return this;\n    }\n    /**\n     * Returns a copy of the tree, with the specified key/value added.\n     *\n     * @param key - Key to be added.\n     * @param value - Value to be added.\n     * @param comparator - Comparator.\n     * @returns New tree, with item added.\n     */\n    insert(key, value, comparator) {\n        return new LLRBNode(key, value, null);\n    }\n    /**\n     * Returns a copy of the tree, with the specified key removed.\n     *\n     * @param key - The key to remove.\n     * @param comparator - Comparator.\n     * @returns New tree, with item removed.\n     */\n    remove(key, comparator) {\n        return this;\n    }\n    /**\n     * @returns The total number of nodes in the tree.\n     */\n    count() {\n        return 0;\n    }\n    /**\n     * @returns True if the tree is empty.\n     */\n    isEmpty() {\n        return true;\n    }\n    /**\n     * Traverses the tree in key order and calls the specified action function\n     * for each node.\n     *\n     * @param action - Callback function to be called for each\n     * node.  If it returns true, traversal is aborted.\n     * @returns True if traversal was aborted.\n     */\n    inorderTraversal(action) {\n        return false;\n    }\n    /**\n     * Traverses the tree in reverse key order and calls the specified action function\n     * for each node.\n     *\n     * @param action - Callback function to be called for each\n     * node.  If it returns true, traversal is aborted.\n     * @returns True if traversal was aborted.\n     */\n    reverseTraversal(action) {\n        return false;\n    }\n    minKey() {\n        return null;\n    }\n    maxKey() {\n        return null;\n    }\n    check_() {\n        return 0;\n    }\n    /**\n     * @returns Whether this node is red.\n     */\n    isRed_() {\n        return false;\n    }\n}\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nclass SortedMap {\n    /**\n     * @param comparator_ - Key comparator.\n     * @param root_ - Optional root node for the map.\n     */\n    constructor(comparator_, root_ = SortedMap.EMPTY_NODE) {\n        this.comparator_ = comparator_;\n        this.root_ = root_;\n    }\n    /**\n     * Returns a copy of the map, with the specified key/value added or replaced.\n     * (TODO: We should perhaps rename this method to 'put')\n     *\n     * @param key - Key to be added.\n     * @param value - Value to be added.\n     * @returns New map, with item added.\n     */\n    insert(key, value) {\n        return new SortedMap(this.comparator_, this.root_\n            .insert(key, value, this.comparator_)\n            .copy(null, null, LLRBNode.BLACK, null, null));\n    }\n    /**\n     * Returns a copy of the map, with the specified key removed.\n     *\n     * @param key - The key to remove.\n     * @returns New map, with item removed.\n     */\n    remove(key) {\n        return new SortedMap(this.comparator_, this.root_\n            .remove(key, this.comparator_)\n            .copy(null, null, LLRBNode.BLACK, null, null));\n    }\n    /**\n     * Returns the value of the node with the given key, or null.\n     *\n     * @param key - The key to look up.\n     * @returns The value of the node with the given key, or null if the\n     * key doesn't exist.\n     */\n    get(key) {\n        let cmp;\n        let node = this.root_;\n        while (!node.isEmpty()) {\n            cmp = this.comparator_(key, node.key);\n            if (cmp === 0) {\n                return node.value;\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                node = node.right;\n            }\n        }\n        return null;\n    }\n    /**\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\n     * @param key - The key to find the predecessor of\n     * @returns The predecessor key.\n     */\n    getPredecessorKey(key) {\n        let cmp, node = this.root_, rightParent = null;\n        while (!node.isEmpty()) {\n            cmp = this.comparator_(key, node.key);\n            if (cmp === 0) {\n                if (!node.left.isEmpty()) {\n                    node = node.left;\n                    while (!node.right.isEmpty()) {\n                        node = node.right;\n                    }\n                    return node.key;\n                }\n                else if (rightParent) {\n                    return rightParent.key;\n                }\n                else {\n                    return null; // first item.\n                }\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                rightParent = node;\n                node = node.right;\n            }\n        }\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\n    }\n    /**\n     * @returns True if the map is empty.\n     */\n    isEmpty() {\n        return this.root_.isEmpty();\n    }\n    /**\n     * @returns The total number of nodes in the map.\n     */\n    count() {\n        return this.root_.count();\n    }\n    /**\n     * @returns The minimum key in the map.\n     */\n    minKey() {\n        return this.root_.minKey();\n    }\n    /**\n     * @returns The maximum key in the map.\n     */\n    maxKey() {\n        return this.root_.maxKey();\n    }\n    /**\n     * Traverses the map in key order and calls the specified action function\n     * for each key/value pair.\n     *\n     * @param action - Callback function to be called\n     * for each key/value pair.  If action returns true, traversal is aborted.\n     * @returns The first truthy value returned by action, or the last falsey\n     *   value returned by action\n     */\n    inorderTraversal(action) {\n        return this.root_.inorderTraversal(action);\n    }\n    /**\n     * Traverses the map in reverse key order and calls the specified action function\n     * for each key/value pair.\n     *\n     * @param action - Callback function to be called\n     * for each key/value pair.  If action returns true, traversal is aborted.\n     * @returns True if the traversal was aborted.\n     */\n    reverseTraversal(action) {\n        return this.root_.reverseTraversal(action);\n    }\n    /**\n     * Returns an iterator over the SortedMap.\n     * @returns The iterator.\n     */\n    getIterator(resultGenerator) {\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\n    }\n    getIteratorFrom(key, resultGenerator) {\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\n    }\n    getReverseIteratorFrom(key, resultGenerator) {\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\n    }\n    getReverseIterator(resultGenerator) {\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\n    }\n}\n/**\n * Always use the same empty node, to reduce memory.\n */\nSortedMap.EMPTY_NODE = new LLRBEmptyNode();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction NAME_ONLY_COMPARATOR(left, right) {\n    return nameCompare(left.name, right.name);\n}\nfunction NAME_COMPARATOR(left, right) {\n    return nameCompare(left, right);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet MAX_NODE$2;\nfunction setMaxNode$1(val) {\n    MAX_NODE$2 = val;\n}\nconst priorityHashText = function (priority) {\n    if (typeof priority === 'number') {\n        return 'number:' + doubleToIEEE754String(priority);\n    }\n    else {\n        return 'string:' + priority;\n    }\n};\n/**\n * Validates that a priority snapshot Node is valid.\n */\nconst validatePriorityNode = function (priorityNode) {\n    if (priorityNode.isLeafNode()) {\n        const val = priorityNode.val();\n        assert(typeof val === 'string' ||\n            typeof val === 'number' ||\n            (typeof val === 'object' && contains(val, '.sv')), 'Priority must be a string or number.');\n    }\n    else {\n        assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), 'priority of unexpected type.');\n    }\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n    assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet __childrenNodeConstructor;\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nclass LeafNode {\n    /**\n     * @param value_ - The value to store in this leaf node. The object type is\n     * possible in the event of a deferred value\n     * @param priorityNode_ - The priority of this node.\n     */\n    constructor(value_, priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n        this.value_ = value_;\n        this.priorityNode_ = priorityNode_;\n        this.lazyHash_ = null;\n        assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\n        validatePriorityNode(this.priorityNode_);\n    }\n    static set __childrenNodeConstructor(val) {\n        __childrenNodeConstructor = val;\n    }\n    static get __childrenNodeConstructor() {\n        return __childrenNodeConstructor;\n    }\n    /** @inheritDoc */\n    isLeafNode() {\n        return true;\n    }\n    /** @inheritDoc */\n    getPriority() {\n        return this.priorityNode_;\n    }\n    /** @inheritDoc */\n    updatePriority(newPriorityNode) {\n        return new LeafNode(this.value_, newPriorityNode);\n    }\n    /** @inheritDoc */\n    getImmediateChild(childName) {\n        // Hack to treat priority as a regular child\n        if (childName === '.priority') {\n            return this.priorityNode_;\n        }\n        else {\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n        }\n    }\n    /** @inheritDoc */\n    getChild(path) {\n        if (pathIsEmpty(path)) {\n            return this;\n        }\n        else if (pathGetFront(path) === '.priority') {\n            return this.priorityNode_;\n        }\n        else {\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n        }\n    }\n    hasChild() {\n        return false;\n    }\n    /** @inheritDoc */\n    getPredecessorChildName(childName, childNode) {\n        return null;\n    }\n    /** @inheritDoc */\n    updateImmediateChild(childName, newChildNode) {\n        if (childName === '.priority') {\n            return this.updatePriority(newChildNode);\n        }\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\n            return this;\n        }\n        else {\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\n        }\n    }\n    /** @inheritDoc */\n    updateChild(path, newChildNode) {\n        const front = pathGetFront(path);\n        if (front === null) {\n            return newChildNode;\n        }\n        else if (newChildNode.isEmpty() && front !== '.priority') {\n            return this;\n        }\n        else {\n            assert(front !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));\n        }\n    }\n    /** @inheritDoc */\n    isEmpty() {\n        return false;\n    }\n    /** @inheritDoc */\n    numChildren() {\n        return 0;\n    }\n    /** @inheritDoc */\n    forEachChild(index, action) {\n        return false;\n    }\n    val(exportFormat) {\n        if (exportFormat && !this.getPriority().isEmpty()) {\n            return {\n                '.value': this.getValue(),\n                '.priority': this.getPriority().val()\n            };\n        }\n        else {\n            return this.getValue();\n        }\n    }\n    /** @inheritDoc */\n    hash() {\n        if (this.lazyHash_ === null) {\n            let toHash = '';\n            if (!this.priorityNode_.isEmpty()) {\n                toHash +=\n                    'priority:' +\n                        priorityHashText(this.priorityNode_.val()) +\n                        ':';\n            }\n            const type = typeof this.value_;\n            toHash += type + ':';\n            if (type === 'number') {\n                toHash += doubleToIEEE754String(this.value_);\n            }\n            else {\n                toHash += this.value_;\n            }\n            this.lazyHash_ = sha1(toHash);\n        }\n        return this.lazyHash_;\n    }\n    /**\n     * Returns the value of the leaf node.\n     * @returns The value of the node.\n     */\n    getValue() {\n        return this.value_;\n    }\n    compareTo(other) {\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n            return 1;\n        }\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\n            return -1;\n        }\n        else {\n            assert(other.isLeafNode(), 'Unknown node type');\n            return this.compareToLeafNode_(other);\n        }\n    }\n    /**\n     * Comparison specifically for two leaf nodes\n     */\n    compareToLeafNode_(otherLeaf) {\n        const otherLeafType = typeof otherLeaf.value_;\n        const thisLeafType = typeof this.value_;\n        const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n        const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n        assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n        assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n        if (otherIndex === thisIndex) {\n            // Same type, compare values\n            if (thisLeafType === 'object') {\n                // Deferred value nodes are all equal, but we should also never get to this point...\n                return 0;\n            }\n            else {\n                // Note that this works because true > false, all others are number or string comparisons\n                if (this.value_ < otherLeaf.value_) {\n                    return -1;\n                }\n                else if (this.value_ === otherLeaf.value_) {\n                    return 0;\n                }\n                else {\n                    return 1;\n                }\n            }\n        }\n        else {\n            return thisIndex - otherIndex;\n        }\n    }\n    withIndex() {\n        return this;\n    }\n    isIndexed() {\n        return true;\n    }\n    equals(other) {\n        if (other === this) {\n            return true;\n        }\n        else if (other.isLeafNode()) {\n            const otherLeaf = other;\n            return (this.value_ === otherLeaf.value_ &&\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\n        }\n        else {\n            return false;\n        }\n    }\n}\n/**\n * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n * the same type, the comparison falls back to their value\n */\nLeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet nodeFromJSON$1;\nlet MAX_NODE$1;\nfunction setNodeFromJSON(val) {\n    nodeFromJSON$1 = val;\n}\nfunction setMaxNode(val) {\n    MAX_NODE$1 = val;\n}\nclass PriorityIndex extends Index {\n    compare(a, b) {\n        const aPriority = a.node.getPriority();\n        const bPriority = b.node.getPriority();\n        const indexCmp = aPriority.compareTo(bPriority);\n        if (indexCmp === 0) {\n            return nameCompare(a.name, b.name);\n        }\n        else {\n            return indexCmp;\n        }\n    }\n    isDefinedOn(node) {\n        return !node.getPriority().isEmpty();\n    }\n    indexedValueChanged(oldNode, newNode) {\n        return !oldNode.getPriority().equals(newNode.getPriority());\n    }\n    minPost() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return NamedNode.MIN;\n    }\n    maxPost() {\n        return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\n    }\n    makePost(indexValue, name) {\n        const priorityNode = nodeFromJSON$1(indexValue);\n        return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n    }\n    /**\n     * @returns String representation for inclusion in a query spec\n     */\n    toString() {\n        return '.priority';\n    }\n}\nconst PRIORITY_INDEX = new PriorityIndex();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst LOG_2 = Math.log(2);\nclass Base12Num {\n    constructor(length) {\n        const logBase2 = (num) => \n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        parseInt((Math.log(num) / LOG_2), 10);\n        const bitMask = (bits) => parseInt(Array(bits + 1).join('1'), 2);\n        this.count = logBase2(length + 1);\n        this.current_ = this.count - 1;\n        const mask = bitMask(this.count);\n        this.bits_ = (length + 1) & mask;\n    }\n    nextBitIsOne() {\n        //noinspection JSBitwiseOperatorUsage\n        const result = !(this.bits_ & (0x1 << this.current_));\n        this.current_--;\n        return result;\n    }\n}\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nconst buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\n    childList.sort(cmp);\n    const buildBalancedTree = function (low, high) {\n        const length = high - low;\n        let namedNode;\n        let key;\n        if (length === 0) {\n            return null;\n        }\n        else if (length === 1) {\n            namedNode = childList[low];\n            key = keyFn ? keyFn(namedNode) : namedNode;\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const middle = parseInt((length / 2), 10) + low;\n            const left = buildBalancedTree(low, middle);\n            const right = buildBalancedTree(middle + 1, high);\n            namedNode = childList[middle];\n            key = keyFn ? keyFn(namedNode) : namedNode;\n            return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\n        }\n    };\n    const buildFrom12Array = function (base12) {\n        let node = null;\n        let root = null;\n        let index = childList.length;\n        const buildPennant = function (chunkSize, color) {\n            const low = index - chunkSize;\n            const high = index;\n            index -= chunkSize;\n            const childTree = buildBalancedTree(low + 1, high);\n            const namedNode = childList[low];\n            const key = keyFn ? keyFn(namedNode) : namedNode;\n            attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\n        };\n        const attachPennant = function (pennant) {\n            if (node) {\n                node.left = pennant;\n                node = pennant;\n            }\n            else {\n                root = pennant;\n                node = pennant;\n            }\n        };\n        for (let i = 0; i < base12.count; ++i) {\n            const isOne = base12.nextBitIsOne();\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n            const chunkSize = Math.pow(2, base12.count - (i + 1));\n            if (isOne) {\n                buildPennant(chunkSize, LLRBNode.BLACK);\n            }\n            else {\n                // current == 2\n                buildPennant(chunkSize, LLRBNode.BLACK);\n                buildPennant(chunkSize, LLRBNode.RED);\n            }\n        }\n        return root;\n    };\n    const base12 = new Base12Num(childList.length);\n    const root = buildFrom12Array(base12);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new SortedMap(mapSortFn || cmp, root);\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet _defaultIndexMap;\nconst fallbackObject = {};\nclass IndexMap {\n    constructor(indexes_, indexSet_) {\n        this.indexes_ = indexes_;\n        this.indexSet_ = indexSet_;\n    }\n    /**\n     * The default IndexMap for nodes without a priority\n     */\n    static get Default() {\n        assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\n        _defaultIndexMap =\n            _defaultIndexMap ||\n                new IndexMap({ '.priority': fallbackObject }, { '.priority': PRIORITY_INDEX });\n        return _defaultIndexMap;\n    }\n    get(indexKey) {\n        const sortedMap = safeGet(this.indexes_, indexKey);\n        if (!sortedMap) {\n            throw new Error('No index defined for ' + indexKey);\n        }\n        if (sortedMap instanceof SortedMap) {\n            return sortedMap;\n        }\n        else {\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n            // regular child map\n            return null;\n        }\n    }\n    hasIndex(indexDefinition) {\n        return contains(this.indexSet_, indexDefinition.toString());\n    }\n    addIndex(indexDefinition, existingChildren) {\n        assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\n        const childList = [];\n        let sawIndexedValue = false;\n        const iter = existingChildren.getIterator(NamedNode.Wrap);\n        let next = iter.getNext();\n        while (next) {\n            sawIndexedValue =\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n            childList.push(next);\n            next = iter.getNext();\n        }\n        let newIndex;\n        if (sawIndexedValue) {\n            newIndex = buildChildSet(childList, indexDefinition.getCompare());\n        }\n        else {\n            newIndex = fallbackObject;\n        }\n        const indexName = indexDefinition.toString();\n        const newIndexSet = Object.assign({}, this.indexSet_);\n        newIndexSet[indexName] = indexDefinition;\n        const newIndexes = Object.assign({}, this.indexes_);\n        newIndexes[indexName] = newIndex;\n        return new IndexMap(newIndexes, newIndexSet);\n    }\n    /**\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\n     */\n    addToIndexes(namedNode, existingChildren) {\n        const newIndexes = map(this.indexes_, (indexedChildren, indexName) => {\n            const index = safeGet(this.indexSet_, indexName);\n            assert(index, 'Missing index implementation for ' + indexName);\n            if (indexedChildren === fallbackObject) {\n                // Check to see if we need to index everything\n                if (index.isDefinedOn(namedNode.node)) {\n                    // We need to build this index\n                    const childList = [];\n                    const iter = existingChildren.getIterator(NamedNode.Wrap);\n                    let next = iter.getNext();\n                    while (next) {\n                        if (next.name !== namedNode.name) {\n                            childList.push(next);\n                        }\n                        next = iter.getNext();\n                    }\n                    childList.push(namedNode);\n                    return buildChildSet(childList, index.getCompare());\n                }\n                else {\n                    // No change, this remains a fallback\n                    return fallbackObject;\n                }\n            }\n            else {\n                const existingSnap = existingChildren.get(namedNode.name);\n                let newChildren = indexedChildren;\n                if (existingSnap) {\n                    newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\n                }\n                return newChildren.insert(namedNode, namedNode.node);\n            }\n        });\n        return new IndexMap(newIndexes, this.indexSet_);\n    }\n    /**\n     * Create a new IndexMap instance with the given value removed\n     */\n    removeFromIndexes(namedNode, existingChildren) {\n        const newIndexes = map(this.indexes_, (indexedChildren) => {\n            if (indexedChildren === fallbackObject) {\n                // This is the fallback. Just return it, nothing to do in this case\n                return indexedChildren;\n            }\n            else {\n                const existingSnap = existingChildren.get(namedNode.name);\n                if (existingSnap) {\n                    return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\n                }\n                else {\n                    // No record of this child\n                    return indexedChildren;\n                }\n            }\n        });\n        return new IndexMap(newIndexes, this.indexSet_);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\nlet EMPTY_NODE;\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nclass ChildrenNode {\n    /**\n     * @param children_ - List of children of this node..\n     * @param priorityNode_ - The priority of this node (as a snapshot node).\n     */\n    constructor(children_, priorityNode_, indexMap_) {\n        this.children_ = children_;\n        this.priorityNode_ = priorityNode_;\n        this.indexMap_ = indexMap_;\n        this.lazyHash_ = null;\n        /**\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n         * class instead of an empty ChildrenNode.\n         */\n        if (this.priorityNode_) {\n            validatePriorityNode(this.priorityNode_);\n        }\n        if (this.children_.isEmpty()) {\n            assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\n        }\n    }\n    static get EMPTY_NODE() {\n        return (EMPTY_NODE ||\n            (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default)));\n    }\n    /** @inheritDoc */\n    isLeafNode() {\n        return false;\n    }\n    /** @inheritDoc */\n    getPriority() {\n        return this.priorityNode_ || EMPTY_NODE;\n    }\n    /** @inheritDoc */\n    updatePriority(newPriorityNode) {\n        if (this.children_.isEmpty()) {\n            // Don't allow priorities on empty nodes\n            return this;\n        }\n        else {\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n        }\n    }\n    /** @inheritDoc */\n    getImmediateChild(childName) {\n        // Hack to treat priority as a regular child\n        if (childName === '.priority') {\n            return this.getPriority();\n        }\n        else {\n            const child = this.children_.get(childName);\n            return child === null ? EMPTY_NODE : child;\n        }\n    }\n    /** @inheritDoc */\n    getChild(path) {\n        const front = pathGetFront(path);\n        if (front === null) {\n            return this;\n        }\n        return this.getImmediateChild(front).getChild(pathPopFront(path));\n    }\n    /** @inheritDoc */\n    hasChild(childName) {\n        return this.children_.get(childName) !== null;\n    }\n    /** @inheritDoc */\n    updateImmediateChild(childName, newChildNode) {\n        assert(newChildNode, 'We should always be passing snapshot nodes');\n        if (childName === '.priority') {\n            return this.updatePriority(newChildNode);\n        }\n        else {\n            const namedNode = new NamedNode(childName, newChildNode);\n            let newChildren, newIndexMap;\n            if (newChildNode.isEmpty()) {\n                newChildren = this.children_.remove(childName);\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\n            }\n            else {\n                newChildren = this.children_.insert(childName, newChildNode);\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n            }\n            const newPriority = newChildren.isEmpty()\n                ? EMPTY_NODE\n                : this.priorityNode_;\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\n        }\n    }\n    /** @inheritDoc */\n    updateChild(path, newChildNode) {\n        const front = pathGetFront(path);\n        if (front === null) {\n            return newChildNode;\n        }\n        else {\n            assert(pathGetFront(path) !== '.priority' || pathGetLength(path) === 1, '.priority must be the last token in a path');\n            const newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);\n            return this.updateImmediateChild(front, newImmediateChild);\n        }\n    }\n    /** @inheritDoc */\n    isEmpty() {\n        return this.children_.isEmpty();\n    }\n    /** @inheritDoc */\n    numChildren() {\n        return this.children_.count();\n    }\n    /** @inheritDoc */\n    val(exportFormat) {\n        if (this.isEmpty()) {\n            return null;\n        }\n        const obj = {};\n        let numKeys = 0, maxKey = 0, allIntegerKeys = true;\n        this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n            obj[key] = childNode.val(exportFormat);\n            numKeys++;\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n                maxKey = Math.max(maxKey, Number(key));\n            }\n            else {\n                allIntegerKeys = false;\n            }\n        });\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n            // convert to array.\n            const array = [];\n            // eslint-disable-next-line guard-for-in\n            for (const key in obj) {\n                array[key] = obj[key];\n            }\n            return array;\n        }\n        else {\n            if (exportFormat && !this.getPriority().isEmpty()) {\n                obj['.priority'] = this.getPriority().val();\n            }\n            return obj;\n        }\n    }\n    /** @inheritDoc */\n    hash() {\n        if (this.lazyHash_ === null) {\n            let toHash = '';\n            if (!this.getPriority().isEmpty()) {\n                toHash +=\n                    'priority:' +\n                        priorityHashText(this.getPriority().val()) +\n                        ':';\n            }\n            this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n                const childHash = childNode.hash();\n                if (childHash !== '') {\n                    toHash += ':' + key + ':' + childHash;\n                }\n            });\n            this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n        }\n        return this.lazyHash_;\n    }\n    /** @inheritDoc */\n    getPredecessorChildName(childName, childNode, index) {\n        const idx = this.resolveIndex_(index);\n        if (idx) {\n            const predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\n            return predecessor ? predecessor.name : null;\n        }\n        else {\n            return this.children_.getPredecessorKey(childName);\n        }\n    }\n    getFirstChildName(indexDefinition) {\n        const idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            const minKey = idx.minKey();\n            return minKey && minKey.name;\n        }\n        else {\n            return this.children_.minKey();\n        }\n    }\n    getFirstChild(indexDefinition) {\n        const minKey = this.getFirstChildName(indexDefinition);\n        if (minKey) {\n            return new NamedNode(minKey, this.children_.get(minKey));\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Given an index, return the key name of the largest value we have, according to that index\n     */\n    getLastChildName(indexDefinition) {\n        const idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            const maxKey = idx.maxKey();\n            return maxKey && maxKey.name;\n        }\n        else {\n            return this.children_.maxKey();\n        }\n    }\n    getLastChild(indexDefinition) {\n        const maxKey = this.getLastChildName(indexDefinition);\n        if (maxKey) {\n            return new NamedNode(maxKey, this.children_.get(maxKey));\n        }\n        else {\n            return null;\n        }\n    }\n    forEachChild(index, action) {\n        const idx = this.resolveIndex_(index);\n        if (idx) {\n            return idx.inorderTraversal(wrappedNode => {\n                return action(wrappedNode.name, wrappedNode.node);\n            });\n        }\n        else {\n            return this.children_.inorderTraversal(action);\n        }\n    }\n    getIterator(indexDefinition) {\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n    }\n    getIteratorFrom(startPost, indexDefinition) {\n        const idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            return idx.getIteratorFrom(startPost, key => key);\n        }\n        else {\n            const iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\n            let next = iterator.peek();\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\n                iterator.getNext();\n                next = iterator.peek();\n            }\n            return iterator;\n        }\n    }\n    getReverseIterator(indexDefinition) {\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\n    }\n    getReverseIteratorFrom(endPost, indexDefinition) {\n        const idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            return idx.getReverseIteratorFrom(endPost, key => {\n                return key;\n            });\n        }\n        else {\n            const iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\n            let next = iterator.peek();\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\n                iterator.getNext();\n                next = iterator.peek();\n            }\n            return iterator;\n        }\n    }\n    compareTo(other) {\n        if (this.isEmpty()) {\n            if (other.isEmpty()) {\n                return 0;\n            }\n            else {\n                return -1;\n            }\n        }\n        else if (other.isLeafNode() || other.isEmpty()) {\n            return 1;\n        }\n        else if (other === MAX_NODE) {\n            return -1;\n        }\n        else {\n            // Must be another node with children.\n            return 0;\n        }\n    }\n    withIndex(indexDefinition) {\n        if (indexDefinition === KEY_INDEX ||\n            this.indexMap_.hasIndex(indexDefinition)) {\n            return this;\n        }\n        else {\n            const newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n        }\n    }\n    isIndexed(index) {\n        return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n    }\n    equals(other) {\n        if (other === this) {\n            return true;\n        }\n        else if (other.isLeafNode()) {\n            return false;\n        }\n        else {\n            const otherChildrenNode = other;\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n                return false;\n            }\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\n                const thisIter = this.getIterator(PRIORITY_INDEX);\n                const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n                let thisCurrent = thisIter.getNext();\n                let otherCurrent = otherIter.getNext();\n                while (thisCurrent && otherCurrent) {\n                    if (thisCurrent.name !== otherCurrent.name ||\n                        !thisCurrent.node.equals(otherCurrent.node)) {\n                        return false;\n                    }\n                    thisCurrent = thisIter.getNext();\n                    otherCurrent = otherIter.getNext();\n                }\n                return thisCurrent === null && otherCurrent === null;\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    /**\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n     * instead.\n     *\n     */\n    resolveIndex_(indexDefinition) {\n        if (indexDefinition === KEY_INDEX) {\n            return null;\n        }\n        else {\n            return this.indexMap_.get(indexDefinition.toString());\n        }\n    }\n}\nChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\nclass MaxNode extends ChildrenNode {\n    constructor() {\n        super(new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default);\n    }\n    compareTo(other) {\n        if (other === this) {\n            return 0;\n        }\n        else {\n            return 1;\n        }\n    }\n    equals(other) {\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\n        return other === this;\n    }\n    getPriority() {\n        return this;\n    }\n    getImmediateChild(childName) {\n        return ChildrenNode.EMPTY_NODE;\n    }\n    isEmpty() {\n        return false;\n    }\n}\n/**\n * Marker that will sort higher than any other snapshot.\n */\nconst MAX_NODE = new MaxNode();\nObject.defineProperties(NamedNode, {\n    MIN: {\n        value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n    },\n    MAX: {\n        value: new NamedNode(MAX_NAME, MAX_NODE)\n    }\n});\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode$1(MAX_NODE);\nsetMaxNode(MAX_NODE);\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst USE_HINZE = true;\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nfunction nodeFromJSON(json, priority = null) {\n    if (json === null) {\n        return ChildrenNode.EMPTY_NODE;\n    }\n    if (typeof json === 'object' && '.priority' in json) {\n        priority = json['.priority'];\n    }\n    assert(priority === null ||\n        typeof priority === 'string' ||\n        typeof priority === 'number' ||\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n        json = json['.value'];\n    }\n    // Valid leaf nodes include non-objects or server-value wrapper objects\n    if (typeof json !== 'object' || '.sv' in json) {\n        const jsonLeaf = json;\n        return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n    }\n    if (!(json instanceof Array) && USE_HINZE) {\n        const children = [];\n        let childrenHavePriority = false;\n        const hinzeJsonObj = json;\n        each(hinzeJsonObj, (key, child) => {\n            if (key.substring(0, 1) !== '.') {\n                // Ignore metadata nodes\n                const childNode = nodeFromJSON(child);\n                if (!childNode.isEmpty()) {\n                    childrenHavePriority =\n                        childrenHavePriority || !childNode.getPriority().isEmpty();\n                    children.push(new NamedNode(key, childNode));\n                }\n            }\n        });\n        if (children.length === 0) {\n            return ChildrenNode.EMPTY_NODE;\n        }\n        const childSet = buildChildSet(children, NAME_ONLY_COMPARATOR, namedNode => namedNode.name, NAME_COMPARATOR);\n        if (childrenHavePriority) {\n            const sortedChildSet = buildChildSet(children, PRIORITY_INDEX.getCompare());\n            return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ '.priority': sortedChildSet }, { '.priority': PRIORITY_INDEX }));\n        }\n        else {\n            return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);\n        }\n    }\n    else {\n        let node = ChildrenNode.EMPTY_NODE;\n        each(json, (key, childData) => {\n            if (contains(json, key)) {\n                if (key.substring(0, 1) !== '.') {\n                    // ignore metadata nodes.\n                    const childNode = nodeFromJSON(childData);\n                    if (childNode.isLeafNode() || !childNode.isEmpty()) {\n                        node = node.updateImmediateChild(key, childNode);\n                    }\n                }\n            }\n        });\n        return node.updatePriority(nodeFromJSON(priority));\n    }\n}\nsetNodeFromJSON(nodeFromJSON);\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass PathIndex extends Index {\n    constructor(indexPath_) {\n        super();\n        this.indexPath_ = indexPath_;\n        assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\n    }\n    extractChild(snap) {\n        return snap.getChild(this.indexPath_);\n    }\n    isDefinedOn(node) {\n        return !node.getChild(this.indexPath_).isEmpty();\n    }\n    compare(a, b) {\n        const aChild = this.extractChild(a.node);\n        const bChild = this.extractChild(b.node);\n        const indexCmp = aChild.compareTo(bChild);\n        if (indexCmp === 0) {\n            return nameCompare(a.name, b.name);\n        }\n        else {\n            return indexCmp;\n        }\n    }\n    makePost(indexValue, name) {\n        const valueNode = nodeFromJSON(indexValue);\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\n        return new NamedNode(name, node);\n    }\n    maxPost() {\n        const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n        return new NamedNode(MAX_NAME, node);\n    }\n    toString() {\n        return pathSlice(this.indexPath_, 0).join('/');\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass ValueIndex extends Index {\n    compare(a, b) {\n        const indexCmp = a.node.compareTo(b.node);\n        if (indexCmp === 0) {\n            return nameCompare(a.name, b.name);\n        }\n        else {\n            return indexCmp;\n        }\n    }\n    isDefinedOn(node) {\n        return true;\n    }\n    indexedValueChanged(oldNode, newNode) {\n        return !oldNode.equals(newNode);\n    }\n    minPost() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return NamedNode.MIN;\n    }\n    maxPost() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return NamedNode.MAX;\n    }\n    makePost(indexValue, name) {\n        const valueNode = nodeFromJSON(indexValue);\n        return new NamedNode(name, valueNode);\n    }\n    /**\n     * @returns String representation for inclusion in a query spec\n     */\n    toString() {\n        return '.value';\n    }\n}\nconst VALUE_INDEX = new ValueIndex();\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\nconst MIN_PUSH_CHAR = '-';\nconst MAX_PUSH_CHAR = 'z';\nconst MAX_KEY_LEN = 786;\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nconst nextPushId = (function () {\n    // Timestamp of last push, used to prevent local collisions if you push twice\n    // in one ms.\n    let lastPushTime = 0;\n    // We generate 72-bits of randomness which get turned into 12 characters and\n    // appended to the timestamp to prevent collisions with other clients. We\n    // store the last characters we generated because in the event of a collision,\n    // we'll use those same characters except \"incremented\" by one.\n    const lastRandChars = [];\n    return function (now) {\n        const duplicateTime = now === lastPushTime;\n        lastPushTime = now;\n        let i;\n        const timeStampChars = new Array(8);\n        for (i = 7; i >= 0; i--) {\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n            // NOTE: Can't use << here because javascript will convert to int and lose\n            // the upper bits.\n            now = Math.floor(now / 64);\n        }\n        assert(now === 0, 'Cannot push at time == 0');\n        let id = timeStampChars.join('');\n        if (!duplicateTime) {\n            for (i = 0; i < 12; i++) {\n                lastRandChars[i] = Math.floor(Math.random() * 64);\n            }\n        }\n        else {\n            // If the timestamp hasn't changed since last push, use the same random\n            // number, except incremented by 1.\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n                lastRandChars[i] = 0;\n            }\n            lastRandChars[i]++;\n        }\n        for (i = 0; i < 12; i++) {\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\n        }\n        assert(id.length === 20, 'nextPushId: Length should be 20.');\n        return id;\n    };\n})();\nconst successor = function (key) {\n    if (key === '' + INTEGER_32_MAX) {\n        // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n        return MIN_PUSH_CHAR;\n    }\n    const keyAsInt = tryParseInt(key);\n    if (keyAsInt != null) {\n        return '' + (keyAsInt + 1);\n    }\n    const next = new Array(key.length);\n    for (let i = 0; i < next.length; i++) {\n        next[i] = key.charAt(i);\n    }\n    if (next.length < MAX_KEY_LEN) {\n        next.push(MIN_PUSH_CHAR);\n        return next.join('');\n    }\n    let i = next.length - 1;\n    while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n        i--;\n    }\n    // `successor` was called on the largest possible key, so return the\n    // MAX_NAME, which sorts larger than all keys.\n    if (i === -1) {\n        return MAX_NAME;\n    }\n    const source = next[i];\n    const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n    next[i] = sourcePlusOne;\n    return next.slice(0, i + 1).join('');\n};\n// `key` is assumed to be non-empty.\nconst predecessor = function (key) {\n    if (key === '' + INTEGER_32_MIN) {\n        return MIN_NAME;\n    }\n    const keyAsInt = tryParseInt(key);\n    if (keyAsInt != null) {\n        return '' + (keyAsInt - 1);\n    }\n    const next = new Array(key.length);\n    for (let i = 0; i < next.length; i++) {\n        next[i] = key.charAt(i);\n    }\n    // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n    // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n    // than that, `predecessor(predecessor(key))`, is\n    //\n    // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n    //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n    //\n    // analogous to increment/decrement for base-10 integers.\n    //\n    // This works because lexigographic comparison works character-by-character,\n    // using length as a tie-breaker if one key is a prefix of the other.\n    if (next[next.length - 1] === MIN_PUSH_CHAR) {\n        if (next.length === 1) {\n            // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n            return '' + INTEGER_32_MAX;\n        }\n        delete next[next.length - 1];\n        return next.join('');\n    }\n    // Replace the last character with it's immediate predecessor, and\n    // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n    // lexicographically largest possible key smaller than `key`.\n    next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);\n    return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction changeValue(snapshotNode) {\n    return { type: \"value\" /* VALUE */, snapshotNode };\n}\nfunction changeChildAdded(childName, snapshotNode) {\n    return { type: \"child_added\" /* CHILD_ADDED */, snapshotNode, childName };\n}\nfunction changeChildRemoved(childName, snapshotNode) {\n    return { type: \"child_removed\" /* CHILD_REMOVED */, snapshotNode, childName };\n}\nfunction changeChildChanged(childName, snapshotNode, oldSnap) {\n    return {\n        type: \"child_changed\" /* CHILD_CHANGED */,\n        snapshotNode,\n        childName,\n        oldSnap\n    };\n}\nfunction changeChildMoved(childName, snapshotNode) {\n    return { type: \"child_moved\" /* CHILD_MOVED */, snapshotNode, childName };\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nclass IndexedFilter {\n    constructor(index_) {\n        this.index_ = index_;\n    }\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n        assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\n        const oldChild = snap.getImmediateChild(key);\n        // Check if anything actually changed.\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n            // to avoid treating these cases as \"nothing changed.\"\n            if (oldChild.isEmpty() === newChild.isEmpty()) {\n                // Nothing changed.\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n                return snap;\n            }\n        }\n        if (optChangeAccumulator != null) {\n            if (newChild.isEmpty()) {\n                if (snap.hasChild(key)) {\n                    optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));\n                }\n                else {\n                    assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\n                }\n            }\n            else if (oldChild.isEmpty()) {\n                optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n            }\n            else {\n                optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));\n            }\n        }\n        if (snap.isLeafNode() && newChild.isEmpty()) {\n            return snap;\n        }\n        else {\n            // Make sure the node is indexed\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n        }\n    }\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n        if (optChangeAccumulator != null) {\n            if (!oldSnap.isLeafNode()) {\n                oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n                    if (!newSnap.hasChild(key)) {\n                        optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));\n                    }\n                });\n            }\n            if (!newSnap.isLeafNode()) {\n                newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n                    if (oldSnap.hasChild(key)) {\n                        const oldChild = oldSnap.getImmediateChild(key);\n                        if (!oldChild.equals(childNode)) {\n                            optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));\n                        }\n                    }\n                    else {\n                        optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));\n                    }\n                });\n            }\n        }\n        return newSnap.withIndex(this.index_);\n    }\n    updatePriority(oldSnap, newPriority) {\n        if (oldSnap.isEmpty()) {\n            return ChildrenNode.EMPTY_NODE;\n        }\n        else {\n            return oldSnap.updatePriority(newPriority);\n        }\n    }\n    filtersNodes() {\n        return false;\n    }\n    getIndexedFilter() {\n        return this;\n    }\n    getIndex() {\n        return this.index_;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nclass RangedFilter {\n    constructor(params) {\n        this.indexedFilter_ = new IndexedFilter(params.getIndex());\n        this.index_ = params.getIndex();\n        this.startPost_ = RangedFilter.getStartPost_(params);\n        this.endPost_ = RangedFilter.getEndPost_(params);\n    }\n    getStartPost() {\n        return this.startPost_;\n    }\n    getEndPost() {\n        return this.endPost_;\n    }\n    matches(node) {\n        return (this.index_.compare(this.getStartPost(), node) <= 0 &&\n            this.index_.compare(node, this.getEndPost()) <= 0);\n    }\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n        if (!this.matches(new NamedNode(key, newChild))) {\n            newChild = ChildrenNode.EMPTY_NODE;\n        }\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n    }\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n        if (newSnap.isLeafNode()) {\n            // Make sure we have a children node with the correct index, not a leaf node;\n            newSnap = ChildrenNode.EMPTY_NODE;\n        }\n        let filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n        const self = this;\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n            if (!self.matches(new NamedNode(key, childNode))) {\n                filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n            }\n        });\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\n    }\n    updatePriority(oldSnap, newPriority) {\n        // Don't support priorities on queries\n        return oldSnap;\n    }\n    filtersNodes() {\n        return true;\n    }\n    getIndexedFilter() {\n        return this.indexedFilter_;\n    }\n    getIndex() {\n        return this.index_;\n    }\n    static getStartPost_(params) {\n        if (params.hasStart()) {\n            const startName = params.getIndexStartName();\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\n        }\n        else {\n            return params.getIndex().minPost();\n        }\n    }\n    static getEndPost_(params) {\n        if (params.hasEnd()) {\n            const endName = params.getIndexEndName();\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\n        }\n        else {\n            return params.getIndex().maxPost();\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nclass LimitedFilter {\n    constructor(params) {\n        this.rangedFilter_ = new RangedFilter(params);\n        this.index_ = params.getIndex();\n        this.limit_ = params.getLimit();\n        this.reverse_ = !params.isViewFromLeft();\n    }\n    updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n        if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n            newChild = ChildrenNode.EMPTY_NODE;\n        }\n        if (snap.getImmediateChild(key).equals(newChild)) {\n            // No change\n            return snap;\n        }\n        else if (snap.numChildren() < this.limit_) {\n            return this.rangedFilter_\n                .getIndexedFilter()\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n        }\n        else {\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\n        }\n    }\n    updateFullNode(oldSnap, newSnap, optChangeAccumulator) {\n        let filtered;\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n            // Make sure we have a children node with the correct index, not a leaf node;\n            filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        }\n        else {\n            if (this.limit_ * 2 < newSnap.numChildren() &&\n                newSnap.isIndexed(this.index_)) {\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n                filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n                // anchor to the startPost, endPost, or last element as appropriate\n                let iterator;\n                if (this.reverse_) {\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\n                }\n                else {\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\n                }\n                let count = 0;\n                while (iterator.hasNext() && count < this.limit_) {\n                    const next = iterator.getNext();\n                    let inRange;\n                    if (this.reverse_) {\n                        inRange =\n                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n                    }\n                    else {\n                        inRange =\n                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n                    }\n                    if (inRange) {\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\n                        count++;\n                    }\n                    else {\n                        // if we have reached the end post, we cannot keep adding elemments\n                        break;\n                    }\n                }\n            }\n            else {\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n                filtered = newSnap.withIndex(this.index_);\n                // Don't support priorities on queries\n                filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n                let startPost;\n                let endPost;\n                let cmp;\n                let iterator;\n                if (this.reverse_) {\n                    iterator = filtered.getReverseIterator(this.index_);\n                    startPost = this.rangedFilter_.getEndPost();\n                    endPost = this.rangedFilter_.getStartPost();\n                    const indexCompare = this.index_.getCompare();\n                    cmp = (a, b) => indexCompare(b, a);\n                }\n                else {\n                    iterator = filtered.getIterator(this.index_);\n                    startPost = this.rangedFilter_.getStartPost();\n                    endPost = this.rangedFilter_.getEndPost();\n                    cmp = this.index_.getCompare();\n                }\n                let count = 0;\n                let foundStartPost = false;\n                while (iterator.hasNext()) {\n                    const next = iterator.getNext();\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\n                        // start adding\n                        foundStartPost = true;\n                    }\n                    const inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n                    if (inRange) {\n                        count++;\n                    }\n                    else {\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\n                    }\n                }\n            }\n        }\n        return this.rangedFilter_\n            .getIndexedFilter()\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n    }\n    updatePriority(oldSnap, newPriority) {\n        // Don't support priorities on queries\n        return oldSnap;\n    }\n    filtersNodes() {\n        return true;\n    }\n    getIndexedFilter() {\n        return this.rangedFilter_.getIndexedFilter();\n    }\n    getIndex() {\n        return this.index_;\n    }\n    fullLimitUpdateChild_(snap, childKey, childSnap, source, changeAccumulator) {\n        // TODO: rename all cache stuff etc to general snap terminology\n        let cmp;\n        if (this.reverse_) {\n            const indexCmp = this.index_.getCompare();\n            cmp = (a, b) => indexCmp(b, a);\n        }\n        else {\n            cmp = this.index_.getCompare();\n        }\n        const oldEventCache = snap;\n        assert(oldEventCache.numChildren() === this.limit_, '');\n        const newChildNamedNode = new NamedNode(childKey, childSnap);\n        const windowBoundary = this.reverse_\n            ? oldEventCache.getFirstChild(this.index_)\n            : oldEventCache.getLastChild(this.index_);\n        const inRange = this.rangedFilter_.matches(newChildNamedNode);\n        if (oldEventCache.hasChild(childKey)) {\n            const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n            let nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\n            while (nextChild != null &&\n                (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\n                // the limited filter...\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\n            }\n            const compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n            const remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\n            if (remainsInWindow) {\n                if (changeAccumulator != null) {\n                    changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));\n                }\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\n            }\n            else {\n                if (changeAccumulator != null) {\n                    changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));\n                }\n                const newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\n                const nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\n                if (nextChildInRange) {\n                    if (changeAccumulator != null) {\n                        changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));\n                    }\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\n                }\n                else {\n                    return newEventCache;\n                }\n            }\n        }\n        else if (childSnap.isEmpty()) {\n            // we're deleting a node, but it was not in the window, so ignore it\n            return snap;\n        }\n        else if (inRange) {\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n                if (changeAccumulator != null) {\n                    changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));\n                    changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));\n                }\n                return oldEventCache\n                    .updateImmediateChild(childKey, childSnap)\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n            }\n            else {\n                return snap;\n            }\n        }\n        else {\n            return snap;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nclass QueryParams {\n    constructor() {\n        this.limitSet_ = false;\n        this.startSet_ = false;\n        this.startNameSet_ = false;\n        this.startAfterSet_ = false;\n        this.endSet_ = false;\n        this.endNameSet_ = false;\n        this.endBeforeSet_ = false;\n        this.limit_ = 0;\n        this.viewFrom_ = '';\n        this.indexStartValue_ = null;\n        this.indexStartName_ = '';\n        this.indexEndValue_ = null;\n        this.indexEndName_ = '';\n        this.index_ = PRIORITY_INDEX;\n    }\n    hasStart() {\n        return this.startSet_;\n    }\n    hasStartAfter() {\n        return this.startAfterSet_;\n    }\n    hasEndBefore() {\n        return this.endBeforeSet_;\n    }\n    /**\n     * @returns True if it would return from left.\n     */\n    isViewFromLeft() {\n        if (this.viewFrom_ === '') {\n            // limit(), rather than limitToFirst or limitToLast was called.\n            // This means that only one of startSet_ and endSet_ is true. Use them\n            // to calculate which side of the view to anchor to. If neither is set,\n            // anchor to the end.\n            return this.startSet_;\n        }\n        else {\n            return this.viewFrom_ === \"l\" /* VIEW_FROM_LEFT */;\n        }\n    }\n    /**\n     * Only valid to call if hasStart() returns true\n     */\n    getIndexStartValue() {\n        assert(this.startSet_, 'Only valid if start has been set');\n        return this.indexStartValue_;\n    }\n    /**\n     * Only valid to call if hasStart() returns true.\n     * Returns the starting key name for the range defined by these query parameters\n     */\n    getIndexStartName() {\n        assert(this.startSet_, 'Only valid if start has been set');\n        if (this.startNameSet_) {\n            return this.indexStartName_;\n        }\n        else {\n            return MIN_NAME;\n        }\n    }\n    hasEnd() {\n        return this.endSet_;\n    }\n    /**\n     * Only valid to call if hasEnd() returns true.\n     */\n    getIndexEndValue() {\n        assert(this.endSet_, 'Only valid if end has been set');\n        return this.indexEndValue_;\n    }\n    /**\n     * Only valid to call if hasEnd() returns true.\n     * Returns the end key name for the range defined by these query parameters\n     */\n    getIndexEndName() {\n        assert(this.endSet_, 'Only valid if end has been set');\n        if (this.endNameSet_) {\n            return this.indexEndName_;\n        }\n        else {\n            return MAX_NAME;\n        }\n    }\n    hasLimit() {\n        return this.limitSet_;\n    }\n    /**\n     * @returns True if a limit has been set and it has been explicitly anchored\n     */\n    hasAnchoredLimit() {\n        return this.limitSet_ && this.viewFrom_ !== '';\n    }\n    /**\n     * Only valid to call if hasLimit() returns true\n     */\n    getLimit() {\n        assert(this.limitSet_, 'Only valid if limit has been set');\n        return this.limit_;\n    }\n    getIndex() {\n        return this.index_;\n    }\n    loadsAllData() {\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\n    }\n    isDefault() {\n        return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n    }\n    copy() {\n        const copy = new QueryParams();\n        copy.limitSet_ = this.limitSet_;\n        copy.limit_ = this.limit_;\n        copy.startSet_ = this.startSet_;\n        copy.indexStartValue_ = this.indexStartValue_;\n        copy.startNameSet_ = this.startNameSet_;\n        copy.indexStartName_ = this.indexStartName_;\n        copy.endSet_ = this.endSet_;\n        copy.indexEndValue_ = this.indexEndValue_;\n        copy.endNameSet_ = this.endNameSet_;\n        copy.indexEndName_ = this.indexEndName_;\n        copy.index_ = this.index_;\n        copy.viewFrom_ = this.viewFrom_;\n        return copy;\n    }\n}\nfunction queryParamsGetNodeFilter(queryParams) {\n    if (queryParams.loadsAllData()) {\n        return new IndexedFilter(queryParams.getIndex());\n    }\n    else if (queryParams.hasLimit()) {\n        return new LimitedFilter(queryParams);\n    }\n    else {\n        return new RangedFilter(queryParams);\n    }\n}\nfunction queryParamsLimitToFirst(queryParams, newLimit) {\n    const newParams = queryParams.copy();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = \"l\" /* VIEW_FROM_LEFT */;\n    return newParams;\n}\nfunction queryParamsLimitToLast(queryParams, newLimit) {\n    const newParams = queryParams.copy();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = \"r\" /* VIEW_FROM_RIGHT */;\n    return newParams;\n}\nfunction queryParamsStartAt(queryParams, indexValue, key) {\n    const newParams = queryParams.copy();\n    newParams.startSet_ = true;\n    if (indexValue === undefined) {\n        indexValue = null;\n    }\n    newParams.indexStartValue_ = indexValue;\n    if (key != null) {\n        newParams.startNameSet_ = true;\n        newParams.indexStartName_ = key;\n    }\n    else {\n        newParams.startNameSet_ = false;\n        newParams.indexStartName_ = '';\n    }\n    return newParams;\n}\nfunction queryParamsStartAfter(queryParams, indexValue, key) {\n    let params;\n    if (queryParams.index_ === KEY_INDEX) {\n        if (typeof indexValue === 'string') {\n            indexValue = successor(indexValue);\n        }\n        params = queryParamsStartAt(queryParams, indexValue, key);\n    }\n    else {\n        let childKey;\n        if (key == null) {\n            childKey = MAX_NAME;\n        }\n        else {\n            childKey = successor(key);\n        }\n        params = queryParamsStartAt(queryParams, indexValue, childKey);\n    }\n    params.startAfterSet_ = true;\n    return params;\n}\nfunction queryParamsEndAt(queryParams, indexValue, key) {\n    const newParams = queryParams.copy();\n    newParams.endSet_ = true;\n    if (indexValue === undefined) {\n        indexValue = null;\n    }\n    newParams.indexEndValue_ = indexValue;\n    if (key !== undefined) {\n        newParams.endNameSet_ = true;\n        newParams.indexEndName_ = key;\n    }\n    else {\n        newParams.endNameSet_ = false;\n        newParams.indexEndName_ = '';\n    }\n    return newParams;\n}\nfunction queryParamsEndBefore(queryParams, indexValue, key) {\n    let childKey;\n    let params;\n    if (queryParams.index_ === KEY_INDEX) {\n        if (typeof indexValue === 'string') {\n            indexValue = predecessor(indexValue);\n        }\n        params = queryParamsEndAt(queryParams, indexValue, key);\n    }\n    else {\n        if (key == null) {\n            childKey = MIN_NAME;\n        }\n        else {\n            childKey = predecessor(key);\n        }\n        params = queryParamsEndAt(queryParams, indexValue, childKey);\n    }\n    params.endBeforeSet_ = true;\n    return params;\n}\nfunction queryParamsOrderBy(queryParams, index) {\n    const newParams = queryParams.copy();\n    newParams.index_ = index;\n    return newParams;\n}\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nfunction queryParamsToRestQueryStringParameters(queryParams) {\n    const qs = {};\n    if (queryParams.isDefault()) {\n        return qs;\n    }\n    let orderBy;\n    if (queryParams.index_ === PRIORITY_INDEX) {\n        orderBy = \"$priority\" /* PRIORITY_INDEX */;\n    }\n    else if (queryParams.index_ === VALUE_INDEX) {\n        orderBy = \"$value\" /* VALUE_INDEX */;\n    }\n    else if (queryParams.index_ === KEY_INDEX) {\n        orderBy = \"$key\" /* KEY_INDEX */;\n    }\n    else {\n        assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n        orderBy = queryParams.index_.toString();\n    }\n    qs[\"orderBy\" /* ORDER_BY */] = stringify(orderBy);\n    if (queryParams.startSet_) {\n        qs[\"startAt\" /* START_AT */] = stringify(queryParams.indexStartValue_);\n        if (queryParams.startNameSet_) {\n            qs[\"startAt\" /* START_AT */] +=\n                ',' + stringify(queryParams.indexStartName_);\n        }\n    }\n    if (queryParams.endSet_) {\n        qs[\"endAt\" /* END_AT */] = stringify(queryParams.indexEndValue_);\n        if (queryParams.endNameSet_) {\n            qs[\"endAt\" /* END_AT */] +=\n                ',' + stringify(queryParams.indexEndName_);\n        }\n    }\n    if (queryParams.limitSet_) {\n        if (queryParams.isViewFromLeft()) {\n            qs[\"limitToFirst\" /* LIMIT_TO_FIRST */] = queryParams.limit_;\n        }\n        else {\n            qs[\"limitToLast\" /* LIMIT_TO_LAST */] = queryParams.limit_;\n        }\n    }\n    return qs;\n}\nfunction queryParamsGetQueryObject(queryParams) {\n    const obj = {};\n    if (queryParams.startSet_) {\n        obj[\"sp\" /* INDEX_START_VALUE */] =\n            queryParams.indexStartValue_;\n        if (queryParams.startNameSet_) {\n            obj[\"sn\" /* INDEX_START_NAME */] =\n                queryParams.indexStartName_;\n        }\n    }\n    if (queryParams.endSet_) {\n        obj[\"ep\" /* INDEX_END_VALUE */] = queryParams.indexEndValue_;\n        if (queryParams.endNameSet_) {\n            obj[\"en\" /* INDEX_END_NAME */] = queryParams.indexEndName_;\n        }\n    }\n    if (queryParams.limitSet_) {\n        obj[\"l\" /* LIMIT */] = queryParams.limit_;\n        let viewFrom = queryParams.viewFrom_;\n        if (viewFrom === '') {\n            if (queryParams.isViewFromLeft()) {\n                viewFrom = \"l\" /* VIEW_FROM_LEFT */;\n            }\n            else {\n                viewFrom = \"r\" /* VIEW_FROM_RIGHT */;\n            }\n        }\n        obj[\"vf\" /* VIEW_FROM */] = viewFrom;\n    }\n    // For now, priority index is the default, so we only specify if it's some other index\n    if (queryParams.index_ !== PRIORITY_INDEX) {\n        obj[\"i\" /* INDEX */] = queryParams.index_.toString();\n    }\n    return obj;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nclass ReadonlyRestClient extends ServerActions {\n    /**\n     * @param repoInfo_ - Data about the namespace we are connecting to\n     * @param onDataUpdate_ - A callback for new data from the server\n     */\n    constructor(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {\n        super();\n        this.repoInfo_ = repoInfo_;\n        this.onDataUpdate_ = onDataUpdate_;\n        this.authTokenProvider_ = authTokenProvider_;\n        this.appCheckTokenProvider_ = appCheckTokenProvider_;\n        /** @private {function(...[*])} */\n        this.log_ = logWrapper('p:rest:');\n        /**\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n         * that's been removed. :-/\n         */\n        this.listens_ = {};\n    }\n    reportStats(stats) {\n        throw new Error('Method not implemented.');\n    }\n    static getListenId_(query, tag) {\n        if (tag !== undefined) {\n            return 'tag$' + tag;\n        }\n        else {\n            assert(query._queryParams.isDefault(), \"should have a tag if it's not a default query.\");\n            return query._path.toString();\n        }\n    }\n    /** @inheritDoc */\n    listen(query, currentHashFn, tag, onComplete) {\n        const pathString = query._path.toString();\n        this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n        // Mark this listener so we can tell if it's removed.\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\n        const thisListen = {};\n        this.listens_[listenId] = thisListen;\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\n            let data = result;\n            if (error === 404) {\n                data = null;\n                error = null;\n            }\n            if (error === null) {\n                this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n            }\n            if (safeGet(this.listens_, listenId) === thisListen) {\n                let status;\n                if (!error) {\n                    status = 'ok';\n                }\n                else if (error === 401) {\n                    status = 'permission_denied';\n                }\n                else {\n                    status = 'rest_error:' + error;\n                }\n                onComplete(status, null);\n            }\n        });\n    }\n    /** @inheritDoc */\n    unlisten(query, tag) {\n        const listenId = ReadonlyRestClient.getListenId_(query, tag);\n        delete this.listens_[listenId];\n    }\n    get(query) {\n        const queryStringParameters = queryParamsToRestQueryStringParameters(query._queryParams);\n        const pathString = query._path.toString();\n        const deferred = new Deferred();\n        this.restRequest_(pathString + '.json', queryStringParameters, (error, result) => {\n            let data = result;\n            if (error === 404) {\n                data = null;\n                error = null;\n            }\n            if (error === null) {\n                this.onDataUpdate_(pathString, data, \n                /*isMerge=*/ false, \n                /*tag=*/ null);\n                deferred.resolve(data);\n            }\n            else {\n                deferred.reject(new Error(data));\n            }\n        });\n        return deferred.promise;\n    }\n    /** @inheritDoc */\n    refreshAuthToken(token) {\n        // no-op since we just always call getToken.\n    }\n    /**\n     * Performs a REST request to the given path, with the provided query string parameters,\n     * and any auth credentials we have.\n     */\n    restRequest_(pathString, queryStringParameters = {}, callback) {\n        queryStringParameters['format'] = 'export';\n        return Promise.all([\n            this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n            this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n        ]).then(([authToken, appCheckToken]) => {\n            if (authToken && authToken.accessToken) {\n                queryStringParameters['auth'] = authToken.accessToken;\n            }\n            if (appCheckToken && appCheckToken.token) {\n                queryStringParameters['ac'] = appCheckToken.token;\n            }\n            const url = (this.repoInfo_.secure ? 'https://' : 'http://') +\n                this.repoInfo_.host +\n                pathString +\n                '?' +\n                'ns=' +\n                this.repoInfo_.namespace +\n                querystring(queryStringParameters);\n            this.log_('Sending REST request for ' + url);\n            const xhr = new XMLHttpRequest();\n            xhr.onreadystatechange = () => {\n                if (callback && xhr.readyState === 4) {\n                    this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\n                    let res = null;\n                    if (xhr.status >= 200 && xhr.status < 300) {\n                        try {\n                            res = jsonEval(xhr.responseText);\n                        }\n                        catch (e) {\n                            warn('Failed to parse JSON response for ' +\n                                url +\n                                ': ' +\n                                xhr.responseText);\n                        }\n                        callback(null, res);\n                    }\n                    else {\n                        // 401 and 404 are expected.\n                        if (xhr.status !== 401 && xhr.status !== 404) {\n                            warn('Got unsuccessful REST response for ' +\n                                url +\n                                ' Status: ' +\n                                xhr.status);\n                        }\n                        callback(xhr.status);\n                    }\n                    callback = null;\n                }\n            };\n            xhr.open('GET', url, /*asynchronous=*/ true);\n            xhr.send();\n        });\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nclass SnapshotHolder {\n    constructor() {\n        this.rootNode_ = ChildrenNode.EMPTY_NODE;\n    }\n    getNode(path) {\n        return this.rootNode_.getChild(path);\n    }\n    updateSnapshot(path, newSnapshotNode) {\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction newSparseSnapshotTree() {\n    return {\n        value: null,\n        children: new Map()\n    };\n}\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nfunction sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {\n    if (pathIsEmpty(path)) {\n        sparseSnapshotTree.value = data;\n        sparseSnapshotTree.children.clear();\n    }\n    else if (sparseSnapshotTree.value !== null) {\n        sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n    }\n    else {\n        const childKey = pathGetFront(path);\n        if (!sparseSnapshotTree.children.has(childKey)) {\n            sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n        }\n        const child = sparseSnapshotTree.children.get(childKey);\n        path = pathPopFront(path);\n        sparseSnapshotTreeRemember(child, path, data);\n    }\n}\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nfunction sparseSnapshotTreeForget(sparseSnapshotTree, path) {\n    if (pathIsEmpty(path)) {\n        sparseSnapshotTree.value = null;\n        sparseSnapshotTree.children.clear();\n        return true;\n    }\n    else {\n        if (sparseSnapshotTree.value !== null) {\n            if (sparseSnapshotTree.value.isLeafNode()) {\n                // We're trying to forget a node that doesn't exist\n                return false;\n            }\n            else {\n                const value = sparseSnapshotTree.value;\n                sparseSnapshotTree.value = null;\n                value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n                    sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n                });\n                return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n            }\n        }\n        else if (sparseSnapshotTree.children.size > 0) {\n            const childKey = pathGetFront(path);\n            path = pathPopFront(path);\n            if (sparseSnapshotTree.children.has(childKey)) {\n                const safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);\n                if (safeToRemove) {\n                    sparseSnapshotTree.children.delete(childKey);\n                }\n            }\n            return sparseSnapshotTree.children.size === 0;\n        }\n        else {\n            return true;\n        }\n    }\n}\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nfunction sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {\n    if (sparseSnapshotTree.value !== null) {\n        func(prefixPath, sparseSnapshotTree.value);\n    }\n    else {\n        sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n            const path = new Path(prefixPath.toString() + '/' + key);\n            sparseSnapshotTreeForEachTree(tree, path, func);\n        });\n    }\n}\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nfunction sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {\n    sparseSnapshotTree.children.forEach((tree, key) => {\n        func(key, tree);\n    });\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nclass StatsListener {\n    constructor(collection_) {\n        this.collection_ = collection_;\n        this.last_ = null;\n    }\n    get() {\n        const newStats = this.collection_.get();\n        const delta = Object.assign({}, newStats);\n        if (this.last_) {\n            each(this.last_, (stat, value) => {\n                delta[stat] = delta[stat] - value;\n            });\n        }\n        this.last_ = newStats;\n        return delta;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\nclass StatsReporter {\n    constructor(collection, server_) {\n        this.server_ = server_;\n        this.statsToReport_ = {};\n        this.statsListener_ = new StatsListener(collection);\n        const timeout = FIRST_STATS_MIN_TIME +\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n    }\n    reportStats_() {\n        const stats = this.statsListener_.get();\n        const reportedStats = {};\n        let haveStatsToReport = false;\n        each(stats, (stat, value) => {\n            if (value > 0 && contains(this.statsToReport_, stat)) {\n                reportedStats[stat] = value;\n                haveStatsToReport = true;\n            }\n        });\n        if (haveStatsToReport) {\n            this.server_.reportStats(reportedStats);\n        }\n        // queue our next run.\n        setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n *\n * @enum\n */\nvar OperationType;\n(function (OperationType) {\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\n})(OperationType || (OperationType = {}));\nfunction newOperationSourceUser() {\n    return {\n        fromUser: true,\n        fromServer: false,\n        queryId: null,\n        tagged: false\n    };\n}\nfunction newOperationSourceServer() {\n    return {\n        fromUser: false,\n        fromServer: true,\n        queryId: null,\n        tagged: false\n    };\n}\nfunction newOperationSourceServerTaggedQuery(queryId) {\n    return {\n        fromUser: false,\n        fromServer: true,\n        queryId,\n        tagged: true\n    };\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass AckUserWrite {\n    /**\n     * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n     */\n    constructor(\n    /** @inheritDoc */ path, \n    /** @inheritDoc */ affectedTree, \n    /** @inheritDoc */ revert) {\n        this.path = path;\n        this.affectedTree = affectedTree;\n        this.revert = revert;\n        /** @inheritDoc */\n        this.type = OperationType.ACK_USER_WRITE;\n        /** @inheritDoc */\n        this.source = newOperationSourceUser();\n    }\n    operationForChild(childName) {\n        if (!pathIsEmpty(this.path)) {\n            assert(pathGetFront(this.path) === childName, 'operationForChild called for unrelated child.');\n            return new AckUserWrite(pathPopFront(this.path), this.affectedTree, this.revert);\n        }\n        else if (this.affectedTree.value != null) {\n            assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\n            // All child locations are affected as well; just return same operation.\n            return this;\n        }\n        else {\n            const childTree = this.affectedTree.subtree(new Path(childName));\n            return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass ListenComplete {\n    constructor(source, path) {\n        this.source = source;\n        this.path = path;\n        /** @inheritDoc */\n        this.type = OperationType.LISTEN_COMPLETE;\n    }\n    operationForChild(childName) {\n        if (pathIsEmpty(this.path)) {\n            return new ListenComplete(this.source, newEmptyPath());\n        }\n        else {\n            return new ListenComplete(this.source, pathPopFront(this.path));\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Overwrite {\n    constructor(source, path, snap) {\n        this.source = source;\n        this.path = path;\n        this.snap = snap;\n        /** @inheritDoc */\n        this.type = OperationType.OVERWRITE;\n    }\n    operationForChild(childName) {\n        if (pathIsEmpty(this.path)) {\n            return new Overwrite(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));\n        }\n        else {\n            return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Merge {\n    constructor(\n    /** @inheritDoc */ source, \n    /** @inheritDoc */ path, \n    /** @inheritDoc */ children) {\n        this.source = source;\n        this.path = path;\n        this.children = children;\n        /** @inheritDoc */\n        this.type = OperationType.MERGE;\n    }\n    operationForChild(childName) {\n        if (pathIsEmpty(this.path)) {\n            const childTree = this.children.subtree(new Path(childName));\n            if (childTree.isEmpty()) {\n                // This child is unaffected\n                return null;\n            }\n            else if (childTree.value) {\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n                return new Overwrite(this.source, newEmptyPath(), childTree.value);\n            }\n            else {\n                // This is a merge at a deeper level\n                return new Merge(this.source, newEmptyPath(), childTree);\n            }\n        }\n        else {\n            assert(pathGetFront(this.path) === childName, \"Can't get a merge for a child not on the path of the operation\");\n            return new Merge(this.source, pathPopFront(this.path), this.children);\n        }\n    }\n    toString() {\n        return ('Operation(' +\n            this.path +\n            ': ' +\n            this.source.toString() +\n            ' merge: ' +\n            this.children.toString() +\n            ')');\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nclass CacheNode {\n    constructor(node_, fullyInitialized_, filtered_) {\n        this.node_ = node_;\n        this.fullyInitialized_ = fullyInitialized_;\n        this.filtered_ = filtered_;\n    }\n    /**\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n     */\n    isFullyInitialized() {\n        return this.fullyInitialized_;\n    }\n    /**\n     * Returns whether this node is potentially missing children due to a filter applied to the node\n     */\n    isFiltered() {\n        return this.filtered_;\n    }\n    isCompleteForPath(path) {\n        if (pathIsEmpty(path)) {\n            return this.isFullyInitialized() && !this.filtered_;\n        }\n        const childKey = pathGetFront(path);\n        return this.isCompleteForChild(childKey);\n    }\n    isCompleteForChild(key) {\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\n    }\n    getNode() {\n        return this.node_;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nclass EventGenerator {\n    constructor(query_) {\n        this.query_ = query_;\n        this.index_ = this.query_._queryParams.getIndex();\n    }\n}\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nfunction eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {\n    const events = [];\n    const moves = [];\n    changes.forEach(change => {\n        if (change.type === \"child_changed\" /* CHILD_CHANGED */ &&\n            eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n            moves.push(changeChildMoved(change.childName, change.snapshotNode));\n        }\n    });\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_removed\" /* CHILD_REMOVED */, changes, eventRegistrations, eventCache);\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_added\" /* CHILD_ADDED */, changes, eventRegistrations, eventCache);\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_moved\" /* CHILD_MOVED */, moves, eventRegistrations, eventCache);\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"child_changed\" /* CHILD_CHANGED */, changes, eventRegistrations, eventCache);\n    eventGeneratorGenerateEventsForType(eventGenerator, events, \"value\" /* VALUE */, changes, eventRegistrations, eventCache);\n    return events;\n}\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {\n    const filteredChanges = changes.filter(change => change.type === eventType);\n    filteredChanges.sort((a, b) => eventGeneratorCompareChanges(eventGenerator, a, b));\n    filteredChanges.forEach(change => {\n        const materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);\n        registrations.forEach(registration => {\n            if (registration.respondsTo(change.type)) {\n                events.push(registration.createEvent(materializedChange, eventGenerator.query_));\n            }\n        });\n    });\n}\nfunction eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {\n    if (change.type === 'value' || change.type === 'child_removed') {\n        return change;\n    }\n    else {\n        change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);\n        return change;\n    }\n}\nfunction eventGeneratorCompareChanges(eventGenerator, a, b) {\n    if (a.childName == null || b.childName == null) {\n        throw assertionError('Should only compare child_ events.');\n    }\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n    return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction newViewCache(eventCache, serverCache) {\n    return { eventCache, serverCache };\n}\nfunction viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {\n    return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);\n}\nfunction viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {\n    return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));\n}\nfunction viewCacheGetCompleteEventSnap(viewCache) {\n    return viewCache.eventCache.isFullyInitialized()\n        ? viewCache.eventCache.getNode()\n        : null;\n}\nfunction viewCacheGetCompleteServerSnap(viewCache) {\n    return viewCache.serverCache.isFullyInitialized()\n        ? viewCache.serverCache.getNode()\n        : null;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet emptyChildrenSingleton;\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = () => {\n    if (!emptyChildrenSingleton) {\n        emptyChildrenSingleton = new SortedMap(stringCompare);\n    }\n    return emptyChildrenSingleton;\n};\n/**\n * A tree with immutable elements.\n */\nclass ImmutableTree {\n    constructor(value, children = EmptyChildren()) {\n        this.value = value;\n        this.children = children;\n    }\n    static fromObject(obj) {\n        let tree = new ImmutableTree(null);\n        each(obj, (childPath, childSnap) => {\n            tree = tree.set(new Path(childPath), childSnap);\n        });\n        return tree;\n    }\n    /**\n     * True if the value is empty and there are no children\n     */\n    isEmpty() {\n        return this.value === null && this.children.isEmpty();\n    }\n    /**\n     * Given a path and predicate, return the first node and the path to that node\n     * where the predicate returns true.\n     *\n     * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n     * objects on the way back out, it may be better to pass down a pathSoFar obj.\n     *\n     * @param relativePath - The remainder of the path\n     * @param predicate - The predicate to satisfy to return a node\n     */\n    findRootMostMatchingPathAndValue(relativePath, predicate) {\n        if (this.value != null && predicate(this.value)) {\n            return { path: newEmptyPath(), value: this.value };\n        }\n        else {\n            if (pathIsEmpty(relativePath)) {\n                return null;\n            }\n            else {\n                const front = pathGetFront(relativePath);\n                const child = this.children.get(front);\n                if (child !== null) {\n                    const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);\n                    if (childExistingPathAndValue != null) {\n                        const fullPath = pathChild(new Path(front), childExistingPathAndValue.path);\n                        return { path: fullPath, value: childExistingPathAndValue.value };\n                    }\n                    else {\n                        return null;\n                    }\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n    }\n    /**\n     * Find, if it exists, the shortest subpath of the given path that points a defined\n     * value in the tree\n     */\n    findRootMostValueAndPath(relativePath) {\n        return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n    }\n    /**\n     * @returns The subtree at the given path\n     */\n    subtree(relativePath) {\n        if (pathIsEmpty(relativePath)) {\n            return this;\n        }\n        else {\n            const front = pathGetFront(relativePath);\n            const childTree = this.children.get(front);\n            if (childTree !== null) {\n                return childTree.subtree(pathPopFront(relativePath));\n            }\n            else {\n                return new ImmutableTree(null);\n            }\n        }\n    }\n    /**\n     * Sets a value at the specified path.\n     *\n     * @param relativePath - Path to set value at.\n     * @param toSet - Value to set.\n     * @returns Resulting tree.\n     */\n    set(relativePath, toSet) {\n        if (pathIsEmpty(relativePath)) {\n            return new ImmutableTree(toSet, this.children);\n        }\n        else {\n            const front = pathGetFront(relativePath);\n            const child = this.children.get(front) || new ImmutableTree(null);\n            const newChild = child.set(pathPopFront(relativePath), toSet);\n            const newChildren = this.children.insert(front, newChild);\n            return new ImmutableTree(this.value, newChildren);\n        }\n    }\n    /**\n     * Removes the value at the specified path.\n     *\n     * @param relativePath - Path to value to remove.\n     * @returns Resulting tree.\n     */\n    remove(relativePath) {\n        if (pathIsEmpty(relativePath)) {\n            if (this.children.isEmpty()) {\n                return new ImmutableTree(null);\n            }\n            else {\n                return new ImmutableTree(null, this.children);\n            }\n        }\n        else {\n            const front = pathGetFront(relativePath);\n            const child = this.children.get(front);\n            if (child) {\n                const newChild = child.remove(pathPopFront(relativePath));\n                let newChildren;\n                if (newChild.isEmpty()) {\n                    newChildren = this.children.remove(front);\n                }\n                else {\n                    newChildren = this.children.insert(front, newChild);\n                }\n                if (this.value === null && newChildren.isEmpty()) {\n                    return new ImmutableTree(null);\n                }\n                else {\n                    return new ImmutableTree(this.value, newChildren);\n                }\n            }\n            else {\n                return this;\n            }\n        }\n    }\n    /**\n     * Gets a value from the tree.\n     *\n     * @param relativePath - Path to get value for.\n     * @returns Value at path, or null.\n     */\n    get(relativePath) {\n        if (pathIsEmpty(relativePath)) {\n            return this.value;\n        }\n        else {\n            const front = pathGetFront(relativePath);\n            const child = this.children.get(front);\n            if (child) {\n                return child.get(pathPopFront(relativePath));\n            }\n            else {\n                return null;\n            }\n        }\n    }\n    /**\n     * Replace the subtree at the specified path with the given new tree.\n     *\n     * @param relativePath - Path to replace subtree for.\n     * @param newTree - New tree.\n     * @returns Resulting tree.\n     */\n    setTree(relativePath, newTree) {\n        if (pathIsEmpty(relativePath)) {\n            return newTree;\n        }\n        else {\n            const front = pathGetFront(relativePath);\n            const child = this.children.get(front) || new ImmutableTree(null);\n            const newChild = child.setTree(pathPopFront(relativePath), newTree);\n            let newChildren;\n            if (newChild.isEmpty()) {\n                newChildren = this.children.remove(front);\n            }\n            else {\n                newChildren = this.children.insert(front, newChild);\n            }\n            return new ImmutableTree(this.value, newChildren);\n        }\n    }\n    /**\n     * Performs a depth first fold on this tree. Transforms a tree into a single\n     * value, given a function that operates on the path to a node, an optional\n     * current value, and a map of child names to folded subtrees\n     */\n    fold(fn) {\n        return this.fold_(newEmptyPath(), fn);\n    }\n    /**\n     * Recursive helper for public-facing fold() method\n     */\n    fold_(pathSoFar, fn) {\n        const accum = {};\n        this.children.inorderTraversal((childKey, childTree) => {\n            accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n        });\n        return fn(pathSoFar, this.value, accum);\n    }\n    /**\n     * Find the first matching value on the given path. Return the result of applying f to it.\n     */\n    findOnPath(path, f) {\n        return this.findOnPath_(path, newEmptyPath(), f);\n    }\n    findOnPath_(pathToFollow, pathSoFar, f) {\n        const result = this.value ? f(pathSoFar, this.value) : false;\n        if (result) {\n            return result;\n        }\n        else {\n            if (pathIsEmpty(pathToFollow)) {\n                return null;\n            }\n            else {\n                const front = pathGetFront(pathToFollow);\n                const nextChild = this.children.get(front);\n                if (nextChild) {\n                    return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n    }\n    foreachOnPath(path, f) {\n        return this.foreachOnPath_(path, newEmptyPath(), f);\n    }\n    foreachOnPath_(pathToFollow, currentRelativePath, f) {\n        if (pathIsEmpty(pathToFollow)) {\n            return this;\n        }\n        else {\n            if (this.value) {\n                f(currentRelativePath, this.value);\n            }\n            const front = pathGetFront(pathToFollow);\n            const nextChild = this.children.get(front);\n            if (nextChild) {\n                return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);\n            }\n            else {\n                return new ImmutableTree(null);\n            }\n        }\n    }\n    /**\n     * Calls the given function for each node in the tree that has a value.\n     *\n     * @param f - A function to be called with the path from the root of the tree to\n     * a node, and the value at that node. Called in depth-first order.\n     */\n    foreach(f) {\n        this.foreach_(newEmptyPath(), f);\n    }\n    foreach_(currentRelativePath, f) {\n        this.children.inorderTraversal((childName, childTree) => {\n            childTree.foreach_(pathChild(currentRelativePath, childName), f);\n        });\n        if (this.value) {\n            f(currentRelativePath, this.value);\n        }\n    }\n    foreachChild(f) {\n        this.children.inorderTraversal((childName, childTree) => {\n            if (childTree.value) {\n                f(childName, childTree.value);\n            }\n        });\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nclass CompoundWrite {\n    constructor(writeTree_) {\n        this.writeTree_ = writeTree_;\n    }\n    static empty() {\n        return new CompoundWrite(new ImmutableTree(null));\n    }\n}\nfunction compoundWriteAddWrite(compoundWrite, path, node) {\n    if (pathIsEmpty(path)) {\n        return new CompoundWrite(new ImmutableTree(node));\n    }\n    else {\n        const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n        if (rootmost != null) {\n            const rootMostPath = rootmost.path;\n            let value = rootmost.value;\n            const relativePath = newRelativePath(rootMostPath, path);\n            value = value.updateChild(relativePath, node);\n            return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));\n        }\n        else {\n            const subtree = new ImmutableTree(node);\n            const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n            return new CompoundWrite(newWriteTree);\n        }\n    }\n}\nfunction compoundWriteAddWrites(compoundWrite, path, updates) {\n    let newWrite = compoundWrite;\n    each(updates, (childKey, node) => {\n        newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n    });\n    return newWrite;\n}\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nfunction compoundWriteRemoveWrite(compoundWrite, path) {\n    if (pathIsEmpty(path)) {\n        return CompoundWrite.empty();\n    }\n    else {\n        const newWriteTree = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));\n        return new CompoundWrite(newWriteTree);\n    }\n}\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nfunction compoundWriteHasCompleteWrite(compoundWrite, path) {\n    return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nfunction compoundWriteGetCompleteNode(compoundWrite, path) {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n        return compoundWrite.writeTree_\n            .get(rootmost.path)\n            .getChild(newRelativePath(rootmost.path, path));\n    }\n    else {\n        return null;\n    }\n}\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nfunction compoundWriteGetCompleteChildren(compoundWrite) {\n    const children = [];\n    const node = compoundWrite.writeTree_.value;\n    if (node != null) {\n        // If it's a leaf node, it has no children; so nothing to do.\n        if (!node.isLeafNode()) {\n            node.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n                children.push(new NamedNode(childName, childNode));\n            });\n        }\n    }\n    else {\n        compoundWrite.writeTree_.children.inorderTraversal((childName, childTree) => {\n            if (childTree.value != null) {\n                children.push(new NamedNode(childName, childTree.value));\n            }\n        });\n    }\n    return children;\n}\nfunction compoundWriteChildCompoundWrite(compoundWrite, path) {\n    if (pathIsEmpty(path)) {\n        return compoundWrite;\n    }\n    else {\n        const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n        if (shadowingNode != null) {\n            return new CompoundWrite(new ImmutableTree(shadowingNode));\n        }\n        else {\n            return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n        }\n    }\n}\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nfunction compoundWriteIsEmpty(compoundWrite) {\n    return compoundWrite.writeTree_.isEmpty();\n}\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nfunction compoundWriteApply(compoundWrite, node) {\n    return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\nfunction applySubtreeWrite(relativePath, writeTree, node) {\n    if (writeTree.value != null) {\n        // Since there a write is always a leaf, we're done here\n        return node.updateChild(relativePath, writeTree.value);\n    }\n    else {\n        let priorityWrite = null;\n        writeTree.children.inorderTraversal((childKey, childTree) => {\n            if (childKey === '.priority') {\n                // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n                // to apply priorities to empty nodes that are later filled\n                assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\n                priorityWrite = childTree.value;\n            }\n            else {\n                node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);\n            }\n        });\n        // If there was a priority write, we only apply it if the node is not empty\n        if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n            node = node.updateChild(pathChild(relativePath, '.priority'), priorityWrite);\n        }\n        return node;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nfunction writeTreeChildWrites(writeTree, path) {\n    return newWriteTreeRef(path, writeTree);\n}\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nfunction writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older write on top of newer ones');\n    if (visible === undefined) {\n        visible = true;\n    }\n    writeTree.allWrites.push({\n        path,\n        snap,\n        writeId,\n        visible\n    });\n    if (visible) {\n        writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);\n    }\n    writeTree.lastWriteId = writeId;\n}\n/**\n * Record a new merge from user code.\n */\nfunction writeTreeAddMerge(writeTree, path, changedChildren, writeId) {\n    assert(writeId > writeTree.lastWriteId, 'Stacking an older merge on top of newer ones');\n    writeTree.allWrites.push({\n        path,\n        children: changedChildren,\n        writeId,\n        visible: true\n    });\n    writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);\n    writeTree.lastWriteId = writeId;\n}\nfunction writeTreeGetWrite(writeTree, writeId) {\n    for (let i = 0; i < writeTree.allWrites.length; i++) {\n        const record = writeTree.allWrites[i];\n        if (record.writeId === writeId) {\n            return record;\n        }\n    }\n    return null;\n}\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nfunction writeTreeRemoveWrite(writeTree, writeId) {\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n    // out of order.\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n    const idx = writeTree.allWrites.findIndex(s => {\n        return s.writeId === writeId;\n    });\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n    const writeToRemove = writeTree.allWrites[idx];\n    writeTree.allWrites.splice(idx, 1);\n    let removedWriteWasVisible = writeToRemove.visible;\n    let removedWriteOverlapsWithOtherWrites = false;\n    let i = writeTree.allWrites.length - 1;\n    while (removedWriteWasVisible && i >= 0) {\n        const currentWrite = writeTree.allWrites[i];\n        if (currentWrite.visible) {\n            if (i >= idx &&\n                writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {\n                // The removed write was completely shadowed by a subsequent write.\n                removedWriteWasVisible = false;\n            }\n            else if (pathContains(writeToRemove.path, currentWrite.path)) {\n                // Either we're covering some writes or they're covering part of us (depending on which came first).\n                removedWriteOverlapsWithOtherWrites = true;\n            }\n        }\n        i--;\n    }\n    if (!removedWriteWasVisible) {\n        return false;\n    }\n    else if (removedWriteOverlapsWithOtherWrites) {\n        // There's some shadowing going on. Just rebuild the visible writes from scratch.\n        writeTreeResetTree_(writeTree);\n        return true;\n    }\n    else {\n        // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n        if (writeToRemove.snap) {\n            writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);\n        }\n        else {\n            const children = writeToRemove.children;\n            each(children, (childName) => {\n                writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));\n            });\n        }\n        return true;\n    }\n}\nfunction writeTreeRecordContainsPath_(writeRecord, path) {\n    if (writeRecord.snap) {\n        return pathContains(writeRecord.path, path);\n    }\n    else {\n        for (const childName in writeRecord.children) {\n            if (writeRecord.children.hasOwnProperty(childName) &&\n                pathContains(pathChild(writeRecord.path, childName), path)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree) {\n    writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());\n    if (writeTree.allWrites.length > 0) {\n        writeTree.lastWriteId =\n            writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n    }\n    else {\n        writeTree.lastWriteId = -1;\n    }\n}\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write) {\n    return write.visible;\n}\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(writes, filter, treeRoot) {\n    let compoundWrite = CompoundWrite.empty();\n    for (let i = 0; i < writes.length; ++i) {\n        const write = writes[i];\n        // Theory, a later set will either:\n        // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n        // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n        if (filter(write)) {\n            const writePath = write.path;\n            let relativePath;\n            if (write.snap) {\n                if (pathContains(treeRoot, writePath)) {\n                    relativePath = newRelativePath(treeRoot, writePath);\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write.snap);\n                }\n                else if (pathContains(writePath, treeRoot)) {\n                    relativePath = newRelativePath(writePath, treeRoot);\n                    compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write.snap.getChild(relativePath));\n                }\n                else ;\n            }\n            else if (write.children) {\n                if (pathContains(treeRoot, writePath)) {\n                    relativePath = newRelativePath(treeRoot, writePath);\n                    compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write.children);\n                }\n                else if (pathContains(writePath, treeRoot)) {\n                    relativePath = newRelativePath(writePath, treeRoot);\n                    if (pathIsEmpty(relativePath)) {\n                        compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write.children);\n                    }\n                    else {\n                        const child = safeGet(write.children, pathGetFront(relativePath));\n                        if (child) {\n                            // There exists a child in this node that matches the root path\n                            const deepNode = child.getChild(pathPopFront(relativePath));\n                            compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);\n                        }\n                    }\n                }\n                else ;\n            }\n            else {\n                throw assertionError('WriteRecord should have .snap or .children');\n            }\n        }\n    }\n    return compoundWrite;\n}\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nfunction writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n    if (!writeIdsToExclude && !includeHiddenWrites) {\n        const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n        if (shadowingNode != null) {\n            return shadowingNode;\n        }\n        else {\n            const subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n            if (compoundWriteIsEmpty(subMerge)) {\n                return completeServerCache;\n            }\n            else if (completeServerCache == null &&\n                !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {\n                // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n                return null;\n            }\n            else {\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n                return compoundWriteApply(subMerge, layeredCache);\n            }\n        }\n    }\n    else {\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n        if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n            return completeServerCache;\n        }\n        else {\n            // If the server cache is null, and we don't have a complete cache, we need to return null\n            if (!includeHiddenWrites &&\n                completeServerCache == null &&\n                !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {\n                return null;\n            }\n            else {\n                const filter = function (write) {\n                    return ((write.visible || includeHiddenWrites) &&\n                        (!writeIdsToExclude ||\n                            !~writeIdsToExclude.indexOf(write.writeId)) &&\n                        (pathContains(write.path, treePath) ||\n                            pathContains(treePath, write.path)));\n                };\n                const mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);\n                const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n                return compoundWriteApply(mergeAtPath, layeredCache);\n            }\n        }\n    }\n}\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nfunction writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {\n    let completeChildren = ChildrenNode.EMPTY_NODE;\n    const topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);\n    if (topLevelSet) {\n        if (!topLevelSet.isLeafNode()) {\n            // we're shadowing everything. Return the children.\n            topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n                completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n            });\n        }\n        return completeChildren;\n    }\n    else if (completeServerChildren) {\n        // Layer any children we have on top of this\n        // We know we don't have a top-level set, so just enumerate existing children\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n        completeServerChildren.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n            const node = compoundWriteApply(compoundWriteChildCompoundWrite(merge, new Path(childName)), childNode);\n            completeChildren = completeChildren.updateImmediateChild(childName, node);\n        });\n        // Add any complete children we have from the set\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n        });\n        return completeChildren;\n    }\n    else {\n        // We don't have anything to layer on top of. Layer on any children we have\n        // Note that we can return an empty snap if we have a defined delete\n        const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n        compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n            completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n        });\n        return completeChildren;\n    }\n}\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nfunction writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {\n    assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\n    const path = pathChild(treePath, childPath);\n    if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n        // At this point we can probably guarantee that we're in case 2, meaning no events\n        // May need to check visibility while doing the findRootMostValueAndPath call\n        return null;\n    }\n    else {\n        // No complete shadowing. We're either partially shadowing or not shadowing at all.\n        const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n        if (compoundWriteIsEmpty(childMerge)) {\n            // We're not shadowing at all. Case 1\n            return existingServerSnap.getChild(childPath);\n        }\n        else {\n            // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n            // However this is tricky to find out, since user updates don't necessary change the server\n            // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n            // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n            // only check if the updates change the serverNode.\n            // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n            return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));\n        }\n    }\n}\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nfunction writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {\n    const path = pathChild(treePath, childKey);\n    const shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n    if (shadowingNode != null) {\n        return shadowingNode;\n    }\n    else {\n        if (existingServerSnap.isCompleteForChild(childKey)) {\n            const childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);\n            return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));\n        }\n        else {\n            return null;\n        }\n    }\n}\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nfunction writeTreeShadowingWrite(writeTree, path) {\n    return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nfunction writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {\n    let toIterate;\n    const merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);\n    const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n    if (shadowingNode != null) {\n        toIterate = shadowingNode;\n    }\n    else if (completeServerData != null) {\n        toIterate = compoundWriteApply(merge, completeServerData);\n    }\n    else {\n        // no children to iterate on\n        return [];\n    }\n    toIterate = toIterate.withIndex(index);\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n        const nodes = [];\n        const cmp = index.getCompare();\n        const iter = reverse\n            ? toIterate.getReverseIteratorFrom(startPost, index)\n            : toIterate.getIteratorFrom(startPost, index);\n        let next = iter.getNext();\n        while (next && nodes.length < count) {\n            if (cmp(next, startPost) !== 0) {\n                nodes.push(next);\n            }\n            next = iter.getNext();\n        }\n        return nodes;\n    }\n    else {\n        return [];\n    }\n}\nfunction newWriteTree() {\n    return {\n        visibleWrites: CompoundWrite.empty(),\n        allWrites: [],\n        lastWriteId: -1\n    };\n}\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nfunction writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n    return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);\n}\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nfunction writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {\n    return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);\n}\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nfunction writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {\n    return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);\n}\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nfunction writeTreeRefShadowingWrite(writeTreeRef, path) {\n    return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));\n}\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nfunction writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {\n    return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);\n}\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nfunction writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {\n    return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);\n}\n/**\n * Return a WriteTreeRef for a child.\n */\nfunction writeTreeRefChild(writeTreeRef, childName) {\n    return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);\n}\nfunction newWriteTreeRef(path, writeTree) {\n    return {\n        treePath: path,\n        writeTree\n    };\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass ChildChangeAccumulator {\n    constructor() {\n        this.changeMap = new Map();\n    }\n    trackChildChange(change) {\n        const type = change.type;\n        const childKey = change.childName;\n        assert(type === \"child_added\" /* CHILD_ADDED */ ||\n            type === \"child_changed\" /* CHILD_CHANGED */ ||\n            type === \"child_removed\" /* CHILD_REMOVED */, 'Only child changes supported for tracking');\n        assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\n        const oldChange = this.changeMap.get(childKey);\n        if (oldChange) {\n            const oldType = oldChange.type;\n            if (type === \"child_added\" /* CHILD_ADDED */ &&\n                oldType === \"child_removed\" /* CHILD_REMOVED */) {\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));\n            }\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\n                oldType === \"child_added\" /* CHILD_ADDED */) {\n                this.changeMap.delete(childKey);\n            }\n            else if (type === \"child_removed\" /* CHILD_REMOVED */ &&\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\n                this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));\n            }\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\n                oldType === \"child_added\" /* CHILD_ADDED */) {\n                this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));\n            }\n            else if (type === \"child_changed\" /* CHILD_CHANGED */ &&\n                oldType === \"child_changed\" /* CHILD_CHANGED */) {\n                this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));\n            }\n            else {\n                throw assertionError('Illegal combination of changes: ' +\n                    change +\n                    ' occurred after ' +\n                    oldChange);\n            }\n        }\n        else {\n            this.changeMap.set(childKey, change);\n        }\n    }\n    getChanges() {\n        return Array.from(this.changeMap.values());\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nclass NoCompleteChildSource_ {\n    getCompleteChild(childKey) {\n        return null;\n    }\n    getChildAfterChild(index, child, reverse) {\n        return null;\n    }\n}\n/**\n * Singleton instance.\n */\nconst NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nclass WriteTreeCompleteChildSource {\n    constructor(writes_, viewCache_, optCompleteServerCache_ = null) {\n        this.writes_ = writes_;\n        this.viewCache_ = viewCache_;\n        this.optCompleteServerCache_ = optCompleteServerCache_;\n    }\n    getCompleteChild(childKey) {\n        const node = this.viewCache_.eventCache;\n        if (node.isCompleteForChild(childKey)) {\n            return node.getNode().getImmediateChild(childKey);\n        }\n        else {\n            const serverNode = this.optCompleteServerCache_ != null\n                ? new CacheNode(this.optCompleteServerCache_, true, false)\n                : this.viewCache_.serverCache;\n            return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n        }\n    }\n    getChildAfterChild(index, child, reverse) {\n        const completeServerData = this.optCompleteServerCache_ != null\n            ? this.optCompleteServerCache_\n            : viewCacheGetCompleteServerSnap(this.viewCache_);\n        const nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child, 1, reverse, index);\n        if (nodes.length === 0) {\n            return null;\n        }\n        else {\n            return nodes[0];\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction newViewProcessor(filter) {\n    return { filter };\n}\nfunction viewProcessorAssertIndexed(viewProcessor, viewCache) {\n    assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Event snap not indexed');\n    assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), 'Server snap not indexed');\n}\nfunction viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {\n    const accumulator = new ChildChangeAccumulator();\n    let newViewCache, filterServerNode;\n    if (operation.type === OperationType.OVERWRITE) {\n        const overwrite = operation;\n        if (overwrite.source.fromUser) {\n            newViewCache = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\n        }\n        else {\n            assert(overwrite.source.fromServer, 'Unknown source.');\n            // We filter the node if it's a tagged update or the node has been previously filtered  and the\n            // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n            // again\n            filterServerNode =\n                overwrite.source.tagged ||\n                    (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n            newViewCache = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\n        }\n    }\n    else if (operation.type === OperationType.MERGE) {\n        const merge = operation;\n        if (merge.source.fromUser) {\n            newViewCache = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\n        }\n        else {\n            assert(merge.source.fromServer, 'Unknown source.');\n            // We filter the node if it's a tagged update or the node has been previously filtered\n            filterServerNode =\n                merge.source.tagged || oldViewCache.serverCache.isFiltered();\n            newViewCache = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\n        }\n    }\n    else if (operation.type === OperationType.ACK_USER_WRITE) {\n        const ackUserWrite = operation;\n        if (!ackUserWrite.revert) {\n            newViewCache = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\n        }\n        else {\n            newViewCache = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\n        }\n    }\n    else if (operation.type === OperationType.LISTEN_COMPLETE) {\n        newViewCache = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);\n    }\n    else {\n        throw assertionError('Unknown operation type: ' + operation.type);\n    }\n    const changes = accumulator.getChanges();\n    viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n    return { viewCache: newViewCache, changes };\n}\nfunction viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, accumulator) {\n    const eventSnap = newViewCache.eventCache;\n    if (eventSnap.isFullyInitialized()) {\n        const isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n        const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n        if (accumulator.length > 0 ||\n            !oldViewCache.eventCache.isFullyInitialized() ||\n            (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n            !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\n            accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache)));\n        }\n    }\n}\nfunction viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {\n    const oldEventSnap = viewCache.eventCache;\n    if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n        // we have a shadowing write, ignore changes\n        return viewCache;\n    }\n    else {\n        let newEventCache, serverNode;\n        if (pathIsEmpty(changePath)) {\n            // TODO: figure out how this plays with \"sliding ack windows\"\n            assert(viewCache.serverCache.isFullyInitialized(), 'If change path is empty, we must have complete server data');\n            if (viewCache.serverCache.isFiltered()) {\n                // We need to special case this, because we need to only apply writes to complete children, or\n                // we might end up raising events for incomplete children. If the server data is filtered deep\n                // writes cannot be guaranteed to be complete\n                const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n                const completeChildren = serverCache instanceof ChildrenNode\n                    ? serverCache\n                    : ChildrenNode.EMPTY_NODE;\n                const completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);\n            }\n            else {\n                const completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n                newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);\n            }\n        }\n        else {\n            const childKey = pathGetFront(changePath);\n            if (childKey === '.priority') {\n                assert(pathGetLength(changePath) === 1, \"Can't have a priority with additional path components\");\n                const oldEventNode = oldEventSnap.getNode();\n                serverNode = viewCache.serverCache.getNode();\n                // we might have overwrites for this priority\n                const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);\n                if (updatedPriority != null) {\n                    newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);\n                }\n                else {\n                    // priority didn't change, keep old node\n                    newEventCache = oldEventSnap.getNode();\n                }\n            }\n            else {\n                const childChangePath = pathPopFront(changePath);\n                // update child\n                let newEventChild;\n                if (oldEventSnap.isCompleteForChild(childKey)) {\n                    serverNode = viewCache.serverCache.getNode();\n                    const eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);\n                    if (eventChildUpdate != null) {\n                        newEventChild = oldEventSnap\n                            .getNode()\n                            .getImmediateChild(childKey)\n                            .updateChild(childChangePath, eventChildUpdate);\n                    }\n                    else {\n                        // Nothing changed, just keep the old child\n                        newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n                    }\n                }\n                else {\n                    newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n                }\n                if (newEventChild != null) {\n                    newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\n                }\n                else {\n                    // no complete child available or no change\n                    newEventCache = oldEventSnap.getNode();\n                }\n            }\n        }\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());\n    }\n}\nfunction viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\n    const oldServerSnap = oldViewCache.serverCache;\n    let newServerCache;\n    const serverFilter = filterServerNode\n        ? viewProcessor.filter\n        : viewProcessor.filter.getIndexedFilter();\n    if (pathIsEmpty(changePath)) {\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\n    }\n    else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n        // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n        const newServerNode = oldServerSnap\n            .getNode()\n            .updateChild(changePath, changedSnap);\n        newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\n    }\n    else {\n        const childKey = pathGetFront(changePath);\n        if (!oldServerSnap.isCompleteForPath(changePath) &&\n            pathGetLength(changePath) > 1) {\n            // We don't update incomplete nodes with updates intended for other listeners\n            return oldViewCache;\n        }\n        const childChangePath = pathPopFront(changePath);\n        const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n        const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n        if (childKey === '.priority') {\n            newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\n        }\n        else {\n            newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\n        }\n    }\n    const newViewCache = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());\n    const source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, changePath, writesCache, source, accumulator);\n}\nfunction viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\n    const oldEventSnap = oldViewCache.eventCache;\n    let newViewCache, newEventCache;\n    const source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\n    if (pathIsEmpty(changePath)) {\n        newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);\n        newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());\n    }\n    else {\n        const childKey = pathGetFront(changePath);\n        if (childKey === '.priority') {\n            newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);\n            newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\n        }\n        else {\n            const childChangePath = pathPopFront(changePath);\n            const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n            let newChild;\n            if (pathIsEmpty(childChangePath)) {\n                // Child overwrite, we can replace the child\n                newChild = changedSnap;\n            }\n            else {\n                const childNode = source.getCompleteChild(childKey);\n                if (childNode != null) {\n                    if (pathGetBack(childChangePath) === '.priority' &&\n                        childNode.getChild(pathParent(childChangePath)).isEmpty()) {\n                        // This is a priority update on an empty node. If this node exists on the server, the\n                        // server will send down the priority in the update, so ignore for now\n                        newChild = childNode;\n                    }\n                    else {\n                        newChild = childNode.updateChild(childChangePath, changedSnap);\n                    }\n                }\n                else {\n                    // There is no complete child node available\n                    newChild = ChildrenNode.EMPTY_NODE;\n                }\n            }\n            if (!oldChild.equals(newChild)) {\n                const newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\n                newViewCache = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());\n            }\n            else {\n                newViewCache = oldViewCache;\n            }\n        }\n    }\n    return newViewCache;\n}\nfunction viewProcessorCacheHasChild(viewCache, childKey) {\n    return viewCache.eventCache.isCompleteForChild(childKey);\n}\nfunction viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    changedChildren.foreach((relativePath, childNode) => {\n        const writePath = pathChild(path, relativePath);\n        if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n        }\n    });\n    changedChildren.foreach((relativePath, childNode) => {\n        const writePath = pathChild(path, relativePath);\n        if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n            curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n        }\n    });\n    return curViewCache;\n}\nfunction viewProcessorApplyMerge(viewProcessor, node, merge) {\n    merge.foreach((relativePath, childNode) => {\n        node = node.updateChild(relativePath, childNode);\n    });\n    return node;\n}\nfunction viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n    // wait for the complete data update coming soon.\n    if (viewCache.serverCache.getNode().isEmpty() &&\n        !viewCache.serverCache.isFullyInitialized()) {\n        return viewCache;\n    }\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    let viewMergeTree;\n    if (pathIsEmpty(path)) {\n        viewMergeTree = changedChildren;\n    }\n    else {\n        viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);\n    }\n    const serverNode = viewCache.serverCache.getNode();\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n        if (serverNode.hasChild(childKey)) {\n            const serverChild = viewCache.serverCache\n                .getNode()\n                .getImmediateChild(childKey);\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n        }\n    });\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n        const isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) &&\n            childMergeTree.value === null;\n        if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n            const serverChild = viewCache.serverCache\n                .getNode()\n                .getImmediateChild(childKey);\n            const newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);\n            curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n        }\n    });\n    return curViewCache;\n}\nfunction viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\n    if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n        return viewCache;\n    }\n    // Only filter server node if it is currently filtered\n    const filterServerNode = viewCache.serverCache.isFiltered();\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n    // now that it won't be shadowed.\n    const serverCache = viewCache.serverCache;\n    if (affectedTree.value != null) {\n        // This is an overwrite.\n        if ((pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n            serverCache.isCompleteForPath(ackPath)) {\n            return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\n        }\n        else if (pathIsEmpty(ackPath)) {\n            // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n            // should just re-apply whatever we have in our cache as a merge.\n            let changedChildren = new ImmutableTree(null);\n            serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n                changedChildren = changedChildren.set(new Path(name), node);\n            });\n            return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n        }\n        else {\n            return viewCache;\n        }\n    }\n    else {\n        // This is a merge.\n        let changedChildren = new ImmutableTree(null);\n        affectedTree.foreach((mergePath, value) => {\n            const serverCachePath = pathChild(ackPath, mergePath);\n            if (serverCache.isCompleteForPath(serverCachePath)) {\n                changedChildren = changedChildren.set(mergePath, serverCache.getNode().getChild(serverCachePath));\n            }\n        });\n        return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren, writesCache, completeCache, filterServerNode, accumulator);\n    }\n}\nfunction viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {\n    const oldServerNode = viewCache.serverCache;\n    const newViewCache = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());\n    return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\n}\nfunction viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {\n    let complete;\n    if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n        return viewCache;\n    }\n    else {\n        const source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\n        const oldEventCache = viewCache.eventCache.getNode();\n        let newEventCache;\n        if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n            let newNode;\n            if (viewCache.serverCache.isFullyInitialized()) {\n                newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n            }\n            else {\n                const serverChildren = viewCache.serverCache.getNode();\n                assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\n                newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);\n            }\n            newNode = newNode;\n            newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);\n        }\n        else {\n            const childKey = pathGetFront(path);\n            let newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);\n            if (newChild == null &&\n                viewCache.serverCache.isCompleteForChild(childKey)) {\n                newChild = oldEventCache.getImmediateChild(childKey);\n            }\n            if (newChild != null) {\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);\n            }\n            else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n                // No complete child available, delete the existing one, if any\n                newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);\n            }\n            else {\n                newEventCache = oldEventCache;\n            }\n            if (newEventCache.isEmpty() &&\n                viewCache.serverCache.isFullyInitialized()) {\n                // We might have reverted all child writes. Maybe the old event was a leaf node\n                complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));\n                if (complete.isLeafNode()) {\n                    newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);\n                }\n            }\n        }\n        complete =\n            viewCache.serverCache.isFullyInitialized() ||\n                writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n        return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nclass View {\n    constructor(query_, initialViewCache) {\n        this.query_ = query_;\n        this.eventRegistrations_ = [];\n        const params = this.query_._queryParams;\n        const indexFilter = new IndexedFilter(params.getIndex());\n        const filter = queryParamsGetNodeFilter(params);\n        this.processor_ = newViewProcessor(filter);\n        const initialServerCache = initialViewCache.serverCache;\n        const initialEventCache = initialViewCache.eventCache;\n        // Don't filter server node with other filter than index, wait for tagged listen\n        const serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\n        const eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\n        const newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\n        const newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\n        this.viewCache_ = newViewCache(newEventCache, newServerCache);\n        this.eventGenerator_ = new EventGenerator(this.query_);\n    }\n    get query() {\n        return this.query_;\n    }\n}\nfunction viewGetServerCache(view) {\n    return view.viewCache_.serverCache.getNode();\n}\nfunction viewGetCompleteNode(view) {\n    return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\nfunction viewGetCompleteServerCache(view, path) {\n    const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n    if (cache) {\n        // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n        // we need to see if it contains the child we're interested in.\n        if (view.query._queryParams.loadsAllData() ||\n            (!pathIsEmpty(path) &&\n                !cache.getImmediateChild(pathGetFront(path)).isEmpty())) {\n            return cache.getChild(path);\n        }\n    }\n    return null;\n}\nfunction viewIsEmpty(view) {\n    return view.eventRegistrations_.length === 0;\n}\nfunction viewAddEventRegistration(view, eventRegistration) {\n    view.eventRegistrations_.push(eventRegistration);\n}\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nfunction viewRemoveEventRegistration(view, eventRegistration, cancelError) {\n    const cancelEvents = [];\n    if (cancelError) {\n        assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\n        const path = view.query._path;\n        view.eventRegistrations_.forEach(registration => {\n            const maybeEvent = registration.createCancelEvent(cancelError, path);\n            if (maybeEvent) {\n                cancelEvents.push(maybeEvent);\n            }\n        });\n    }\n    if (eventRegistration) {\n        let remaining = [];\n        for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n            const existing = view.eventRegistrations_[i];\n            if (!existing.matches(eventRegistration)) {\n                remaining.push(existing);\n            }\n            else if (eventRegistration.hasAnyCallback()) {\n                // We're removing just this one\n                remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n                break;\n            }\n        }\n        view.eventRegistrations_ = remaining;\n    }\n    else {\n        view.eventRegistrations_ = [];\n    }\n    return cancelEvents;\n}\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nfunction viewApplyOperation(view, operation, writesCache, completeServerCache) {\n    if (operation.type === OperationType.MERGE &&\n        operation.source.queryId !== null) {\n        assert(viewCacheGetCompleteServerSnap(view.viewCache_), 'We should always have a full cache before handling merges');\n        assert(viewCacheGetCompleteEventSnap(view.viewCache_), 'Missing event cache, even though we have a server cache');\n    }\n    const oldViewCache = view.viewCache_;\n    const result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);\n    viewProcessorAssertIndexed(view.processor_, result.viewCache);\n    assert(result.viewCache.serverCache.isFullyInitialized() ||\n        !oldViewCache.serverCache.isFullyInitialized(), 'Once a server snap is complete, it should never go back');\n    view.viewCache_ = result.viewCache;\n    return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);\n}\nfunction viewGetInitialEvents(view, registration) {\n    const eventSnap = view.viewCache_.eventCache;\n    const initialChanges = [];\n    if (!eventSnap.getNode().isLeafNode()) {\n        const eventNode = eventSnap.getNode();\n        eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n            initialChanges.push(changeChildAdded(key, childNode));\n        });\n    }\n    if (eventSnap.isFullyInitialized()) {\n        initialChanges.push(changeValue(eventSnap.getNode()));\n    }\n    return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);\n}\nfunction viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {\n    const registrations = eventRegistration\n        ? [eventRegistration]\n        : view.eventRegistrations_;\n    return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet referenceConstructor$1;\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nclass SyncPoint {\n    constructor() {\n        /**\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\n         * queryId and the value is the View for that query.\n         *\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n         */\n        this.views = new Map();\n    }\n}\nfunction syncPointSetReferenceConstructor(val) {\n    assert(!referenceConstructor$1, '__referenceConstructor has already been defined');\n    referenceConstructor$1 = val;\n}\nfunction syncPointGetReferenceConstructor() {\n    assert(referenceConstructor$1, 'Reference.ts has not been loaded');\n    return referenceConstructor$1;\n}\nfunction syncPointIsEmpty(syncPoint) {\n    return syncPoint.views.size === 0;\n}\nfunction syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {\n    const queryId = operation.source.queryId;\n    if (queryId !== null) {\n        const view = syncPoint.views.get(queryId);\n        assert(view != null, 'SyncTree gave us an op for an invalid query.');\n        return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);\n    }\n    else {\n        let events = [];\n        for (const view of syncPoint.views.values()) {\n            events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));\n        }\n        return events;\n    }\n}\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nfunction syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete) {\n    const queryId = query._queryIdentifier;\n    const view = syncPoint.views.get(queryId);\n    if (!view) {\n        // TODO: make writesCache take flag for complete server node\n        let eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);\n        let eventCacheComplete = false;\n        if (eventCache) {\n            eventCacheComplete = true;\n        }\n        else if (serverCache instanceof ChildrenNode) {\n            eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);\n            eventCacheComplete = false;\n        }\n        else {\n            eventCache = ChildrenNode.EMPTY_NODE;\n            eventCacheComplete = false;\n        }\n        const viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));\n        return new View(query, viewCache);\n    }\n    return view;\n}\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nfunction syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCache, serverCacheComplete);\n    if (!syncPoint.views.has(query._queryIdentifier)) {\n        syncPoint.views.set(query._queryIdentifier, view);\n    }\n    // This is guaranteed to exist now, we just created anything that was missing\n    viewAddEventRegistration(view, eventRegistration);\n    return viewGetInitialEvents(view, eventRegistration);\n}\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nfunction syncPointRemoveEventRegistration(syncPoint, query, eventRegistration, cancelError) {\n    const queryId = query._queryIdentifier;\n    const removed = [];\n    let cancelEvents = [];\n    const hadCompleteView = syncPointHasCompleteView(syncPoint);\n    if (queryId === 'default') {\n        // When you do ref.off(...), we search all views for the registration to remove.\n        for (const [viewQueryId, view] of syncPoint.views.entries()) {\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n            if (viewIsEmpty(view)) {\n                syncPoint.views.delete(viewQueryId);\n                // We'll deal with complete views later.\n                if (!view.query._queryParams.loadsAllData()) {\n                    removed.push(view.query);\n                }\n            }\n        }\n    }\n    else {\n        // remove the callback from the specific view.\n        const view = syncPoint.views.get(queryId);\n        if (view) {\n            cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));\n            if (viewIsEmpty(view)) {\n                syncPoint.views.delete(queryId);\n                // We'll deal with complete views later.\n                if (!view.query._queryParams.loadsAllData()) {\n                    removed.push(view.query);\n                }\n            }\n        }\n    }\n    if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n        // We removed our last complete view.\n        removed.push(new (syncPointGetReferenceConstructor())(query._repo, query._path));\n    }\n    return { removed, events: cancelEvents };\n}\nfunction syncPointGetQueryViews(syncPoint) {\n    const result = [];\n    for (const view of syncPoint.views.values()) {\n        if (!view.query._queryParams.loadsAllData()) {\n            result.push(view);\n        }\n    }\n    return result;\n}\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nfunction syncPointGetCompleteServerCache(syncPoint, path) {\n    let serverCache = null;\n    for (const view of syncPoint.views.values()) {\n        serverCache = serverCache || viewGetCompleteServerCache(view, path);\n    }\n    return serverCache;\n}\nfunction syncPointViewForQuery(syncPoint, query) {\n    const params = query._queryParams;\n    if (params.loadsAllData()) {\n        return syncPointGetCompleteView(syncPoint);\n    }\n    else {\n        const queryId = query._queryIdentifier;\n        return syncPoint.views.get(queryId);\n    }\n}\nfunction syncPointViewExistsForQuery(syncPoint, query) {\n    return syncPointViewForQuery(syncPoint, query) != null;\n}\nfunction syncPointHasCompleteView(syncPoint) {\n    return syncPointGetCompleteView(syncPoint) != null;\n}\nfunction syncPointGetCompleteView(syncPoint) {\n    for (const view of syncPoint.views.values()) {\n        if (view.query._queryParams.loadsAllData()) {\n            return view;\n        }\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet referenceConstructor;\nfunction syncTreeSetReferenceConstructor(val) {\n    assert(!referenceConstructor, '__referenceConstructor has already been defined');\n    referenceConstructor = val;\n}\nfunction syncTreeGetReferenceConstructor() {\n    assert(referenceConstructor, 'Reference.ts has not been loaded');\n    return referenceConstructor;\n}\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nclass SyncTree {\n    /**\n     * @param listenProvider_ - Used by SyncTree to start / stop listening\n     *   to server data.\n     */\n    constructor(listenProvider_) {\n        this.listenProvider_ = listenProvider_;\n        /**\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n         */\n        this.syncPointTree_ = new ImmutableTree(null);\n        /**\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n         */\n        this.pendingWriteTree_ = newWriteTree();\n        this.tagToQueryMap = new Map();\n        this.queryToTagMap = new Map();\n    }\n}\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {\n    // Record pending write.\n    writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);\n    if (!visible) {\n        return [];\n    }\n    else {\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));\n    }\n}\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {\n    // Record pending merge.\n    writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));\n}\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nfunction syncTreeAckUserWrite(syncTree, writeId, revert = false) {\n    const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n    const needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);\n    if (!needToReevaluate) {\n        return [];\n    }\n    else {\n        let affectedTree = new ImmutableTree(null);\n        if (write.snap != null) {\n            // overwrite\n            affectedTree = affectedTree.set(newEmptyPath(), true);\n        }\n        else {\n            each(write.children, (pathString) => {\n                affectedTree = affectedTree.set(new Path(pathString), true);\n            });\n        }\n        return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write.path, affectedTree, revert));\n    }\n}\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyServerOverwrite(syncTree, path, newData) {\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));\n}\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyServerMerge(syncTree, path, changedChildren) {\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));\n}\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyListenComplete(syncTree, path) {\n    return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));\n}\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyTaggedListenComplete(syncTree, path, tag) {\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n    if (queryKey) {\n        const r = syncTreeParseQueryKey_(queryKey);\n        const queryPath = r.path, queryId = r.queryId;\n        const relativePath = newRelativePath(queryPath, path);\n        const op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n    }\n    else {\n        // We've already removed the query. No big deal, ignore the update\n        return [];\n    }\n}\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\n *  deduping needs to take place. This flag allows toggling of that behavior\n * @returns Cancel events, if cancelError was provided.\n */\nfunction syncTreeRemoveEventRegistration(syncTree, query, eventRegistration, cancelError, skipListenerDedup = false) {\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\n    const path = query._path;\n    const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n    let cancelEvents = [];\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n    // not loadsAllData().\n    if (maybeSyncPoint &&\n        (query._queryIdentifier === 'default' ||\n            syncPointViewExistsForQuery(maybeSyncPoint, query))) {\n        const removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query, eventRegistration, cancelError);\n        if (syncPointIsEmpty(maybeSyncPoint)) {\n            syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n        }\n        const removed = removedAndEvents.removed;\n        cancelEvents = removedAndEvents.events;\n        if (!skipListenerDedup) {\n            /**\n             * We may have just removed one of many listeners and can short-circuit this whole process\n             * We may also not have removed a default listener, in which case all of the descendant listeners should already be\n             * properly set up.\n             */\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n            // queryId === 'default'\n            const removingDefault = -1 !==\n                removed.findIndex(query => {\n                    return query._queryParams.loadsAllData();\n                });\n            const covered = syncTree.syncPointTree_.findOnPath(path, (relativePath, parentSyncPoint) => syncPointHasCompleteView(parentSyncPoint));\n            if (removingDefault && !covered) {\n                const subtree = syncTree.syncPointTree_.subtree(path);\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\n                // removal\n                if (!subtree.isEmpty()) {\n                    // We need to fold over our subtree and collect the listeners to send\n                    const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n                    // Ok, we've collected all the listens we need. Set them up.\n                    for (let i = 0; i < newViews.length; ++i) {\n                        const view = newViews[i], newQuery = view.query;\n                        const listener = syncTreeCreateListenerForView_(syncTree, view);\n                        syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery(syncTree, newQuery), listener.hashFn, listener.onComplete);\n                    }\n                }\n                // Otherwise there's nothing below us, so nothing we need to start listening on\n            }\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\n            if (!covered && removed.length > 0 && !cancelError) {\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n                // default. Otherwise, we need to iterate through and cancel each individual query\n                if (removingDefault) {\n                    // We don't tag default listeners\n                    const defaultTag = null;\n                    syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query), defaultTag);\n                }\n                else {\n                    removed.forEach((queryToRemove) => {\n                        const tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));\n                        syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);\n                    });\n                }\n            }\n        }\n        // Now, clear all of the tags we're tracking for the removed listens\n        syncTreeRemoveTags_(syncTree, removed);\n    }\n    return cancelEvents;\n}\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n    if (queryKey != null) {\n        const r = syncTreeParseQueryKey_(queryKey);\n        const queryPath = r.path, queryId = r.queryId;\n        const relativePath = newRelativePath(queryPath, path);\n        const op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n    }\n    else {\n        // Query must have been removed already\n        return [];\n    }\n}\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nfunction syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {\n    const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n    if (queryKey) {\n        const r = syncTreeParseQueryKey_(queryKey);\n        const queryPath = r.path, queryId = r.queryId;\n        const relativePath = newRelativePath(queryPath, path);\n        const changeTree = ImmutableTree.fromObject(changedChildren);\n        const op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);\n        return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n    }\n    else {\n        // We've already removed the query. No big deal, ignore the update\n        return [];\n    }\n}\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nfunction syncTreeAddEventRegistration(syncTree, query, eventRegistration, skipSetupListener = false) {\n    const path = query._path;\n    let serverCache = null;\n    let foundAncestorDefaultView = false;\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n        const relativePath = newRelativePath(pathToSyncPoint, path);\n        serverCache =\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n        foundAncestorDefaultView =\n            foundAncestorDefaultView || syncPointHasCompleteView(sp);\n    });\n    let syncPoint = syncTree.syncPointTree_.get(path);\n    if (!syncPoint) {\n        syncPoint = new SyncPoint();\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n    }\n    else {\n        foundAncestorDefaultView =\n            foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n        serverCache =\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n    let serverCacheComplete;\n    if (serverCache != null) {\n        serverCacheComplete = true;\n    }\n    else {\n        serverCacheComplete = false;\n        serverCache = ChildrenNode.EMPTY_NODE;\n        const subtree = syncTree.syncPointTree_.subtree(path);\n        subtree.foreachChild((childName, childSyncPoint) => {\n            const completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());\n            if (completeCache) {\n                serverCache = serverCache.updateImmediateChild(childName, completeCache);\n            }\n        });\n    }\n    const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n    if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n        // We need to track a tag for this query\n        const queryKey = syncTreeMakeQueryKey_(query);\n        assert(!syncTree.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\n        const tag = syncTreeGetNextQueryTag_();\n        syncTree.queryToTagMap.set(queryKey, tag);\n        syncTree.tagToQueryMap.set(tag, queryKey);\n    }\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n    let events = syncPointAddEventRegistration(syncPoint, query, eventRegistration, writesCache, serverCache, serverCacheComplete);\n    if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\n        const view = syncPointViewForQuery(syncPoint, query);\n        events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n    }\n    return events;\n}\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nfunction syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {\n    const includeHiddenSets = true;\n    const writeTree = syncTree.pendingWriteTree_;\n    const serverCache = syncTree.syncPointTree_.findOnPath(path, (pathSoFar, syncPoint) => {\n        const relativePath = newRelativePath(pathSoFar, path);\n        const serverCache = syncPointGetCompleteServerCache(syncPoint, relativePath);\n        if (serverCache) {\n            return serverCache;\n        }\n    });\n    return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);\n}\nfunction syncTreeGetServerValue(syncTree, query) {\n    const path = query._path;\n    let serverCache = null;\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n    syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n        const relativePath = newRelativePath(pathToSyncPoint, path);\n        serverCache =\n            serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    });\n    let syncPoint = syncTree.syncPointTree_.get(path);\n    if (!syncPoint) {\n        syncPoint = new SyncPoint();\n        syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n    }\n    else {\n        serverCache =\n            serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n    const serverCacheComplete = serverCache != null;\n    const serverCacheNode = serverCacheComplete\n        ? new CacheNode(serverCache, true, false)\n        : null;\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query._path);\n    const view = syncPointGetView(syncPoint, query, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);\n    return viewGetCompleteNode(view);\n}\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(syncTree, operation) {\n    return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, \n    /*serverCache=*/ null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));\n}\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {\n    if (pathIsEmpty(operation.path)) {\n        return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\n    }\n    else {\n        const syncPoint = syncPointTree.get(newEmptyPath());\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\n        if (serverCache == null && syncPoint != null) {\n            serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n        }\n        let events = [];\n        const childName = pathGetFront(operation.path);\n        const childOperation = operation.operationForChild(childName);\n        const childTree = syncPointTree.children.get(childName);\n        if (childTree && childOperation) {\n            const childServerCache = serverCache\n                ? serverCache.getImmediateChild(childName)\n                : null;\n            const childWritesCache = writeTreeRefChild(writesCache, childName);\n            events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\n        }\n        if (syncPoint) {\n            events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n        }\n        return events;\n    }\n}\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n        serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n    let events = [];\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\n        const childServerCache = serverCache\n            ? serverCache.getImmediateChild(childName)\n            : null;\n        const childWritesCache = writeTreeRefChild(writesCache, childName);\n        const childOperation = operation.operationForChild(childName);\n        if (childOperation) {\n            events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\n        }\n    });\n    if (syncPoint) {\n        events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));\n    }\n    return events;\n}\nfunction syncTreeCreateListenerForView_(syncTree, view) {\n    const query = view.query;\n    const tag = syncTreeTagForQuery(syncTree, query);\n    return {\n        hashFn: () => {\n            const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n            return cache.hash();\n        },\n        onComplete: (status) => {\n            if (status === 'ok') {\n                if (tag) {\n                    return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n                }\n                else {\n                    return syncTreeApplyListenComplete(syncTree, query._path);\n                }\n            }\n            else {\n                // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n                // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n                const error = errorForServerCode(status, query);\n                return syncTreeRemoveEventRegistration(syncTree, query, \n                /*eventRegistration*/ null, error);\n            }\n        }\n    };\n}\n/**\n * Return the tag associated with the given query.\n */\nfunction syncTreeTagForQuery(syncTree, query) {\n    const queryKey = syncTreeMakeQueryKey_(query);\n    return syncTree.queryToTagMap.get(queryKey);\n}\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query) {\n    return query._path.toString() + '$' + query._queryIdentifier;\n}\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(syncTree, tag) {\n    return syncTree.tagToQueryMap.get(tag);\n}\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey) {\n    const splitIndex = queryKey.indexOf('$');\n    assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\n    return {\n        queryId: queryKey.substr(splitIndex + 1),\n        path: new Path(queryKey.substr(0, splitIndex))\n    };\n}\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {\n    const syncPoint = syncTree.syncPointTree_.get(queryPath);\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n    const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);\n    return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(subtree) {\n    return subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\n        if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n            const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n            return [completeView];\n        }\n        else {\n            // No complete view here, flatten any deeper listens into an array\n            let views = [];\n            if (maybeChildSyncPoint) {\n                views = syncPointGetQueryViews(maybeChildSyncPoint);\n            }\n            each(childMap, (_key, childViews) => {\n                views = views.concat(childViews);\n            });\n            return views;\n        }\n    });\n}\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query) {\n    if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n        // We treat queries that load all data as default queries\n        // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n        // from Query\n        return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n    }\n    else {\n        return query;\n    }\n}\nfunction syncTreeRemoveTags_(syncTree, queries) {\n    for (let j = 0; j < queries.length; ++j) {\n        const removedQuery = queries[j];\n        if (!removedQuery._queryParams.loadsAllData()) {\n            // We should have a tag for this\n            const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n            const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n            syncTree.queryToTagMap.delete(removedQueryKey);\n            syncTree.tagToQueryMap.delete(removedQueryTag);\n        }\n    }\n}\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_() {\n    return syncTreeNextQueryTag_++;\n}\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(syncTree, query, view) {\n    const path = query._path;\n    const tag = syncTreeTagForQuery(syncTree, query);\n    const listener = syncTreeCreateListenerForView_(syncTree, view);\n    const events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query), tag, listener.hashFn, listener.onComplete);\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n    // may need to shadow other listens as well.\n    if (tag) {\n        assert(!syncPointHasCompleteView(subtree.value), \"If we're adding a query, it shouldn't be shadowed\");\n    }\n    else {\n        // Shadow everything at or below this location, this is a default listener.\n        const queriesToStop = subtree.fold((relativePath, maybeChildSyncPoint, childMap) => {\n            if (!pathIsEmpty(relativePath) &&\n                maybeChildSyncPoint &&\n                syncPointHasCompleteView(maybeChildSyncPoint)) {\n                return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n            }\n            else {\n                // No default listener here, flatten any deeper queries into an array\n                let queries = [];\n                if (maybeChildSyncPoint) {\n                    queries = queries.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(view => view.query));\n                }\n                each(childMap, (_key, childQueries) => {\n                    queries = queries.concat(childQueries);\n                });\n                return queries;\n            }\n        });\n        for (let i = 0; i < queriesToStop.length; ++i) {\n            const queryToStop = queriesToStop[i];\n            syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery(syncTree, queryToStop));\n        }\n    }\n    return events;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass ExistingValueProvider {\n    constructor(node_) {\n        this.node_ = node_;\n    }\n    getImmediateChild(childName) {\n        const child = this.node_.getImmediateChild(childName);\n        return new ExistingValueProvider(child);\n    }\n    node() {\n        return this.node_;\n    }\n}\nclass DeferredValueProvider {\n    constructor(syncTree, path) {\n        this.syncTree_ = syncTree;\n        this.path_ = path;\n    }\n    getImmediateChild(childName) {\n        const childPath = pathChild(this.path_, childName);\n        return new DeferredValueProvider(this.syncTree_, childPath);\n    }\n    node() {\n        return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n    }\n}\n/**\n * Generate placeholders for deferred values.\n */\nconst generateWithValues = function (values) {\n    values = values || {};\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\n    return values;\n};\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nconst resolveDeferredLeafValue = function (value, existingVal, serverValues) {\n    if (!value || typeof value !== 'object') {\n        return value;\n    }\n    assert('.sv' in value, 'Unexpected leaf node or priority contents');\n    if (typeof value['.sv'] === 'string') {\n        return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n    }\n    else if (typeof value['.sv'] === 'object') {\n        return resolveComplexDeferredValue(value['.sv'], existingVal);\n    }\n    else {\n        assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n    }\n};\nconst resolveScalarDeferredValue = function (op, existing, serverValues) {\n    switch (op) {\n        case 'timestamp':\n            return serverValues['timestamp'];\n        default:\n            assert(false, 'Unexpected server value: ' + op);\n    }\n};\nconst resolveComplexDeferredValue = function (op, existing, unused) {\n    if (!op.hasOwnProperty('increment')) {\n        assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n    }\n    const delta = op['increment'];\n    if (typeof delta !== 'number') {\n        assert(false, 'Unexpected increment value: ' + delta);\n    }\n    const existingNode = existing.node();\n    assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls');\n    // Incrementing a non-number sets the value to the incremented amount\n    if (!existingNode.isLeafNode()) {\n        return delta;\n    }\n    const leaf = existingNode;\n    const existingVal = leaf.getValue();\n    if (typeof existingVal !== 'number') {\n        return delta;\n    }\n    // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n    return existingVal + delta;\n};\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nconst resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\n    return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\n};\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nconst resolveDeferredValueSnapshot = function (node, existing, serverValues) {\n    return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\n};\nfunction resolveDeferredValue(node, existingVal, serverValues) {\n    const rawPri = node.getPriority().val();\n    const priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\n    let newNode;\n    if (node.isLeafNode()) {\n        const leafNode = node;\n        const value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\n        if (value !== leafNode.getValue() ||\n            priority !== leafNode.getPriority().val()) {\n            return new LeafNode(value, nodeFromJSON(priority));\n        }\n        else {\n            return node;\n        }\n    }\n    else {\n        const childrenNode = node;\n        newNode = childrenNode;\n        if (priority !== childrenNode.getPriority().val()) {\n            newNode = newNode.updatePriority(new LeafNode(priority));\n        }\n        childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n            const newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\n            if (newChildNode !== childNode) {\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\n            }\n        });\n        return newNode;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nclass Tree {\n    /**\n     * @param name - Optional name of the node.\n     * @param parent - Optional parent node.\n     * @param node - Optional node to wrap.\n     */\n    constructor(name = '', parent = null, node = { children: {}, childCount: 0 }) {\n        this.name = name;\n        this.parent = parent;\n        this.node = node;\n    }\n}\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nfunction treeSubTree(tree, pathObj) {\n    // TODO: Require pathObj to be Path?\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n    let child = tree, next = pathGetFront(path);\n    while (next !== null) {\n        const childNode = safeGet(child.node.children, next) || {\n            children: {},\n            childCount: 0\n        };\n        child = new Tree(next, child, childNode);\n        path = pathPopFront(path);\n        next = pathGetFront(path);\n    }\n    return child;\n}\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nfunction treeGetValue(tree) {\n    return tree.node.value;\n}\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nfunction treeSetValue(tree, value) {\n    tree.node.value = value;\n    treeUpdateParents(tree);\n}\n/**\n * @returns Whether the tree has any children.\n */\nfunction treeHasChildren(tree) {\n    return tree.node.childCount > 0;\n}\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nfunction treeIsEmpty(tree) {\n    return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nfunction treeForEachChild(tree, action) {\n    each(tree.node.children, (child, childTree) => {\n        action(new Tree(child, tree, childTree));\n    });\n}\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nfunction treeForEachDescendant(tree, action, includeSelf, childrenFirst) {\n    if (includeSelf && !childrenFirst) {\n        action(tree);\n    }\n    treeForEachChild(tree, child => {\n        treeForEachDescendant(child, action, true, childrenFirst);\n    });\n    if (includeSelf && childrenFirst) {\n        action(tree);\n    }\n}\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nfunction treeForEachAncestor(tree, action, includeSelf) {\n    let node = includeSelf ? tree : tree.parent;\n    while (node !== null) {\n        if (action(node)) {\n            return true;\n        }\n        node = node.parent;\n    }\n    return false;\n}\n/**\n * @returns The path of this tree node, as a Path.\n */\nfunction treeGetPath(tree) {\n    return new Path(tree.parent === null\n        ? tree.name\n        : treeGetPath(tree.parent) + '/' + tree.name);\n}\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents(tree) {\n    if (tree.parent !== null) {\n        treeUpdateChild(tree.parent, tree.name, tree);\n    }\n}\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild(tree, childName, child) {\n    const childEmpty = treeIsEmpty(child);\n    const childExists = contains(tree.node.children, childName);\n    if (childEmpty && childExists) {\n        delete tree.node.children[childName];\n        tree.node.childCount--;\n        treeUpdateParents(tree);\n    }\n    else if (!childEmpty && !childExists) {\n        tree.node.children[childName] = child.node;\n        tree.node.childCount++;\n        treeUpdateParents(tree);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * True for invalid Firebase keys\n */\nconst INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nconst INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n/**\n * Maximum number of characters to allow in leaf value\n */\nconst MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\nconst isValidKey = function (key) {\n    return (typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key));\n};\nconst isValidPathString = function (pathString) {\n    return (typeof pathString === 'string' &&\n        pathString.length !== 0 &&\n        !INVALID_PATH_REGEX_.test(pathString));\n};\nconst isValidRootPathString = function (pathString) {\n    if (pathString) {\n        // Allow '/.info/' at the beginning.\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n    }\n    return isValidPathString(pathString);\n};\nconst isValidPriority = function (priority) {\n    return (priority === null ||\n        typeof priority === 'string' ||\n        (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n        (priority &&\n            typeof priority === 'object' &&\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            contains(priority, '.sv')));\n};\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nconst validateFirebaseDataArg = function (fnName, value, path, optional) {\n    if (optional && value === undefined) {\n        return;\n    }\n    validateFirebaseData(errorPrefix(fnName, 'value'), value, path);\n};\n/**\n * Validate a data object client-side before sending to server.\n */\nconst validateFirebaseData = function (errorPrefix, data, path_) {\n    const path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n    if (data === undefined) {\n        throw new Error(errorPrefix + 'contains undefined ' + validationPathToErrorString(path));\n    }\n    if (typeof data === 'function') {\n        throw new Error(errorPrefix +\n            'contains a function ' +\n            validationPathToErrorString(path) +\n            ' with contents = ' +\n            data.toString());\n    }\n    if (isInvalidJSONNumber(data)) {\n        throw new Error(errorPrefix +\n            'contains ' +\n            data.toString() +\n            ' ' +\n            validationPathToErrorString(path));\n    }\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\n    if (typeof data === 'string' &&\n        data.length > MAX_LEAF_SIZE_ / 3 &&\n        stringLength(data) > MAX_LEAF_SIZE_) {\n        throw new Error(errorPrefix +\n            'contains a string greater than ' +\n            MAX_LEAF_SIZE_ +\n            ' utf8 bytes ' +\n            validationPathToErrorString(path) +\n            \" ('\" +\n            data.substring(0, 50) +\n            \"...')\");\n    }\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n    // to save extra walking of large objects.\n    if (data && typeof data === 'object') {\n        let hasDotValue = false;\n        let hasActualChild = false;\n        each(data, (key, value) => {\n            if (key === '.value') {\n                hasDotValue = true;\n            }\n            else if (key !== '.priority' && key !== '.sv') {\n                hasActualChild = true;\n                if (!isValidKey(key)) {\n                    throw new Error(errorPrefix +\n                        ' contains an invalid key (' +\n                        key +\n                        ') ' +\n                        validationPathToErrorString(path) +\n                        '.  Keys must be non-empty strings ' +\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n                }\n            }\n            validationPathPush(path, key);\n            validateFirebaseData(errorPrefix, value, path);\n            validationPathPop(path);\n        });\n        if (hasDotValue && hasActualChild) {\n            throw new Error(errorPrefix +\n                ' contains \".value\" child ' +\n                validationPathToErrorString(path) +\n                ' in addition to actual children.');\n        }\n    }\n};\n/**\n * Pre-validate paths passed in the firebase function.\n */\nconst validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\n    let i, curPath;\n    for (i = 0; i < mergePaths.length; i++) {\n        curPath = mergePaths[i];\n        const keys = pathSlice(curPath);\n        for (let j = 0; j < keys.length; j++) {\n            if (keys[j] === '.priority' && j === keys.length - 1) ;\n            else if (!isValidKey(keys[j])) {\n                throw new Error(errorPrefix +\n                    'contains an invalid key (' +\n                    keys[j] +\n                    ') in path ' +\n                    curPath.toString() +\n                    '. Keys must be non-empty strings ' +\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n            }\n        }\n    }\n    // Check that update keys are not descendants of each other.\n    // We rely on the property that sorting guarantees that ancestors come\n    // right before descendants.\n    mergePaths.sort(pathCompare);\n    let prevPath = null;\n    for (i = 0; i < mergePaths.length; i++) {\n        curPath = mergePaths[i];\n        if (prevPath !== null && pathContains(prevPath, curPath)) {\n            throw new Error(errorPrefix +\n                'contains a path ' +\n                prevPath.toString() +\n                ' that is ancestor of another path ' +\n                curPath.toString());\n        }\n        prevPath = curPath;\n    }\n};\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nconst validateFirebaseMergeDataArg = function (fnName, data, path, optional) {\n    if (optional && data === undefined) {\n        return;\n    }\n    const errorPrefix$1 = errorPrefix(fnName, 'values');\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\n        throw new Error(errorPrefix$1 + ' must be an object containing the children to replace.');\n    }\n    const mergePaths = [];\n    each(data, (key, value) => {\n        const curPath = new Path(key);\n        validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));\n        if (pathGetBack(curPath) === '.priority') {\n            if (!isValidPriority(value)) {\n                throw new Error(errorPrefix$1 +\n                    \"contains an invalid value for '\" +\n                    curPath.toString() +\n                    \"', which must be a valid \" +\n                    'Firebase priority (a string, finite number, server value, or null).');\n            }\n        }\n        mergePaths.push(curPath);\n    });\n    validateFirebaseMergePaths(errorPrefix$1, mergePaths);\n};\nconst validatePriority = function (fnName, priority, optional) {\n    if (optional && priority === undefined) {\n        return;\n    }\n    if (isInvalidJSONNumber(priority)) {\n        throw new Error(errorPrefix(fnName, 'priority') +\n            'is ' +\n            priority.toString() +\n            ', but must be a valid Firebase priority (a string, finite number, ' +\n            'server value, or null).');\n    }\n    // Special case to allow importing data with a .sv.\n    if (!isValidPriority(priority)) {\n        throw new Error(errorPrefix(fnName, 'priority') +\n            'must be a valid Firebase priority ' +\n            '(a string, finite number, server value, or null).');\n    }\n};\nconst validateKey = function (fnName, argumentName, key, optional) {\n    if (optional && key === undefined) {\n        return;\n    }\n    if (!isValidKey(key)) {\n        throw new Error(errorPrefix(fnName, argumentName) +\n            'was an invalid key = \"' +\n            key +\n            '\".  Firebase keys must be non-empty strings and ' +\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\n    }\n};\n/**\n * @internal\n */\nconst validatePathString = function (fnName, argumentName, pathString, optional) {\n    if (optional && pathString === undefined) {\n        return;\n    }\n    if (!isValidPathString(pathString)) {\n        throw new Error(errorPrefix(fnName, argumentName) +\n            'was an invalid path = \"' +\n            pathString +\n            '\". Paths must be non-empty strings and ' +\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n    }\n};\nconst validateRootPathString = function (fnName, argumentName, pathString, optional) {\n    if (pathString) {\n        // Allow '/.info/' at the beginning.\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n    }\n    validatePathString(fnName, argumentName, pathString, optional);\n};\n/**\n * @internal\n */\nconst validateWritablePath = function (fnName, path) {\n    if (pathGetFront(path) === '.info') {\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n    }\n};\nconst validateUrl = function (fnName, parsedUrl) {\n    // TODO = Validate server better.\n    const pathString = parsedUrl.path.toString();\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\n        parsedUrl.repoInfo.host.length === 0 ||\n        (!isValidKey(parsedUrl.repoInfo.namespace) &&\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n        (pathString.length !== 0 && !isValidRootPathString(pathString))) {\n        throw new Error(errorPrefix(fnName, 'url') +\n            'must be a valid firebase URL and ' +\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\n    }\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nclass EventQueue {\n    constructor() {\n        this.eventLists_ = [];\n        /**\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n         */\n        this.recursionDepth_ = 0;\n    }\n}\n/**\n * @param eventDataList - The new events to queue.\n */\nfunction eventQueueQueueEvents(eventQueue, eventDataList) {\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n    let currList = null;\n    for (let i = 0; i < eventDataList.length; i++) {\n        const data = eventDataList[i];\n        const path = data.getPath();\n        if (currList !== null && !pathEquals(path, currList.path)) {\n            eventQueue.eventLists_.push(currList);\n            currList = null;\n        }\n        if (currList === null) {\n            currList = { events: [], path };\n        }\n        currList.events.push(data);\n    }\n    if (currList) {\n        eventQueue.eventLists_.push(currList);\n    }\n}\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nfunction eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {\n    eventQueueQueueEvents(eventQueue, eventDataList);\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathEquals(eventPath, path));\n}\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nfunction eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {\n    eventQueueQueueEvents(eventQueue, eventDataList);\n    eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath => pathContains(eventPath, changedPath) ||\n        pathContains(changedPath, eventPath));\n}\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {\n    eventQueue.recursionDepth_++;\n    let sentAll = true;\n    for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n        const eventList = eventQueue.eventLists_[i];\n        if (eventList) {\n            const eventPath = eventList.path;\n            if (predicate(eventPath)) {\n                eventListRaise(eventQueue.eventLists_[i]);\n                eventQueue.eventLists_[i] = null;\n            }\n            else {\n                sentAll = false;\n            }\n        }\n    }\n    if (sentAll) {\n        eventQueue.eventLists_ = [];\n    }\n    eventQueue.recursionDepth_--;\n}\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList) {\n    for (let i = 0; i < eventList.events.length; i++) {\n        const eventData = eventList.events[i];\n        if (eventData !== null) {\n            eventList.events[i] = null;\n            const eventFn = eventData.getEventRunner();\n            if (logger) {\n                log('event: ' + eventData.toString());\n            }\n            exceptionGuard(eventFn);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst INTERRUPT_REASON = 'repo_interrupt';\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n/**\n * A connection to a single data repository.\n */\nclass Repo {\n    constructor(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {\n        this.repoInfo_ = repoInfo_;\n        this.forceRestClient_ = forceRestClient_;\n        this.authTokenProvider_ = authTokenProvider_;\n        this.appCheckProvider_ = appCheckProvider_;\n        this.dataUpdateCount = 0;\n        this.statsListener_ = null;\n        this.eventQueue_ = new EventQueue();\n        this.nextWriteId_ = 1;\n        this.interceptServerDataCallback_ = null;\n        /** A list of data pieces and paths to be set when this client disconnects. */\n        this.onDisconnect_ = newSparseSnapshotTree();\n        /** Stores queues of outstanding transactions for Firebase locations. */\n        this.transactionQueueTree_ = new Tree();\n        // TODO: This should be @private but it's used by test_access.js and internal.js\n        this.persistentConnection_ = null;\n        // This key is intentionally not updated if RepoInfo is later changed or replaced\n        this.key = this.repoInfo_.toURLString();\n    }\n    /**\n     * @returns The URL corresponding to the root of this Firebase.\n     */\n    toString() {\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\n    }\n}\nfunction repoStart(repo, appId, authOverride) {\n    repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n    if (repo.forceRestClient_ || beingCrawled()) {\n        repo.server_ = new ReadonlyRestClient(repo.repoInfo_, (pathString, data, isMerge, tag) => {\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n        }, repo.authTokenProvider_, repo.appCheckProvider_);\n        // Minor hack: Fire onConnect immediately, since there's no actual connection.\n        setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n    }\n    else {\n        // Validate authOverride\n        if (typeof authOverride !== 'undefined' && authOverride !== null) {\n            if (typeof authOverride !== 'object') {\n                throw new Error('Only objects are supported for option databaseAuthVariableOverride');\n            }\n            try {\n                stringify(authOverride);\n            }\n            catch (e) {\n                throw new Error('Invalid authOverride provided: ' + e);\n            }\n        }\n        repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, (pathString, data, isMerge, tag) => {\n            repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n        }, (connectStatus) => {\n            repoOnConnectStatus(repo, connectStatus);\n        }, (updates) => {\n            repoOnServerInfoUpdate(repo, updates);\n        }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);\n        repo.server_ = repo.persistentConnection_;\n    }\n    repo.authTokenProvider_.addTokenChangeListener(token => {\n        repo.server_.refreshAuthToken(token);\n    });\n    repo.appCheckProvider_.addTokenChangeListener(result => {\n        repo.server_.refreshAppCheckToken(result.token);\n    });\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n    repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, () => new StatsReporter(repo.stats_, repo.server_));\n    // Used for .info.\n    repo.infoData_ = new SnapshotHolder();\n    repo.infoSyncTree_ = new SyncTree({\n        startListening: (query, tag, currentHashFn, onComplete) => {\n            let infoEvents = [];\n            const node = repo.infoData_.getNode(query._path);\n            // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n            // on initial data...\n            if (!node.isEmpty()) {\n                infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query._path, node);\n                setTimeout(() => {\n                    onComplete('ok');\n                }, 0);\n            }\n            return infoEvents;\n        },\n        stopListening: () => { }\n    });\n    repoUpdateInfo(repo, 'connected', false);\n    repo.serverSyncTree_ = new SyncTree({\n        startListening: (query, tag, currentHashFn, onComplete) => {\n            repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n                const events = onComplete(status, data);\n                eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\n            });\n            // No synchronous events for network-backed sync trees\n            return [];\n        },\n        stopListening: (query, tag) => {\n            repo.server_.unlisten(query, tag);\n        }\n    });\n}\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nfunction repoServerTime(repo) {\n    const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n    const offset = offsetNode.val() || 0;\n    return new Date().getTime() + offset;\n}\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nfunction repoGenerateServerValues(repo) {\n    return generateWithValues({\n        timestamp: repoServerTime(repo)\n    });\n}\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(repo, pathString, data, isMerge, tag) {\n    // For testing.\n    repo.dataUpdateCount++;\n    const path = new Path(pathString);\n    data = repo.interceptServerDataCallback_\n        ? repo.interceptServerDataCallback_(pathString, data)\n        : data;\n    let events = [];\n    if (tag) {\n        if (isMerge) {\n            const taggedChildren = map(data, (raw) => nodeFromJSON(raw));\n            events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);\n        }\n        else {\n            const taggedSnap = nodeFromJSON(data);\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);\n        }\n    }\n    else if (isMerge) {\n        const changedChildren = map(data, (raw) => nodeFromJSON(raw));\n        events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);\n    }\n    else {\n        const snap = nodeFromJSON(data);\n        events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n    }\n    let affectedPath = path;\n    if (events.length > 0) {\n        // Since we have a listener outstanding for each transaction, receiving any events\n        // is a proxy for some change having occurred.\n        affectedPath = repoRerunTransactions(repo, path);\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\nfunction repoOnConnectStatus(repo, connectStatus) {\n    repoUpdateInfo(repo, 'connected', connectStatus);\n    if (connectStatus === false) {\n        repoRunOnDisconnectEvents(repo);\n    }\n}\nfunction repoOnServerInfoUpdate(repo, updates) {\n    each(updates, (key, value) => {\n        repoUpdateInfo(repo, key, value);\n    });\n}\nfunction repoUpdateInfo(repo, pathString, value) {\n    const path = new Path('/.info/' + pathString);\n    const newNode = nodeFromJSON(value);\n    repo.infoData_.updateSnapshot(path, newNode);\n    const events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\nfunction repoGetNextWriteId(repo) {\n    return repo.nextWriteId_++;\n}\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will wait until the\n *  repo has established a connection and then request the value for `query`.\n * If the client is not able to retrieve the query result for another reason,\n * it reports an error.\n *\n * @param query - The query to surface a value for.\n */\nfunction repoGetValue(repo, query, eventRegistration) {\n    // Only active queries are cached. There is no persisted cache.\n    const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n    if (cached != null) {\n        return Promise.resolve(cached);\n    }\n    return repo.server_.get(query).then(payload => {\n        const node = nodeFromJSON(payload).withIndex(query._queryParams.getIndex());\n        /**\n         * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\n         * Add an event registration,\n         * Update data at the path,\n         * Raise any events,\n         * Cleanup the SyncTree\n         */\n        syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration, true);\n        let events;\n        if (query._queryParams.loadsAllData()) {\n            events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query._path, node);\n        }\n        else {\n            const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n            events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, query._path, node, tag);\n        }\n        /*\n         * We need to raise events in the scenario where `get()` is called at a parent path, and\n         * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\n         * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\n         * and its corresponding serverCache, including the child location where `onValue` is called. Then,\n         * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\n         * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\n         * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\n         * ensure the corresponding child events will get fired.\n         */\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query._path, events);\n        syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration, null, true);\n        return node;\n    }, err => {\n        repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n        return Promise.reject(new Error(err));\n    });\n}\nfunction repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {\n    repoLog(repo, 'set', {\n        path: path.toString(),\n        value: newVal,\n        priority: newPriority\n    });\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n    // (b) store unresolved paths on JSON parse\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n    const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n    const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n            warn('set at ' + path + ' failed: ' + status);\n        }\n        const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n    const affectedPath = repoAbortTransactions(repo, path);\n    repoRerunTransactions(repo, affectedPath);\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\nfunction repoUpdate(repo, path, childrenToMerge, onComplete) {\n    repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n    // Start with our existing data and merge each child into it.\n    let empty = true;\n    const serverValues = repoGenerateServerValues(repo);\n    const changedChildren = {};\n    each(childrenToMerge, (changedKey, changedValue) => {\n        empty = false;\n        changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);\n    });\n    if (!empty) {\n        const writeId = repoGetNextWriteId(repo);\n        const events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId);\n        eventQueueQueueEvents(repo.eventQueue_, events);\n        repo.server_.merge(path.toString(), childrenToMerge, (status, errorReason) => {\n            const success = status === 'ok';\n            if (!success) {\n                warn('update at ' + path + ' failed: ' + status);\n            }\n            const clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);\n            const affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);\n            repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n        });\n        each(childrenToMerge, (changedPath) => {\n            const affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));\n            repoRerunTransactions(repo, affectedPath);\n        });\n        // We queued the events above, so just flush the queue here\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n    }\n    else {\n        log(\"update() called with empty data.  Don't do anything.\");\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    }\n}\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo) {\n    repoLog(repo, 'onDisconnectEvents');\n    const serverValues = repoGenerateServerValues(repo);\n    const resolvedOnDisconnectTree = newSparseSnapshotTree();\n    sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), (path, node) => {\n        const resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);\n        sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    });\n    let events = [];\n    sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), (path, snap) => {\n        events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));\n        const affectedPath = repoAbortTransactions(repo, path);\n        repoRerunTransactions(repo, affectedPath);\n    });\n    repo.onDisconnect_ = newSparseSnapshotTree();\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\nfunction repoOnDisconnectCancel(repo, path, onComplete) {\n    repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n        if (status === 'ok') {\n            sparseSnapshotTreeForget(repo.onDisconnect_, path);\n        }\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n}\nfunction repoOnDisconnectSet(repo, path, value, onComplete) {\n    const newNode = nodeFromJSON(value);\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\n        if (status === 'ok') {\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n        }\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n}\nfunction repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {\n    const newNode = nodeFromJSON(value, priority);\n    repo.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), (status, errorReason) => {\n        if (status === 'ok') {\n            sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n        }\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n}\nfunction repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {\n    if (isEmpty(childrenToMerge)) {\n        log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n        repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n        return;\n    }\n    repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, (status, errorReason) => {\n        if (status === 'ok') {\n            each(childrenToMerge, (childName, childNode) => {\n                const newChildNode = nodeFromJSON(childNode);\n                sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);\n            });\n        }\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    });\n}\nfunction repoAddEventCallbackForQuery(repo, query, eventRegistration) {\n    let events;\n    if (pathGetFront(query._path) === '.info') {\n        events = syncTreeAddEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n    }\n    else {\n        events = syncTreeAddEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n    }\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\nfunction repoRemoveEventCallbackForQuery(repo, query, eventRegistration) {\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n    // a little bit by handling the return values anyways.\n    let events;\n    if (pathGetFront(query._path) === '.info') {\n        events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query, eventRegistration);\n    }\n    else {\n        events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query, eventRegistration);\n    }\n    eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\nfunction repoInterrupt(repo) {\n    if (repo.persistentConnection_) {\n        repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n    }\n}\nfunction repoResume(repo) {\n    if (repo.persistentConnection_) {\n        repo.persistentConnection_.resume(INTERRUPT_REASON);\n    }\n}\nfunction repoLog(repo, ...varArgs) {\n    let prefix = '';\n    if (repo.persistentConnection_) {\n        prefix = repo.persistentConnection_.id + ':';\n    }\n    log(prefix, ...varArgs);\n}\nfunction repoCallOnCompleteCallback(repo, callback, status, errorReason) {\n    if (callback) {\n        exceptionGuard(() => {\n            if (status === 'ok') {\n                callback(null);\n            }\n            else {\n                const code = (status || 'error').toUpperCase();\n                let message = code;\n                if (errorReason) {\n                    message += ': ' + errorReason;\n                }\n                const error = new Error(message);\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                error.code = code;\n                callback(error);\n            }\n        });\n    }\n}\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nfunction repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {\n    repoLog(repo, 'transaction on ' + path);\n    // Initialize transaction.\n    const transaction = {\n        path,\n        update: transactionUpdate,\n        onComplete,\n        // One of TransactionStatus enums.\n        status: null,\n        // Used when combining transactions at different locations to figure out\n        // which one goes first.\n        order: LUIDGenerator(),\n        // Whether to raise local events for this transaction.\n        applyLocally,\n        // Count of how many times we've retried the transaction.\n        retryCount: 0,\n        // Function to call to clean up our .on() listener.\n        unwatcher,\n        // Stores why a transaction was aborted.\n        abortReason: null,\n        currentWriteId: null,\n        currentInputSnapshot: null,\n        currentOutputSnapshotRaw: null,\n        currentOutputSnapshotResolved: null\n    };\n    // Run transaction initially.\n    const currentState = repoGetLatestState(repo, path, undefined);\n    transaction.currentInputSnapshot = currentState;\n    const newVal = transaction.update(currentState.val());\n    if (newVal === undefined) {\n        // Abort transaction.\n        transaction.unwatcher();\n        transaction.currentOutputSnapshotRaw = null;\n        transaction.currentOutputSnapshotResolved = null;\n        if (transaction.onComplete) {\n            transaction.onComplete(null, false, transaction.currentInputSnapshot);\n        }\n    }\n    else {\n        validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\n        // Mark as run and add to our queue.\n        transaction.status = 0 /* RUN */;\n        const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n        const nodeQueue = treeGetValue(queueNode) || [];\n        nodeQueue.push(transaction);\n        treeSetValue(queueNode, nodeQueue);\n        // Update visibleData and raise events\n        // Note: We intentionally raise events after updating all of our\n        // transaction state, since the user could start new transactions from the\n        // event callbacks.\n        let priorityForNode;\n        if (typeof newVal === 'object' &&\n            newVal !== null &&\n            contains(newVal, '.priority')) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            priorityForNode = safeGet(newVal, '.priority');\n            assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\n                'Priority must be a valid string, finite number, server value, or null.');\n        }\n        else {\n            const currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n                ChildrenNode.EMPTY_NODE;\n            priorityForNode = currentNode.getPriority().val();\n        }\n        const serverValues = repoGenerateServerValues(repo);\n        const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n        const newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n        transaction.currentOutputSnapshotResolved = newNode;\n        transaction.currentWriteId = repoGetNextWriteId(repo);\n        const events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n    }\n}\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(repo, path, excludeSets) {\n    return (syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n        ChildrenNode.EMPTY_NODE);\n}\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(repo, node = repo.transactionQueueTree_) {\n    // Before recursing, make sure any completed transactions are removed.\n    if (!node) {\n        repoPruneCompletedTransactionsBelowNode(repo, node);\n    }\n    if (treeGetValue(node)) {\n        const queue = repoBuildTransactionQueue(repo, node);\n        assert(queue.length > 0, 'Sending zero length transaction queue');\n        const allRun = queue.every((transaction) => transaction.status === 0 /* RUN */);\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\n        if (allRun) {\n            repoSendTransactionQueue(repo, treeGetPath(node), queue);\n        }\n    }\n    else if (treeHasChildren(node)) {\n        treeForEachChild(node, childNode => {\n            repoSendReadyTransactions(repo, childNode);\n        });\n    }\n}\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(repo, path, queue) {\n    // Mark transactions as sent and increment retry count!\n    const setsToIgnore = queue.map(txn => {\n        return txn.currentWriteId;\n    });\n    const latestState = repoGetLatestState(repo, path, setsToIgnore);\n    let snapToSend = latestState;\n    const latestHash = latestState.hash();\n    for (let i = 0; i < queue.length; i++) {\n        const txn = queue[i];\n        assert(txn.status === 0 /* RUN */, 'tryToSendTransactionQueue_: items in queue should all be run.');\n        txn.status = 1 /* SENT */;\n        txn.retryCount++;\n        const relativePath = newRelativePath(path, txn.path);\n        // If we've gotten to this point, the output snapshot must be defined.\n        snapToSend = snapToSend.updateChild(relativePath /** @type {!Node} */, txn.currentOutputSnapshotRaw);\n    }\n    const dataToSend = snapToSend.val(true);\n    const pathToSend = path;\n    // Send the put.\n    repo.server_.put(pathToSend.toString(), dataToSend, (status) => {\n        repoLog(repo, 'transaction put response', {\n            path: pathToSend.toString(),\n            status\n        });\n        let events = [];\n        if (status === 'ok') {\n            // Queue up the callbacks and fire them after cleaning up all of our\n            // transaction state, since the callback could trigger more\n            // transactions or sets.\n            const callbacks = [];\n            for (let i = 0; i < queue.length; i++) {\n                queue[i].status = 2 /* COMPLETED */;\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId));\n                if (queue[i].onComplete) {\n                    // We never unset the output snapshot, and given that this\n                    // transaction is complete, it should be set\n                    callbacks.push(() => queue[i].onComplete(null, true, queue[i].currentOutputSnapshotResolved));\n                }\n                queue[i].unwatcher();\n            }\n            // Now remove the completed transactions.\n            repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));\n            // There may be pending transactions that we can now send.\n            repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n            eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n            // Finally, trigger onComplete callbacks.\n            for (let i = 0; i < callbacks.length; i++) {\n                exceptionGuard(callbacks[i]);\n            }\n        }\n        else {\n            // transactions are no longer sent.  Update their status appropriately.\n            if (status === 'datastale') {\n                for (let i = 0; i < queue.length; i++) {\n                    if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) {\n                        queue[i].status = 4 /* NEEDS_ABORT */;\n                    }\n                    else {\n                        queue[i].status = 0 /* RUN */;\n                    }\n                }\n            }\n            else {\n                warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\n                for (let i = 0; i < queue.length; i++) {\n                    queue[i].status = 4 /* NEEDS_ABORT */;\n                    queue[i].abortReason = status;\n                }\n            }\n            repoRerunTransactions(repo, path);\n        }\n    }, latestHash);\n}\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo, changedPath) {\n    const rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);\n    const path = treeGetPath(rootMostTransactionNode);\n    const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n    repoRerunTransactionQueue(repo, queue, path);\n    return path;\n}\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(repo, queue, path) {\n    if (queue.length === 0) {\n        return; // Nothing to do!\n    }\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions or\n    // sets.\n    const callbacks = [];\n    let events = [];\n    // Ignore all of the sets we're going to re-run.\n    const txnsToRerun = queue.filter(q => {\n        return q.status === 0 /* RUN */;\n    });\n    const setsToIgnore = txnsToRerun.map(q => {\n        return q.currentWriteId;\n    });\n    for (let i = 0; i < queue.length; i++) {\n        const transaction = queue[i];\n        const relativePath = newRelativePath(path, transaction.path);\n        let abortTransaction = false, abortReason;\n        assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\n        if (transaction.status === 4 /* NEEDS_ABORT */) {\n            abortTransaction = true;\n            abortReason = transaction.abortReason;\n            events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n        }\n        else if (transaction.status === 0 /* RUN */) {\n            if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n                abortTransaction = true;\n                abortReason = 'maxretry';\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n            }\n            else {\n                // This code reruns a transaction\n                const currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);\n                transaction.currentInputSnapshot = currentNode;\n                const newData = queue[i].update(currentNode.val());\n                if (newData !== undefined) {\n                    validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\n                    let newDataNode = nodeFromJSON(newData);\n                    const hasExplicitPriority = typeof newData === 'object' &&\n                        newData != null &&\n                        contains(newData, '.priority');\n                    if (!hasExplicitPriority) {\n                        // Keep the old priority if there wasn't a priority explicitly specified.\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n                    }\n                    const oldWriteId = transaction.currentWriteId;\n                    const serverValues = repoGenerateServerValues(repo);\n                    const newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\n                    transaction.currentOutputSnapshotRaw = newDataNode;\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\n                    transaction.currentWriteId = repoGetNextWriteId(repo);\n                    // Mutates setsToIgnore in place\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n                    events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));\n                }\n                else {\n                    abortTransaction = true;\n                    abortReason = 'nodata';\n                    events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));\n                }\n            }\n        }\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n        events = [];\n        if (abortTransaction) {\n            // Abort.\n            queue[i].status = 2 /* COMPLETED */;\n            // Removing a listener can trigger pruning which can muck with\n            // mergedData/visibleData (as it prunes data). So defer the unwatcher\n            // until we're done.\n            (function (unwatcher) {\n                setTimeout(unwatcher, Math.floor(0));\n            })(queue[i].unwatcher);\n            if (queue[i].onComplete) {\n                if (abortReason === 'nodata') {\n                    callbacks.push(() => queue[i].onComplete(null, false, queue[i].currentInputSnapshot));\n                }\n                else {\n                    callbacks.push(() => queue[i].onComplete(new Error(abortReason), false, null));\n                }\n            }\n        }\n    }\n    // Clean up completed transactions.\n    repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n    // Now fire callbacks, now that we're in a good, known state.\n    for (let i = 0; i < callbacks.length; i++) {\n        exceptionGuard(callbacks[i]);\n    }\n    // Try to send the transaction result to the server.\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(repo, path) {\n    let front;\n    // Start at the root and walk deeper into the tree towards path until we\n    // find a node with pending transactions.\n    let transactionNode = repo.transactionQueueTree_;\n    front = pathGetFront(path);\n    while (front !== null && treeGetValue(transactionNode) === undefined) {\n        transactionNode = treeSubTree(transactionNode, front);\n        path = pathPopFront(path);\n        front = pathGetFront(path);\n    }\n    return transactionNode;\n}\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(repo, transactionNode) {\n    // Walk any child transaction queues and aggregate them into a single queue.\n    const transactionQueue = [];\n    repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);\n    // Sort them by the order the transactions were created.\n    transactionQueue.sort((a, b) => a.order - b.order);\n    return transactionQueue;\n}\nfunction repoAggregateTransactionQueuesForNode(repo, node, queue) {\n    const nodeQueue = treeGetValue(node);\n    if (nodeQueue) {\n        for (let i = 0; i < nodeQueue.length; i++) {\n            queue.push(nodeQueue[i]);\n        }\n    }\n    treeForEachChild(node, child => {\n        repoAggregateTransactionQueuesForNode(repo, child, queue);\n    });\n}\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(repo, node) {\n    const queue = treeGetValue(node);\n    if (queue) {\n        let to = 0;\n        for (let from = 0; from < queue.length; from++) {\n            if (queue[from].status !== 2 /* COMPLETED */) {\n                queue[to] = queue[from];\n                to++;\n            }\n        }\n        queue.length = to;\n        treeSetValue(node, queue.length > 0 ? queue : undefined);\n    }\n    treeForEachChild(node, childNode => {\n        repoPruneCompletedTransactionsBelowNode(repo, childNode);\n    });\n}\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo, path) {\n    const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n    const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n    treeForEachAncestor(transactionNode, (node) => {\n        repoAbortTransactionsOnNode(repo, node);\n    });\n    repoAbortTransactionsOnNode(repo, transactionNode);\n    treeForEachDescendant(transactionNode, (node) => {\n        repoAbortTransactionsOnNode(repo, node);\n    });\n    return affectedPath;\n}\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(repo, node) {\n    const queue = treeGetValue(node);\n    if (queue) {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more transactions\n        // or sets.\n        const callbacks = [];\n        // Go through queue.  Any already-sent transactions must be marked for\n        // abort, while the unsent ones can be immediately aborted and removed.\n        let events = [];\n        let lastSent = -1;\n        for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === 3 /* SENT_NEEDS_ABORT */) ;\n            else if (queue[i].status === 1 /* SENT */) {\n                assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\n                lastSent = i;\n                // Mark transaction for abort when it comes back.\n                queue[i].status = 3 /* SENT_NEEDS_ABORT */;\n                queue[i].abortReason = 'set';\n            }\n            else {\n                assert(queue[i].status === 0 /* RUN */, 'Unexpected transaction status in abort');\n                // We can abort it immediately.\n                queue[i].unwatcher();\n                events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId, true));\n                if (queue[i].onComplete) {\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, null));\n                }\n            }\n        }\n        if (lastSent === -1) {\n            // We're not waiting for any sent transactions.  We can clear the queue.\n            treeSetValue(node, undefined);\n        }\n        else {\n            // Remove the transactions we aborted.\n            queue.length = lastSent + 1;\n        }\n        // Now fire the callbacks.\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);\n        for (let i = 0; i < callbacks.length; i++) {\n            exceptionGuard(callbacks[i]);\n        }\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction decodePath(pathString) {\n    let pathStringDecoded = '';\n    const pieces = pathString.split('/');\n    for (let i = 0; i < pieces.length; i++) {\n        if (pieces[i].length > 0) {\n            let piece = pieces[i];\n            try {\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n            }\n            catch (e) { }\n            pathStringDecoded += '/' + piece;\n        }\n    }\n    return pathStringDecoded;\n}\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString) {\n    const results = {};\n    if (queryString.charAt(0) === '?') {\n        queryString = queryString.substring(1);\n    }\n    for (const segment of queryString.split('&')) {\n        if (segment.length === 0) {\n            continue;\n        }\n        const kv = segment.split('=');\n        if (kv.length === 2) {\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n        }\n        else {\n            warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n        }\n    }\n    return results;\n}\nconst parseRepoInfo = function (dataURL, nodeAdmin) {\n    const parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;\n    if (parsedUrl.domain === 'firebase.com') {\n        fatal(parsedUrl.host +\n            ' is no longer supported. ' +\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\n    }\n    // Catch common error of uninitialized namespace value.\n    if ((!namespace || namespace === 'undefined') &&\n        parsedUrl.domain !== 'localhost') {\n        fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\n    }\n    if (!parsedUrl.secure) {\n        warnIfPageIsSecure();\n    }\n    const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n    return {\n        repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly, nodeAdmin, \n        /*persistenceKey=*/ '', \n        /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain),\n        path: new Path(parsedUrl.pathString)\n    };\n};\nconst parseDatabaseURL = function (dataURL) {\n    // Default to empty strings in the event of a malformed string.\n    let host = '', domain = '', subdomain = '', pathString = '', namespace = '';\n    // Always default to SSL, unless otherwise specified.\n    let secure = true, scheme = 'https', port = 443;\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\n    if (typeof dataURL === 'string') {\n        // Parse scheme.\n        let colonInd = dataURL.indexOf('//');\n        if (colonInd >= 0) {\n            scheme = dataURL.substring(0, colonInd - 1);\n            dataURL = dataURL.substring(colonInd + 2);\n        }\n        // Parse host, path, and query string.\n        let slashInd = dataURL.indexOf('/');\n        if (slashInd === -1) {\n            slashInd = dataURL.length;\n        }\n        let questionMarkInd = dataURL.indexOf('?');\n        if (questionMarkInd === -1) {\n            questionMarkInd = dataURL.length;\n        }\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n        if (slashInd < questionMarkInd) {\n            // For pathString, questionMarkInd will always come after slashInd\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n        }\n        const queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\n        // If we have a port, use scheme for determining if it's secure.\n        colonInd = host.indexOf(':');\n        if (colonInd >= 0) {\n            secure = scheme === 'https' || scheme === 'wss';\n            port = parseInt(host.substring(colonInd + 1), 10);\n        }\n        else {\n            colonInd = host.length;\n        }\n        const hostWithoutPort = host.slice(0, colonInd);\n        if (hostWithoutPort.toLowerCase() === 'localhost') {\n            domain = 'localhost';\n        }\n        else if (hostWithoutPort.split('.').length <= 2) {\n            domain = hostWithoutPort;\n        }\n        else {\n            // Interpret the subdomain of a 3 or more component URL as the namespace name.\n            const dotInd = host.indexOf('.');\n            subdomain = host.substring(0, dotInd).toLowerCase();\n            domain = host.substring(dotInd + 1);\n            // Normalize namespaces to lowercase to share storage / connection.\n            namespace = subdomain;\n        }\n        // Always treat the value of the `ns` as the namespace name if it is present.\n        if ('ns' in queryParams) {\n            namespace = queryParams['ns'];\n        }\n    }\n    return {\n        host,\n        port,\n        domain,\n        subdomain,\n        secure,\n        scheme,\n        pathString,\n        namespace\n    };\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Encapsulates the data needed to raise an event\n */\nclass DataEvent {\n    /**\n     * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n     * @param eventRegistration - The function to call to with the event data. User provided\n     * @param snapshot - The data backing the event\n     * @param prevName - Optional, the name of the previous child for child_* events.\n     */\n    constructor(eventType, eventRegistration, snapshot, prevName) {\n        this.eventType = eventType;\n        this.eventRegistration = eventRegistration;\n        this.snapshot = snapshot;\n        this.prevName = prevName;\n    }\n    getPath() {\n        const ref = this.snapshot.ref;\n        if (this.eventType === 'value') {\n            return ref._path;\n        }\n        else {\n            return ref.parent._path;\n        }\n    }\n    getEventType() {\n        return this.eventType;\n    }\n    getEventRunner() {\n        return this.eventRegistration.getEventRunner(this);\n    }\n    toString() {\n        return (this.getPath().toString() +\n            ':' +\n            this.eventType +\n            ':' +\n            stringify(this.snapshot.exportVal()));\n    }\n}\nclass CancelEvent {\n    constructor(eventRegistration, error, path) {\n        this.eventRegistration = eventRegistration;\n        this.error = error;\n        this.path = path;\n    }\n    getPath() {\n        return this.path;\n    }\n    getEventType() {\n        return 'cancel';\n    }\n    getEventRunner() {\n        return this.eventRegistration.getEventRunner(this);\n    }\n    toString() {\n        return this.path.toString() + ':cancel';\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nclass CallbackContext {\n    constructor(snapshotCallback, cancelCallback) {\n        this.snapshotCallback = snapshotCallback;\n        this.cancelCallback = cancelCallback;\n    }\n    onValue(expDataSnapshot, previousChildName) {\n        this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n    }\n    onCancel(error) {\n        assert(this.hasCancelCallback, 'Raising a cancel event on a listener with no cancel callback');\n        return this.cancelCallback.call(null, error);\n    }\n    get hasCancelCallback() {\n        return !!this.cancelCallback;\n    }\n    matches(other) {\n        return (this.snapshotCallback === other.snapshotCallback ||\n            (this.snapshotCallback.userCallback !== undefined &&\n                this.snapshotCallback.userCallback ===\n                    other.snapshotCallback.userCallback &&\n                this.snapshotCallback.context === other.snapshotCallback.context));\n    }\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The `onDisconnect` class allows you to write or clear data when your client\n * disconnects from the Database server. These updates occur whether your\n * client disconnects cleanly or not, so you can rely on them to clean up data\n * even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in\n * applications where it is useful to detect how many clients are connected and\n * when other clients disconnect. See\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be\n * transferred to the Database server, these functions should be called before\n * writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an\n * operation to occur each time a disconnect occurs, you'll need to re-establish\n * the `onDisconnect` operations each time you reconnect.\n */\nclass OnDisconnect {\n    /** @hideconstructor */\n    constructor(_repo, _path) {\n        this._repo = _repo;\n        this._path = _path;\n    }\n    /**\n     * Cancels all previously queued `onDisconnect()` set or update events for this\n     * location and all children.\n     *\n     * If a write has been queued for this location via a `set()` or `update()` at a\n     * parent location, the write at this location will be canceled, though writes\n     * to sibling locations will still occur.\n     *\n     * @returns Resolves when synchronization to the server is complete.\n     */\n    cancel() {\n        const deferred = new Deferred();\n        repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(() => { }));\n        return deferred.promise;\n    }\n    /**\n     * Ensures the data at this location is deleted when the client is disconnected\n     * (due to closing the browser, navigating to a new page, or network issues).\n     *\n     * @returns Resolves when synchronization to the server is complete.\n     */\n    remove() {\n        validateWritablePath('OnDisconnect.remove', this._path);\n        const deferred = new Deferred();\n        repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(() => { }));\n        return deferred.promise;\n    }\n    /**\n     * Ensures the data at this location is set to the specified value when the\n     * client is disconnected (due to closing the browser, navigating to a new page,\n     * or network issues).\n     *\n     * `set()` is especially useful for implementing \"presence\" systems, where a\n     * value should be changed or cleared when a user disconnects so that they\n     * appear \"offline\" to other users. See\n     * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n     * for more information.\n     *\n     * Note that `onDisconnect` operations are only triggered once. If you want an\n     * operation to occur each time a disconnect occurs, you'll need to re-establish\n     * the `onDisconnect` operations each time.\n     *\n     * @param value - The value to be written to this location on disconnect (can\n     * be an object, array, string, number, boolean, or null).\n     * @returns Resolves when synchronization to the Database is complete.\n     */\n    set(value) {\n        validateWritablePath('OnDisconnect.set', this._path);\n        validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n        const deferred = new Deferred();\n        repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(() => { }));\n        return deferred.promise;\n    }\n    /**\n     * Ensures the data at this location is set to the specified value and priority\n     * when the client is disconnected (due to closing the browser, navigating to a\n     * new page, or network issues).\n     *\n     * @param value - The value to be written to this location on disconnect (can\n     * be an object, array, string, number, boolean, or null).\n     * @param priority - The priority to be written (string, number, or null).\n     * @returns Resolves when synchronization to the Database is complete.\n     */\n    setWithPriority(value, priority) {\n        validateWritablePath('OnDisconnect.setWithPriority', this._path);\n        validateFirebaseDataArg('OnDisconnect.setWithPriority', value, this._path, false);\n        validatePriority('OnDisconnect.setWithPriority', priority, false);\n        const deferred = new Deferred();\n        repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(() => { }));\n        return deferred.promise;\n    }\n    /**\n     * Writes multiple values at this location when the client is disconnected (due\n     * to closing the browser, navigating to a new page, or network issues).\n     *\n     * The `values` argument contains multiple property-value pairs that will be\n     * written to the Database together. Each child property can either be a simple\n     * property (for example, \"name\") or a relative path (for example, \"name/first\")\n     * from the current location to the data to update.\n     *\n     * As opposed to the `set()` method, `update()` can be use to selectively update\n     * only the referenced properties at the current location (instead of replacing\n     * all the child properties at the current location).\n     *\n     * @param values - Object containing multiple values.\n     * @returns Resolves when synchronization to the Database is complete.\n     */\n    update(values) {\n        validateWritablePath('OnDisconnect.update', this._path);\n        validateFirebaseMergeDataArg('OnDisconnect.update', values, this._path, false);\n        const deferred = new Deferred();\n        repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(() => { }));\n        return deferred.promise;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @internal\n */\nclass QueryImpl {\n    /**\n     * @hideconstructor\n     */\n    constructor(_repo, _path, _queryParams, _orderByCalled) {\n        this._repo = _repo;\n        this._path = _path;\n        this._queryParams = _queryParams;\n        this._orderByCalled = _orderByCalled;\n    }\n    get key() {\n        if (pathIsEmpty(this._path)) {\n            return null;\n        }\n        else {\n            return pathGetBack(this._path);\n        }\n    }\n    get ref() {\n        return new ReferenceImpl(this._repo, this._path);\n    }\n    get _queryIdentifier() {\n        const obj = queryParamsGetQueryObject(this._queryParams);\n        const id = ObjectToUniqueKey(obj);\n        return id === '{}' ? 'default' : id;\n    }\n    /**\n     * An object representation of the query parameters used by this Query.\n     */\n    get _queryObject() {\n        return queryParamsGetQueryObject(this._queryParams);\n    }\n    isEqual(other) {\n        other = getModularInstance(other);\n        if (!(other instanceof QueryImpl)) {\n            return false;\n        }\n        const sameRepo = this._repo === other._repo;\n        const samePath = pathEquals(this._path, other._path);\n        const sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;\n        return sameRepo && samePath && sameQueryIdentifier;\n    }\n    toJSON() {\n        return this.toString();\n    }\n    toString() {\n        return this._repo.toString() + pathToUrlEncodedString(this._path);\n    }\n}\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query, fnName) {\n    if (query._orderByCalled === true) {\n        throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n    }\n}\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params) {\n    let startNode = null;\n    let endNode = null;\n    if (params.hasStart()) {\n        startNode = params.getIndexStartValue();\n    }\n    if (params.hasEnd()) {\n        endNode = params.getIndexEndValue();\n    }\n    if (params.getIndex() === KEY_INDEX) {\n        const tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\n            'startAt(), endAt(), or equalTo().';\n        const wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n            'endAt(), endBefore(), or equalTo() must be a string.';\n        if (params.hasStart()) {\n            const startName = params.getIndexStartName();\n            if (startName !== MIN_NAME) {\n                throw new Error(tooManyArgsError);\n            }\n            else if (typeof startNode !== 'string') {\n                throw new Error(wrongArgTypeError);\n            }\n        }\n        if (params.hasEnd()) {\n            const endName = params.getIndexEndName();\n            if (endName !== MAX_NAME) {\n                throw new Error(tooManyArgsError);\n            }\n            else if (typeof endNode !== 'string') {\n                throw new Error(wrongArgTypeError);\n            }\n        }\n    }\n    else if (params.getIndex() === PRIORITY_INDEX) {\n        if ((startNode != null && !isValidPriority(startNode)) ||\n            (endNode != null && !isValidPriority(endNode))) {\n            throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\n                'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n                '(null, a number, or a string).');\n        }\n    }\n    else {\n        assert(params.getIndex() instanceof PathIndex ||\n            params.getIndex() === VALUE_INDEX, 'unknown index type.');\n        if ((startNode != null && typeof startNode === 'object') ||\n            (endNode != null && typeof endNode === 'object')) {\n            throw new Error('Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n                'equalTo() cannot be an object.');\n        }\n    }\n}\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params) {\n    if (params.hasStart() &&\n        params.hasEnd() &&\n        params.hasLimit() &&\n        !params.hasAnchoredLimit()) {\n        throw new Error(\"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n            'limitToFirst() or limitToLast() instead.');\n    }\n}\n/**\n * @internal\n */\nclass ReferenceImpl extends QueryImpl {\n    /** @hideconstructor */\n    constructor(repo, path) {\n        super(repo, path, new QueryParams(), false);\n    }\n    get parent() {\n        const parentPath = pathParent(this._path);\n        return parentPath === null\n            ? null\n            : new ReferenceImpl(this._repo, parentPath);\n    }\n    get root() {\n        let ref = this;\n        while (ref.parent !== null) {\n            ref = ref.parent;\n        }\n        return ref;\n    }\n}\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nclass DataSnapshot {\n    /**\n     * @param _node - A SnapshotNode to wrap.\n     * @param ref - The location this snapshot came from.\n     * @param _index - The iteration order for this snapshot\n     * @hideconstructor\n     */\n    constructor(_node, \n    /**\n     * The location of this DataSnapshot.\n     */\n    ref, _index) {\n        this._node = _node;\n        this.ref = ref;\n        this._index = _index;\n    }\n    /**\n     * Gets the priority value of the data in this `DataSnapshot`.\n     *\n     * Applications need not use priority but can order collections by\n     * ordinary properties (see\n     * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n     * ).\n     */\n    get priority() {\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n        return this._node.getPriority().val();\n    }\n    /**\n     * The key (last part of the path) of the location of this `DataSnapshot`.\n     *\n     * The last token in a Database location is considered its key. For example,\n     * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n     * `DataSnapshot` will return the key for the location that generated it.\n     * However, accessing the key on the root URL of a Database will return\n     * `null`.\n     */\n    get key() {\n        return this.ref.key;\n    }\n    /** Returns the number of child properties of this `DataSnapshot`. */\n    get size() {\n        return this._node.numChildren();\n    }\n    /**\n     * Gets another `DataSnapshot` for the location at the specified relative path.\n     *\n     * Passing a relative path to the `child()` method of a DataSnapshot returns\n     * another `DataSnapshot` for the location at the specified relative path. The\n     * relative path can either be a simple child name (for example, \"ada\") or a\n     * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n     * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n     * whose value is `null`) is returned.\n     *\n     * @param path - A relative path to the location of child data.\n     */\n    child(path) {\n        const childPath = new Path(path);\n        const childRef = child(this.ref, path);\n        return new DataSnapshot(this._node.getChild(childPath), childRef, PRIORITY_INDEX);\n    }\n    /**\n     * Returns true if this `DataSnapshot` contains any data. It is slightly more\n     * efficient than using `snapshot.val() !== null`.\n     */\n    exists() {\n        return !this._node.isEmpty();\n    }\n    /**\n     * Exports the entire contents of the DataSnapshot as a JavaScript object.\n     *\n     * The `exportVal()` method is similar to `val()`, except priority information\n     * is included (if available), making it suitable for backing up your data.\n     *\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\n     *   Array, string, number, boolean, or `null`).\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    exportVal() {\n        return this._node.val(true);\n    }\n    /**\n     * Enumerates the top-level children in the `DataSnapshot`.\n     *\n     * Because of the way JavaScript objects work, the ordering of data in the\n     * JavaScript object returned by `val()` is not guaranteed to match the\n     * ordering on the server nor the ordering of `onChildAdded()` events. That is\n     * where `forEach()` comes in handy. It guarantees the children of a\n     * `DataSnapshot` will be iterated in their query order.\n     *\n     * If no explicit `orderBy*()` method is used, results are returned\n     * ordered by key (unless priorities are used, in which case, results are\n     * returned by priority).\n     *\n     * @param action - A function that will be called for each child DataSnapshot.\n     * The callback can return true to cancel further enumeration.\n     * @returns true if enumeration was canceled due to your callback returning\n     * true.\n     */\n    forEach(action) {\n        if (this._node.isLeafNode()) {\n            return false;\n        }\n        const childrenNode = this._node;\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n        return !!childrenNode.forEachChild(this._index, (key, node) => {\n            return action(new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX));\n        });\n    }\n    /**\n     * Returns true if the specified child path has (non-null) data.\n     *\n     * @param path - A relative path to the location of a potential child.\n     * @returns `true` if data exists at the specified child path; else\n     *  `false`.\n     */\n    hasChild(path) {\n        const childPath = new Path(path);\n        return !this._node.getChild(childPath).isEmpty();\n    }\n    /**\n     * Returns whether or not the `DataSnapshot` has any non-`null` child\n     * properties.\n     *\n     * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n     * children. If it does, you can enumerate them using `forEach()`. If it\n     * doesn't, then either this snapshot contains a primitive value (which can be\n     * retrieved with `val()`) or it is empty (in which case, `val()` will return\n     * `null`).\n     *\n     * @returns true if this snapshot has any children; else false.\n     */\n    hasChildren() {\n        if (this._node.isLeafNode()) {\n            return false;\n        }\n        else {\n            return !this._node.isEmpty();\n        }\n    }\n    /**\n     * Returns a JSON-serializable representation of this object.\n     */\n    toJSON() {\n        return this.exportVal();\n    }\n    /**\n     * Extracts a JavaScript value from a `DataSnapshot`.\n     *\n     * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n     * scalar type (string, number, or boolean), an array, or an object. It may\n     * also return null, indicating that the `DataSnapshot` is empty (contains no\n     * data).\n     *\n     * @returns The DataSnapshot's contents as a JavaScript value (Object,\n     *   Array, string, number, boolean, or `null`).\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    val() {\n        return this._node.val();\n    }\n}\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nfunction ref(db, path) {\n    db = getModularInstance(db);\n    db._checkNotDeleted('ref');\n    return path !== undefined ? child(db._root, path) : db._root;\n}\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nfunction refFromURL(db, url) {\n    db = getModularInstance(db);\n    db._checkNotDeleted('refFromURL');\n    const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n    validateUrl('refFromURL', parsedURL);\n    const repoInfo = parsedURL.repoInfo;\n    if (!db._repo.repoInfo_.isCustomHost() &&\n        repoInfo.host !== db._repo.repoInfo_.host) {\n        fatal('refFromURL' +\n            ': Host name does not match the current database: ' +\n            '(found ' +\n            repoInfo.host +\n            ' but expected ' +\n            db._repo.repoInfo_.host +\n            ')');\n    }\n    return ref(db, parsedURL.path.toString());\n}\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nfunction child(parent, path) {\n    parent = getModularInstance(parent);\n    if (pathGetFront(parent._path) === null) {\n        validateRootPathString('child', 'path', path, false);\n    }\n    else {\n        validatePathString('child', 'path', path, false);\n    }\n    return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nfunction onDisconnect(ref) {\n    ref = getModularInstance(ref);\n    return new OnDisconnect(ref._repo, ref._path);\n}\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nfunction push(parent, value) {\n    parent = getModularInstance(parent);\n    validateWritablePath('push', parent._path);\n    validateFirebaseDataArg('push', value, parent._path, true);\n    const now = repoServerTime(parent._repo);\n    const name = nextPushId(now);\n    // push() returns a ThennableReference whose promise is fulfilled with a\n    // regular Reference. We use child() to create handles to two different\n    // references. The first is turned into a ThennableReference below by adding\n    // then() and catch() methods and is used as the return value of push(). The\n    // second remains a regular Reference and is used as the fulfilled value of\n    // the first ThennableReference.\n    const thennablePushRef = child(parent, name);\n    const pushRef = child(parent, name);\n    let promise;\n    if (value != null) {\n        promise = set(pushRef, value).then(() => pushRef);\n    }\n    else {\n        promise = Promise.resolve(pushRef);\n    }\n    thennablePushRef.then = promise.then.bind(promise);\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\n    return thennablePushRef;\n}\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nfunction remove(ref) {\n    validateWritablePath('remove', ref._path);\n    return set(ref, null);\n}\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nfunction set(ref, value) {\n    ref = getModularInstance(ref);\n    validateWritablePath('set', ref._path);\n    validateFirebaseDataArg('set', value, ref._path, false);\n    const deferred = new Deferred();\n    repoSetWithPriority(ref._repo, ref._path, value, \n    /*priority=*/ null, deferred.wrapCallback(() => { }));\n    return deferred.promise;\n}\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nfunction setPriority(ref, priority) {\n    ref = getModularInstance(ref);\n    validateWritablePath('setPriority', ref._path);\n    validatePriority('setPriority', priority, false);\n    const deferred = new Deferred();\n    repoSetWithPriority(ref._repo, pathChild(ref._path, '.priority'), priority, null, deferred.wrapCallback(() => { }));\n    return deferred.promise;\n}\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nfunction setWithPriority(ref, value, priority) {\n    validateWritablePath('setWithPriority', ref._path);\n    validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n    validatePriority('setWithPriority', priority, false);\n    if (ref.key === '.length' || ref.key === '.keys') {\n        throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n    }\n    const deferred = new Deferred();\n    repoSetWithPriority(ref._repo, ref._path, value, priority, deferred.wrapCallback(() => { }));\n    return deferred.promise;\n}\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nfunction update(ref, values) {\n    validateFirebaseMergeDataArg('update', values, ref._path, false);\n    const deferred = new Deferred();\n    repoUpdate(ref._repo, ref._path, values, deferred.wrapCallback(() => { }));\n    return deferred.promise;\n}\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nfunction get(query) {\n    query = getModularInstance(query);\n    const callbackContext = new CallbackContext(() => { });\n    const container = new ValueEventRegistration(callbackContext);\n    return repoGetValue(query._repo, query, container).then(node => {\n        return new DataSnapshot(node, new ReferenceImpl(query._repo, query._path), query._queryParams.getIndex());\n    });\n}\n/**\n * Represents registration for 'value' events.\n */\nclass ValueEventRegistration {\n    constructor(callbackContext) {\n        this.callbackContext = callbackContext;\n    }\n    respondsTo(eventType) {\n        return eventType === 'value';\n    }\n    createEvent(change, query) {\n        const index = query._queryParams.getIndex();\n        return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, new ReferenceImpl(query._repo, query._path), index));\n    }\n    getEventRunner(eventData) {\n        if (eventData.getEventType() === 'cancel') {\n            return () => this.callbackContext.onCancel(eventData.error);\n        }\n        else {\n            return () => this.callbackContext.onValue(eventData.snapshot, null);\n        }\n    }\n    createCancelEvent(error, path) {\n        if (this.callbackContext.hasCancelCallback) {\n            return new CancelEvent(this, error, path);\n        }\n        else {\n            return null;\n        }\n    }\n    matches(other) {\n        if (!(other instanceof ValueEventRegistration)) {\n            return false;\n        }\n        else if (!other.callbackContext || !this.callbackContext) {\n            // If no callback specified, we consider it to match any callback.\n            return true;\n        }\n        else {\n            return other.callbackContext.matches(this.callbackContext);\n        }\n    }\n    hasAnyCallback() {\n        return this.callbackContext !== null;\n    }\n}\n/**\n * Represents the registration of a child_x event.\n */\nclass ChildEventRegistration {\n    constructor(eventType, callbackContext) {\n        this.eventType = eventType;\n        this.callbackContext = callbackContext;\n    }\n    respondsTo(eventType) {\n        let eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\n        eventToCheck =\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n        return this.eventType === eventToCheck;\n    }\n    createCancelEvent(error, path) {\n        if (this.callbackContext.hasCancelCallback) {\n            return new CancelEvent(this, error, path);\n        }\n        else {\n            return null;\n        }\n    }\n    createEvent(change, query) {\n        assert(change.childName != null, 'Child events should have a childName.');\n        const childRef = child(new ReferenceImpl(query._repo, query._path), change.childName);\n        const index = query._queryParams.getIndex();\n        return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, childRef, index), change.prevName);\n    }\n    getEventRunner(eventData) {\n        if (eventData.getEventType() === 'cancel') {\n            return () => this.callbackContext.onCancel(eventData.error);\n        }\n        else {\n            return () => this.callbackContext.onValue(eventData.snapshot, eventData.prevName);\n        }\n    }\n    matches(other) {\n        if (other instanceof ChildEventRegistration) {\n            return (this.eventType === other.eventType &&\n                (!this.callbackContext ||\n                    !other.callbackContext ||\n                    this.callbackContext.matches(other.callbackContext)));\n        }\n        return false;\n    }\n    hasAnyCallback() {\n        return !!this.callbackContext;\n    }\n}\nfunction addEventListener(query, eventType, callback, cancelCallbackOrListenOptions, options) {\n    let cancelCallback;\n    if (typeof cancelCallbackOrListenOptions === 'object') {\n        cancelCallback = undefined;\n        options = cancelCallbackOrListenOptions;\n    }\n    if (typeof cancelCallbackOrListenOptions === 'function') {\n        cancelCallback = cancelCallbackOrListenOptions;\n    }\n    if (options && options.onlyOnce) {\n        const userCallback = callback;\n        const onceCallback = (dataSnapshot, previousChildName) => {\n            repoRemoveEventCallbackForQuery(query._repo, query, container);\n            userCallback(dataSnapshot, previousChildName);\n        };\n        onceCallback.userCallback = callback.userCallback;\n        onceCallback.context = callback.context;\n        callback = onceCallback;\n    }\n    const callbackContext = new CallbackContext(callback, cancelCallback || undefined);\n    const container = eventType === 'value'\n        ? new ValueEventRegistration(callbackContext)\n        : new ChildEventRegistration(eventType, callbackContext);\n    repoAddEventCallbackForQuery(query._repo, query, container);\n    return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\nfunction onValue(query, callback, cancelCallbackOrListenOptions, options) {\n    return addEventListener(query, 'value', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildAdded(query, callback, cancelCallbackOrListenOptions, options) {\n    return addEventListener(query, 'child_added', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildChanged(query, callback, cancelCallbackOrListenOptions, options) {\n    return addEventListener(query, 'child_changed', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildMoved(query, callback, cancelCallbackOrListenOptions, options) {\n    return addEventListener(query, 'child_moved', callback, cancelCallbackOrListenOptions, options);\n}\nfunction onChildRemoved(query, callback, cancelCallbackOrListenOptions, options) {\n    return addEventListener(query, 'child_removed', callback, cancelCallbackOrListenOptions, options);\n}\n/**\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\n * the respective `on*` callbacks.\n *\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nfunction off(query, eventType, callback) {\n    let container = null;\n    const expCallback = callback ? new CallbackContext(callback) : null;\n    if (eventType === 'value') {\n        container = new ValueEventRegistration(expCallback);\n    }\n    else if (eventType) {\n        container = new ChildEventRegistration(eventType, expCallback);\n    }\n    repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nclass QueryConstraint {\n}\nclass QueryEndAtConstraint extends QueryConstraint {\n    constructor(_value, _key) {\n        super();\n        this._value = _value;\n        this._key = _key;\n    }\n    _apply(query) {\n        validateFirebaseDataArg('endAt', this._value, query._path, true);\n        const newParams = queryParamsEndAt(query._queryParams, this._value, this._key);\n        validateLimit(newParams);\n        validateQueryEndpoints(newParams);\n        if (query._queryParams.hasEnd()) {\n            throw new Error('endAt: Starting point was already set (by another call to endAt, ' +\n                'endBefore or equalTo).');\n        }\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n    }\n}\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nfunction endAt(value, key) {\n    validateKey('endAt', 'key', key, true);\n    return new QueryEndAtConstraint(value, key);\n}\nclass QueryEndBeforeConstraint extends QueryConstraint {\n    constructor(_value, _key) {\n        super();\n        this._value = _value;\n        this._key = _key;\n    }\n    _apply(query) {\n        validateFirebaseDataArg('endBefore', this._value, query._path, false);\n        const newParams = queryParamsEndBefore(query._queryParams, this._value, this._key);\n        validateLimit(newParams);\n        validateQueryEndpoints(newParams);\n        if (query._queryParams.hasEnd()) {\n            throw new Error('endBefore: Starting point was already set (by another call to endAt, ' +\n                'endBefore or equalTo).');\n        }\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n    }\n}\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value lesss than or equal\n * to the specified value and a a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nfunction endBefore(value, key) {\n    validateKey('endBefore', 'key', key, true);\n    return new QueryEndBeforeConstraint(value, key);\n}\nclass QueryStartAtConstraint extends QueryConstraint {\n    constructor(_value, _key) {\n        super();\n        this._value = _value;\n        this._key = _key;\n    }\n    _apply(query) {\n        validateFirebaseDataArg('startAt', this._value, query._path, true);\n        const newParams = queryParamsStartAt(query._queryParams, this._value, this._key);\n        validateLimit(newParams);\n        validateQueryEndpoints(newParams);\n        if (query._queryParams.hasStart()) {\n            throw new Error('startAt: Starting point was already set (by another call to startAt, ' +\n                'startBefore or equalTo).');\n        }\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n    }\n}\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nfunction startAt(value = null, key) {\n    validateKey('startAt', 'key', key, true);\n    return new QueryStartAtConstraint(value, key);\n}\nclass QueryStartAfterConstraint extends QueryConstraint {\n    constructor(_value, _key) {\n        super();\n        this._value = _value;\n        this._key = _key;\n    }\n    _apply(query) {\n        validateFirebaseDataArg('startAfter', this._value, query._path, false);\n        const newParams = queryParamsStartAfter(query._queryParams, this._value, this._key);\n        validateLimit(newParams);\n        validateQueryEndpoints(newParams);\n        if (query._queryParams.hasStart()) {\n            throw new Error('startAfter: Starting point was already set (by another call to startAt, ' +\n                'startAfter, or equalTo).');\n        }\n        return new QueryImpl(query._repo, query._path, newParams, query._orderByCalled);\n    }\n}\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nfunction startAfter(value, key) {\n    validateKey('startAfter', 'key', key, true);\n    return new QueryStartAfterConstraint(value, key);\n}\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n    constructor(_limit) {\n        super();\n        this._limit = _limit;\n    }\n    _apply(query) {\n        if (query._queryParams.hasLimit()) {\n            throw new Error('limitToFirst: Limit was already set (by another call to limitToFirst ' +\n                'or limitToLast).');\n        }\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToFirst(query._queryParams, this._limit), query._orderByCalled);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nfunction limitToFirst(limit) {\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n        throw new Error('limitToFirst: First argument must be a positive integer.');\n    }\n    return new QueryLimitToFirstConstraint(limit);\n}\nclass QueryLimitToLastConstraint extends QueryConstraint {\n    constructor(_limit) {\n        super();\n        this._limit = _limit;\n    }\n    _apply(query) {\n        if (query._queryParams.hasLimit()) {\n            throw new Error('limitToLast: Limit was already set (by another call to limitToFirst ' +\n                'or limitToLast).');\n        }\n        return new QueryImpl(query._repo, query._path, queryParamsLimitToLast(query._queryParams, this._limit), query._orderByCalled);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nfunction limitToLast(limit) {\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n        throw new Error('limitToLast: First argument must be a positive integer.');\n    }\n    return new QueryLimitToLastConstraint(limit);\n}\nclass QueryOrderByChildConstraint extends QueryConstraint {\n    constructor(_path) {\n        super();\n        this._path = _path;\n    }\n    _apply(query) {\n        validateNoPreviousOrderByCall(query, 'orderByChild');\n        const parsedPath = new Path(this._path);\n        if (pathIsEmpty(parsedPath)) {\n            throw new Error('orderByChild: cannot pass in empty path. Use orderByValue() instead.');\n        }\n        const index = new PathIndex(parsedPath);\n        const newParams = queryParamsOrderBy(query._queryParams, index);\n        validateQueryEndpoints(newParams);\n        return new QueryImpl(query._repo, query._path, newParams, \n        /*orderByCalled=*/ true);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nfunction orderByChild(path) {\n    if (path === '$key') {\n        throw new Error('orderByChild: \"$key\" is invalid.  Use orderByKey() instead.');\n    }\n    else if (path === '$priority') {\n        throw new Error('orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.');\n    }\n    else if (path === '$value') {\n        throw new Error('orderByChild: \"$value\" is invalid.  Use orderByValue() instead.');\n    }\n    validatePathString('orderByChild', 'path', path, false);\n    return new QueryOrderByChildConstraint(path);\n}\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n    _apply(query) {\n        validateNoPreviousOrderByCall(query, 'orderByKey');\n        const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n        validateQueryEndpoints(newParams);\n        return new QueryImpl(query._repo, query._path, newParams, \n        /*orderByCalled=*/ true);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nfunction orderByKey() {\n    return new QueryOrderByKeyConstraint();\n}\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n    _apply(query) {\n        validateNoPreviousOrderByCall(query, 'orderByPriority');\n        const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n        validateQueryEndpoints(newParams);\n        return new QueryImpl(query._repo, query._path, newParams, \n        /*orderByCalled=*/ true);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nfunction orderByPriority() {\n    return new QueryOrderByPriorityConstraint();\n}\nclass QueryOrderByValueConstraint extends QueryConstraint {\n    _apply(query) {\n        validateNoPreviousOrderByCall(query, 'orderByValue');\n        const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n        validateQueryEndpoints(newParams);\n        return new QueryImpl(query._repo, query._path, newParams, \n        /*orderByCalled=*/ true);\n    }\n}\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nfunction orderByValue() {\n    return new QueryOrderByValueConstraint();\n}\nclass QueryEqualToValueConstraint extends QueryConstraint {\n    constructor(_value, _key) {\n        super();\n        this._value = _value;\n        this._key = _key;\n    }\n    _apply(query) {\n        validateFirebaseDataArg('equalTo', this._value, query._path, false);\n        if (query._queryParams.hasStart()) {\n            throw new Error('equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n                'equalTo).');\n        }\n        if (query._queryParams.hasEnd()) {\n            throw new Error('equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n                'equalTo).');\n        }\n        return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query));\n    }\n}\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nfunction equalTo(value, key) {\n    validateKey('equalTo', 'key', key, true);\n    return new QueryEqualToValueConstraint(value, key);\n}\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nfunction query(query, ...queryConstraints) {\n    let queryImpl = getModularInstance(query);\n    for (const constraint of queryConstraints) {\n        queryImpl = constraint._apply(queryImpl);\n    }\n    return queryImpl;\n}\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos = {};\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {\n    repo.repoInfo_ = new RepoInfo(`${host}:${port}`, \n    /* secure= */ false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);\n    if (tokenProvider) {\n        repo.authTokenProvider_ = tokenProvider;\n    }\n}\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nfunction repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {\n    let dbUrl = url || app.options.databaseURL;\n    if (dbUrl === undefined) {\n        if (!app.options.projectId) {\n            fatal(\"Can't determine Firebase Database URL. Be sure to include \" +\n                ' a Project ID when calling firebase.initializeApp().');\n        }\n        log('Using default host for project ', app.options.projectId);\n        dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n    }\n    let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    let repoInfo = parsedUrl.repoInfo;\n    let isEmulator;\n    let dbEmulatorHost = undefined;\n    if (typeof process !== 'undefined' && process.env) {\n        dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n    }\n    if (dbEmulatorHost) {\n        isEmulator = true;\n        dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n        parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n        repoInfo = parsedUrl.repoInfo;\n    }\n    else {\n        isEmulator = !parsedUrl.repoInfo.secure;\n    }\n    const authTokenProvider = nodeAdmin && isEmulator\n        ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n        : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n    validateUrl('Invalid Firebase Database URL', parsedUrl);\n    if (!pathIsEmpty(parsedUrl.path)) {\n        fatal('Database URL must point to the root of a Firebase Database ' +\n            '(not including a child path).');\n    }\n    const repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));\n    return new Database(repo, app);\n}\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo, appName) {\n    const appRepos = repos[appName];\n    // This should never happen...\n    if (!appRepos || appRepos[repo.key] !== repo) {\n        fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n    }\n    repoInterrupt(repo);\n    delete appRepos[repo.key];\n}\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {\n    let appRepos = repos[app.name];\n    if (!appRepos) {\n        appRepos = {};\n        repos[app.name] = appRepos;\n    }\n    let repo = appRepos[repoInfo.toURLString()];\n    if (repo) {\n        fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\n    }\n    repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n    appRepos[repoInfo.toURLString()] = repo;\n    return repo;\n}\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nfunction repoManagerForceRestClient(forceRestClient) {\n    useRestClient = forceRestClient;\n}\n/**\n * Class representing a Firebase Realtime Database.\n */\nclass Database {\n    /** @hideconstructor */\n    constructor(_repoInternal, \n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    app) {\n        this._repoInternal = _repoInternal;\n        this.app = app;\n        /** Represents a `Database` instance. */\n        this['type'] = 'database';\n        /** Track if the instance has been used (root or repo accessed) */\n        this._instanceStarted = false;\n    }\n    get _repo() {\n        if (!this._instanceStarted) {\n            repoStart(this._repoInternal, this.app.options.appId, this.app.options['databaseAuthVariableOverride']);\n            this._instanceStarted = true;\n        }\n        return this._repoInternal;\n    }\n    get _root() {\n        if (!this._rootInternal) {\n            this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n        }\n        return this._rootInternal;\n    }\n    _delete() {\n        if (this._rootInternal !== null) {\n            repoManagerDeleteRepo(this._repo, this.app.name);\n            this._repoInternal = null;\n            this._rootInternal = null;\n        }\n        return Promise.resolve();\n    }\n    _checkNotDeleted(apiName) {\n        if (this._rootInternal === null) {\n            fatal('Cannot call ' + apiName + ' on a deleted database.');\n        }\n    }\n}\nfunction checkTransportInit() {\n    if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n        warn('Transport has already been initialized. Please call this function before calling ref or setting up a listener');\n    }\n}\n/**\n * Force the use of websockets instead of longPolling.\n */\nfunction forceWebSockets() {\n    checkTransportInit();\n    BrowserPollConnection.forceDisallow();\n}\n/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\nfunction forceLongPolling() {\n    checkTransportInit();\n    WebSocketConnection.forceDisallow();\n    BrowserPollConnection.forceAllow();\n}\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nfunction getDatabase(app = getApp(), url) {\n    return _getProvider(app, 'database').getImmediate({\n        identifier: url\n    });\n}\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nfunction connectDatabaseEmulator(db, host, port, options = {}) {\n    db = getModularInstance(db);\n    db._checkNotDeleted('useEmulator');\n    if (db._instanceStarted) {\n        fatal('Cannot call useEmulator() after instance has already been initialized.');\n    }\n    const repo = db._repoInternal;\n    let tokenProvider = undefined;\n    if (repo.repoInfo_.nodeAdmin) {\n        if (options.mockUserToken) {\n            fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".');\n        }\n        tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n    }\n    else if (options.mockUserToken) {\n        const token = typeof options.mockUserToken === 'string'\n            ? options.mockUserToken\n            : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n        tokenProvider = new EmulatorTokenProvider(token);\n    }\n    // Modify the repo to apply emulator settings\n    repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nfunction goOffline(db) {\n    db = getModularInstance(db);\n    db._checkNotDeleted('goOffline');\n    repoInterrupt(db._repo);\n}\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nfunction goOnline(db) {\n    db = getModularInstance(db);\n    db._checkNotDeleted('goOnline');\n    repoResume(db._repo);\n}\nfunction enableLogging(logger, persistent) {\n    enableLogging$1(logger, persistent);\n}\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction registerDatabase(variant) {\n    setSDKVersion(SDK_VERSION$1);\n    _registerComponent(new Component('database', (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate();\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url);\n    }, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\n    registerVersion(name, version, variant);\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n    registerVersion(name, version, 'esm2017');\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst SERVER_TIMESTAMP = {\n    '.sv': 'timestamp'\n};\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\nfunction serverTimestamp() {\n    return SERVER_TIMESTAMP;\n}\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\nfunction increment(delta) {\n    return {\n        '.sv': {\n            'increment': delta\n        }\n    };\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A type for the resolve value of {@link runTransaction}.\n */\nclass TransactionResult {\n    /** @hideconstructor */\n    constructor(\n    /** Whether the transaction was successfully committed. */\n    committed, \n    /** The resulting data snapshot. */\n    snapshot) {\n        this.committed = committed;\n        this.snapshot = snapshot;\n    }\n    /** Returns a JSON-serializable representation of this object. */\n    toJSON() {\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n    }\n}\n/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which\n * just overwrites the data regardless of its previous value, `runTransaction()` is\n * used to modify the existing value to a new value, ensuring there are no\n * conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is\n * used to transform the current value into a new value. If another client\n * writes to the location before your new value is successfully written, your\n * update function will be called again with the new current value, and the\n * write will be retried. This will happen repeatedly until your write succeeds\n * without conflict or you abort the transaction by not returning a value from\n * your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at\n * that location, so extreme care should be taken if mixing `set()` and\n * `runTransaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be\n * aware that a client needs `.read` access in addition to `.write` access in\n * order to perform a transaction. This is because the client-side nature of\n * transactions requires the client to read the data in order to transactionally\n * update it.\n *\n * @param ref - The location to atomically modify.\n * @param transactionUpdate - A developer-supplied function which will be passed\n * the current data stored at this location (as a JavaScript object). The\n * function should return the new value it would like written (as a JavaScript\n * object). If `undefined` is returned (i.e. you return with no arguments) the\n * transaction will be aborted and the data at this location will not be\n * modified.\n * @param options - An options object to configure transactions.\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\n * callback to handle success and failure.\n */\nfunction runTransaction(ref, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntransactionUpdate, options) {\n    var _a;\n    ref = getModularInstance(ref);\n    validateWritablePath('Reference.transaction', ref._path);\n    if (ref.key === '.length' || ref.key === '.keys') {\n        throw ('Reference.transaction failed: ' + ref.key + ' is a read-only object.');\n    }\n    const applyLocally = (_a = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a !== void 0 ? _a : true;\n    const deferred = new Deferred();\n    const promiseComplete = (error, committed, node) => {\n        let dataSnapshot = null;\n        if (error) {\n            deferred.reject(error);\n        }\n        else {\n            dataSnapshot = new DataSnapshot(node, new ReferenceImpl(ref._repo, ref._path), PRIORITY_INDEX);\n            deferred.resolve(new TransactionResult(committed, dataSnapshot));\n        }\n    };\n    // Add a watch to make sure we get server updates.\n    const unwatcher = onValue(ref, () => { });\n    repoStartTransaction(ref._repo, ref._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);\n    return deferred.promise;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nPersistentConnection;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\n    this.sendRequest('q', { p: pathString }, onComplete);\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nPersistentConnection.prototype.echo = function (data, onEcho) {\n    this.sendRequest('echo', { d: data }, onEcho);\n};\n// RealTimeConnection properties that we use in tests.\nConnection;\n/**\n * @internal\n */\nconst hijackHash = function (newHash) {\n    const oldPut = PersistentConnection.prototype.put;\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n        if (hash !== undefined) {\n            hash = newHash();\n        }\n        oldPut.call(this, pathString, data, onComplete, hash);\n    };\n    return function () {\n        PersistentConnection.prototype.put = oldPut;\n    };\n};\nRepoInfo;\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nconst forceRestClient = function (forceRestClient) {\n    repoManagerForceRestClient(forceRestClient);\n};\n\n/**\n * Firebase Realtime Database\n *\n * @packageDocumentation\n */\nregisterDatabase();\n\nexport { DataSnapshot, Database, OnDisconnect, QueryConstraint, TransactionResult, QueryImpl as _QueryImpl, QueryParams as _QueryParams, ReferenceImpl as _ReferenceImpl, forceRestClient as _TEST_ACCESS_forceRestClient, hijackHash as _TEST_ACCESS_hijackHash, repoManagerDatabaseFromApp as _repoManagerDatabaseFromApp, setSDKVersion as _setSDKVersion, validatePathString as _validatePathString, validateWritablePath as _validateWritablePath, child, connectDatabaseEmulator, enableLogging, endAt, endBefore, equalTo, forceLongPolling, forceWebSockets, get, getDatabase, goOffline, goOnline, increment, limitToFirst, limitToLast, off, onChildAdded, onChildChanged, onChildMoved, onChildRemoved, onDisconnect, onValue, orderByChild, orderByKey, orderByPriority, orderByValue, push, query, ref, refFromURL, remove, runTransaction, serverTimestamp, set, setPriority, setWithPriority, startAfter, startAt, update };\n//# sourceMappingURL=index.esm2017.js.map\n"]},"metadata":{},"sourceType":"module"}